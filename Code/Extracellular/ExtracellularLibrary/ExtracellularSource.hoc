
// !!! remove the underscore in name once we get rid of "create ExtracellularSource"
begintemplate ExtracellularSource_

    public isEqual
    public species, spatialInfo, temporalInfo, capacityInfo
    public s
    
    external stringsEqual, codeContractViolation
    
    strdef species
    // !!! think about speciesIdx
    
    objref spatialInfo, temporalInfo, capacityInfo
    
    strdef s
    
    
    proc init() {
        species = $s1
        spatialInfo = $o2
        temporalInfo = $o3
        capacityInfo = $o4
        
        if (spatialInfo.enumPointBall == 0 && temporalInfo.enumStaticSwitchSpike == 1) {
            codeContractViolation()
        }
        // !!! add similar check for enumPointBall+enumStaticSwitchSpike+capacityInfo
        
        prepareShownString()
    }
    
    func isEqual() { localobj other
        other = $o1
        
        // !!! BUG: it must be illegal to create two sources with the same species, spatialInfo and temporalInfo independently on capacityInfo,
        //     to achieve this, we need to remove the last predicate below,
        //     but after doing this, we will face other problem: user cannot click "Correct", change only capacityInfo, then click "Apply"
        
        // !!! maybe it must be illegal to create two sources with the only difference in either startTime, endTime or spikeTime
        
        return stringsEqual(species, other.species) && spatialInfo.isEqual(other.spatialInfo) && temporalInfo.isEqual(other.temporalInfo) && capacityInfo.isEqual(other.capacityInfo)
    }
    
    // All next staff is private
    
    
    // !!! think about showing the temporal info and the capacity info (maybe indicate the capacity just after the species name)
    proc prepareShownString() {
        strdef dynamicsName
        temporalInfo.getDynamicsName(dynamicsName)
        spatialInfo.prepareShownString(species, dynamicsName, s)
    }
    
endtemplate ExtracellularSource_
