
objref importCompleteWidget


begintemplate ImportCompleteWidget

    public show
    
    // User choice made with UI
    userChoiceWhetherToSaveHocFile = 0
    
    isAxonInserted = -1
    
    objref mainBox
    
    external isAstrocyteOrNeuron, mwh, ic, importCompleteHandler
    external chooseOutLocationAndExportHocFile, hideImportedGeometry, cleanupBeforeNextImport, printMsgAndStop
    
    // Show all warnings and/or modifiers and ask user whether to proceed with this file (optionally saving it as HOC somewhere) or import other one
    // $1 - 0/1 flag indicating whether this proc is called after the file conversion stage
    // $o2 - Names of sections being topological roots in cell (List of String-s); empty means "nevermind"
    // $o3 - Names of sections being topological roots in soma (List of String-s); empty means "nevermind"
    // $o4 - Names of sections being topological roots in axon (List of String-s); empty means "nevermind"
    // $5 - 0/1 flag indicated whether default soma was inserted by the importer
    // $6 - 0/1 flag indicated whether default axon was inserted by the importer
    proc show() { local isCalledAfterConversion, isSomaInsered localobj namesOfTopoRootsInCell, namesOfTopoRootsInSoma, namesOfTopoRootsInAxon
        strdef template, text
        
        isCalledAfterConversion = $1
        namesOfTopoRootsInCell = $o2
        namesOfTopoRootsInSoma = $o3
        namesOfTopoRootsInAxon = $o4
        isSomaInsered = $5
        isAxonInserted = $6
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            if (namesOfTopoRootsInCell.count() > 1 || namesOfTopoRootsInSoma.count() > 1 || namesOfTopoRootsInAxon.count() > 1) {
                xlabel("================== Warning(s) ===================")
                warnAboutTopoPolyRootnessIfDetected("Cell", namesOfTopoRootsInCell)
                warnAboutTopoPolyRootnessIfDetected("Soma", namesOfTopoRootsInSoma) // !! Not implemented, just a stub
                warnAboutTopoPolyRootnessIfDetected("Axon", namesOfTopoRootsInAxon) // !! Not implemented, just a stub
                xlabel("===============================================")
                xlabel("")
            }
            
            if (isSomaInsered || isAxonInserted) {
                xlabel("================== Modifier(s) ===================")
                if (isSomaInsered) {
                    xlabel("Soma was missing, so we created a default one")
                    template = "as a cylinder with diameter and length of %g um"
                    sprint(text, template, ic.getDefaultSomaDiamAndLen())
                    xlabel(text)
                    xlabel("and connected all root dendrites to its centre.")
                }
                if (isAxonInserted) {
                    if (isSomaInsered) {
                        xlabel("")
                    }
                    xlabel("Axon was missing, so we created a default 2-section axon")
                    xlabel("and connected it to the centre of the first soma section.")
                }
                xlabel("===============================================")
                xlabel("")
            }
            
            xlabel("Do you want to proceed with this file or import other one?")
            xbutton("Use this one", "useThisOneHandler()")
            xbutton("Import other", "importOtherHandler()")
            if (isCalledAfterConversion) {
                xlabel("")
                // !! If we inserted a default axon, it will be lost
                xcheckbox("Save HOC file before next step", &userChoiceWhetherToSaveHocFile)
            } else {
                // !! Not implemented; two things to think about:
                //    (a) each HOC file can load_file other(s)
                //    (b) we could add a default soma and/or axon
                // !! Once I complete making Export module, call it here
                userChoiceWhetherToSaveHocFile = 0
            }
            xpanel()
        }
        mainBox.dismiss_action("dismissHandler()")
        mainBox.intercept(0)
        mainBox.map("Import complete", 550, 350, -1, -1)
    }
    
    // Warn user about topological polyrootness (if detected)
    // $s1 - Where the polyrootness was detected
    // $o2 - Names of sections being topological roots (List of String-s); empty means "nevermind"
    proc warnAboutTopoPolyRootnessIfDetected() { local numTopoRoots, idx localobj namesOfTopoRoots
        strdef where, text
        
        where = $s1
        namesOfTopoRoots = $o2
        
        numTopoRoots = namesOfTopoRoots.count()
        if (numTopoRoots <= 1) {
            return
        }
        
        sprint(text, "%s topology has %d root sections:", where, numTopoRoots)
        xlabel(text)
        for idx = 0, numTopoRoots - 1 {
            sprint(text, "    * %s", namesOfTopoRoots.o(idx).s)
            xlabel(text)
        }
    }
    
    // Common part of handlers for both buttons
    proc commonHandler() {
        // Close the widget
        mainBox.unmap()
        
        if (userChoiceWhetherToSaveHocFile) {
            if (isAxonInserted) {
                mwh.showNotImplementedWarning("Axon won't be saved.")
            }
            chooseOutLocationAndExportHocFile()
        }
    }
    
    // Handler of "Use this one" button for the widget
    proc useThisOneHandler() {
    
        commonHandler()
        
        if (!isAstrocyteOrNeuron) {
            hideImportedGeometry()
        }
        
        // !! maybe "access <somaname>[0]" before exit, add comment to import entry point
        execute(importCompleteHandler)
    }
    
    // Handler of "Import other" button for the widget
    proc importOtherHandler() {
        strdef hocCommandTempl, hocCommand
        
        commonHandler()
        
        cleanupBeforeNextImport()
        
        hocCommandTempl = "importHocOrSwcOrZipOrOtherFile(\"%s\")"
        sprint(hocCommand, hocCommandTempl, importCompleteHandler)
        execute(hocCommand)     // The proc will be defined after sourcing this file, but before calling this proc
    }
    
    // Handler of "X" button for the widget
    proc dismissHandler() {
        // Close the widget
        mainBox.unmap()
        
        printMsgAndStop("Interrupted by user")
    }

endtemplate ImportCompleteWidget
