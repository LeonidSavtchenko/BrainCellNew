
// Import SWC file from ZIP archive downloaded from NeuroMorpho.org
// $s1 - Input ZIP file path and name
proc importSwcFileFromZipArchive_layer1() {
    strdef inZipFilePathName, outFolderRelPathName, outFolderPathNameTempl, outFolderPathName, swcFilePathName
    
    inZipFilePathName = $s1
    
    // Prepare the temporary folder
    outFolderRelPathName = "Code/Import/temp_folder/last_unzipped"
    createOrCleanUpTempFolder(outFolderRelPathName)
    
    // Unzip the archive with 7-Zip and rename the input SWC file
    outFolderPathNameTempl = "%s%s"
    sprint(outFolderPathName, outFolderPathNameTempl, getcwd(), outFolderRelPathName)
    unzipArchiveWith7ZipAndRenameInputFile(inZipFilePathName, outFolderPathName, swcFilePathName)
    
    importSwcOrOtherFile_layer1(swcFilePathName)
}

// Import SWC or any other file supported by NLMorphologyConverter
// $s1 - Input file path and name
proc importSwcOrOtherFile_layer1() { local isSomaMissing, isAxonMissing, somaDiamAndLenOrMinusOne, isAxonMissingAndRequired
    strdef inFilePathName, hocFilePathName
    
    inFilePathName = $s1
    
    // Check if this geometry file does not define soma and/or axon
    checkIfSomaAndOrAxonAreMissingInThisGeometryFile(inFilePathName, &isSomaMissing, &isAxonMissing)
    
    if (isSomaMissing) {
        somaDiamAndLenOrMinusOne = ic.getDefaultSomaDiamAndLen()
    } else {
        somaDiamAndLenOrMinusOne = -1
    }
    
    // Convert the selected file to HOC with NLMorphologyConverter and save to the temporary folder;
    // also, insert a default soma if missing
    convertFileToHocWithNLMorphologyConverter(inFilePathName, somaDiamAndLenOrMinusOne, hocFilePathName)
    
    isAxonMissingAndRequired = !isAstrocyteOrNeuron && isAxonMissing
    
    importHocFile_layer1(hocFilePathName, 1, isSomaMissing, isAxonMissingAndRequired)
}

// Import HOC file
// $s1 - Input HOC file path and name
// $2 - 0/1 flag indicating whether this proc is called after the file conversion stage
// $3 - 0/1 flag indicating whether default soma was inserted during the file conversion
// $4 - 0/1 flag indicating whether axon is missing and required, or -1 if we don't know yet
// Other input: isAstrocyteOrNeuron (taken from the top level)
proc importHocFile_layer1() { local isCalledAfterConversion, isSomaInsertedDuringConversion, isAxonMissingAndRequiredOrMinusOne, isOldStyleAstroHocFile, needToShowCellularCompartmentsWidget localobj usedNamesForSoma, usedNamesForDendrites, usedNamesForAxon, allNames, defaultSomaNameIdxs, defaultDendriteNameIdxs, defaultAxonNameIdxs
    strdef inFilePathName
    
    inFilePathName = $s1
    isCalledAfterConversion = $2
    // !! use these two (hide 1st and 3rd panels)
    isSomaInsertedDuringConversion = $3
    isAxonMissingAndRequiredOrMinusOne = $4
    
    // Try to load the HOC file with "load_file" and print some clues if failed
    loadHocFile(inFilePathName)
    
    if (!isCalledAfterConversion) {
        isOldStyleAstroHocFile = checkIfThisHocFileIsOfAstroOldStyle(inFilePathName)
        if (isOldStyleAstroHocFile) {
            deleteExtraDendrites()
        }
    } else {
        isOldStyleAstroHocFile = 0
    }
    
    usedNamesForSoma = new List()
    usedNamesForDendrites = new List()
    usedNamesForAxon = new List()
    
    if (!isOldStyleAstroHocFile) {
        // Loop by all sections created by the imported HOC file and prepare a list unique names
        allNames = getAllSectionNames()
        
        if (allNames.count() == 0) {
            printImportFailedMsgAndStop("The imported HOC file did not create any section")
        }
        
        if (!isCalledAfterConversion) {
            // Try guess names used for soma, dendrites and (for neuron only) axons in the imported HOC file
            // Also, check if user needs to select names from the lists manually (at least to confirm our choice), or the choice is so obvious that we can skip this stage
            defaultSomaNameIdxs = new Vector()
            defaultDendriteNameIdxs = new Vector()
            defaultAxonNameIdxs = new Vector()
            needToShowCellularCompartmentsWidget = chooseDefaultSelectedNamesForCompartments(allNames, defaultSomaNameIdxs, defaultDendriteNameIdxs, defaultAxonNameIdxs)
            
            if (needToShowCellularCompartmentsWidget) {
                // Ask user to select names from the lists so we can put proper sections to soma_ref, dendrite_ref and (for neuron only) axon_ref
                
                // Create and show the widget
                cellularCompartmentsWidget = new CellularCompartmentsWidget(isCalledAfterConversion, isSomaInsertedDuringConversion, isOldStyleAstroHocFile, allNames, defaultSomaNameIdxs, defaultDendriteNameIdxs, defaultAxonNameIdxs)
                cellularCompartmentsWidget.show()
                
                // Unfortunately, we have to exit all the call stack now even though user is still making a choice
                // The "OK" button handler will call "importHocFile_layer2"
                return
            } else {
                if (defaultSomaNameIdxs.size() != 1 || defaultDendriteNameIdxs.size() != 1 || (!isAstrocyteOrNeuron && defaultAxonNameIdxs.size() != 1)) {
                    codeContractViolation()
                }
                if (isAstrocyteOrNeuron && defaultAxonNameIdxs.size() != 0) {
                    codeContractViolation()
                }
                
                usedNamesForSoma.append(allNames.o(defaultSomaNameIdxs.x[0]))
                usedNamesForDendrites.append(allNames.o(defaultDendriteNameIdxs.x[0]))
                if (!isAstrocyteOrNeuron) {
                    usedNamesForAxon.append(allNames.o(defaultAxonNameIdxs.x[0]))
                }
            }
        } else {
            // Standard names declared by NLMorphologyConverter in the output HOC file
            usedNamesForSoma.append(new String("soma"))
            usedNamesForDendrites.append(new String("dendrite"))
            if (!isAstrocyteOrNeuron && isAxonMissingAndRequiredOrMinusOne == 0) {
                usedNamesForAxon.append(new String("axon"))
            }
        }
    } else {
        // Standard names used in old-style HOC files (designed for Astro 1.0)
        usedNamesForSoma.append(new String("soma"))
        usedNamesForDendrites.append(new String("dendrite"))
        // (Nothing to append to usedNamesForAxon)
    }
    
    importHocFile_layer2(isCalledAfterConversion, isSomaInsertedDuringConversion, isOldStyleAstroHocFile, usedNamesForSoma, usedNamesForDendrites, usedNamesForAxon)
}
