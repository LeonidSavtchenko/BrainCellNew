// Calcium Gap Junctions
// !! objref gapsca[SizeTotal*2]
objref gapsca[NumberDendrites-1]  // !! why -1 here? cannot use cell with only 1 dendrite due to this

// Random
objref randomStretch


// Changes height distribution of dendrites.
// $1 - Random seed !! Z_coordinate is passed here - it looks strange because we will actualy use "ceil" of Z_coordinate as the seed
// $2 - Scale factor
proc stretch() { local scaleNew, i, j, d
    randomStretch = rngUtils.getFor_stretch_withCustomSeed($1)
    scaleNew = $2
    
    for i = 0, NumberDendrites-2 dendrite_ref.o(i).sec {  // !! why -2?
        for j = 0, n3d()-1 {
            if (x3d(j) > 0.01 && y3d(j) > 0.01) {
                d = 1.67/sqrt(scaleNew*sqrt(x3d(j)^2+y3d(j)^2))     // !! if scaleNew < 0, then error here: sqrt argument out of domain
            } else {
                d = 1.67/sqrt(scaleNew*sqrt(x3d(j)^2+1+y3d(j)^2))   // !! the same comment
            }
            pt3dchange(j, x3d(j), y3d(j), z3d(j), d)    // randomStretch.uniform(-1, 1)+z3d(j)
        }
    }
    
    MaxDendriticLength = getMaxDendriticLength()
    // !! need to update astrocyte biophysics here because it depends on L
}

// Sets rresistance and potential to gaps.
// $1 - Gap resistance
// $2 - Potential
proc res_gap() { local i
    for i = 2, NumberDendrites-2 {  // !! why from 2 to -2?
        gaps[i].r = $1
        gaps[i].VoltageGap = $2
    }
}

// Changes height distribution of dendritic length.
// $1 -XY
// $2 - Z


// Gap junction modifying the Ca concentration
//****************************************************************************************
proc GapCaJunc() {
   dendrite_ref.o($1).sec { gapsca[$1] = new GapCa(0.5)}
    setpointer  gapsca[$1].gapCaP, dendrite_ref.o($2).sec.cai(0.5) gapsca[$1].jd = 0
}

// Installation of two types ofGap junction,  GapJunction with another astrocyte (in LargeGlia) and autapse  Gap junctions
proc insertGapJunc() { local i
    // for i = 0, SizeTotal-2 {
    //     LargeGlia[i] gapsca[i] = new GapCa(0.5)
    for i = 0, NumberDendrites-2 {  // !! why -2?
        dendrite_ref.o(i).sec gapsca[i] = new GapCa(0.5)
        gapsca[i].jd = 0
    }
    for i = 0, NumberDendrites-1 {  // !! was: -2
        dendrite_ref.o(i).sec {insert CAl}
    }
    for i = 0, NumberDendrites-3 {  // !! why -3?
        GapCaJunc(i,i+1)
        GapCaJunc(i+1,i)
    }
}
    //   LargeGlia[i+1] for j = 0, n3d()-1 {
    //   x1=x3d(j)
    //    y1=y3d(j)
    //}
    //if (sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1)) < $2) {
    //    gapsca[i].jd = $1
    //    print i, sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1))
    // } else {
    //    gapsca[i].jd = 0
    // }

proc CaGapFlux() { local ControlParameter
    ControlParameter=$2
    print "Contr=", ControlParameter, "jd=", jd
    if (ControlParameter < 0.5) {
       // for i = 0, SizeTotal-2 {
        //LargeGlia[i] {
        for i = 0, NumberDendrites-2 {  // !! why -2?
            dendrite_ref.o(i).sec {
                gapsca[i].jd = $1
                gapsca[i].ControlGap=ControlParameter
            }
        }
    } else {
        for i = 0, NumberDendrites-2 {  // !! why -2?
            dendrite_ref.o(i).sec {
                gapsca[i].jd = $1
                gapsca[i].ControlGap=ControlParameter 
            }
        }
    }
}
