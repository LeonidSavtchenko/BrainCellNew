
if (isAstrocyteOrNeuron) {
    load_file("Astrocyte/AstrocyteGeometryPanel.hoc")
    load_file("Astrocyte/AstrocyteHandlers.hoc")
} else {
    load_file("Neuron/NeuronGeometryPanel.hoc")
}

if (isBaseOrNanoStart) {
    load_file("Widgets/SeededDendritesWidget_deprecated.hoc")
}

{ load_file("../Managers/CommonLoads.hoc") }
{ load_file("../Managers/MechManager/MechManager.hoc") }
if (!isAstrocyteOrNeuron) {
    load_file("../Managers/SynManager/SynManager.hoc")
}
{ load_file("../Extracellular/ExtracellularManager.hoc") }

{ load_file("../Export/Widgets/ExportWidgetsLoads.hoc") }


// UI
objref hBoxMainPanel, deckReseeding

// Runs selected simulation from UI.
// $1 - Number of selected simulation
proc SimulationSelected() {
    if ($1 >= 1 && $1 <= 7 && currentMechanismSetup == 1) {
        InsertGlutamateMechanisms(0)
        InsertElectricMechanisms(1)
        currentMechanismSetup = 0
    } else if ($1 == 8 && currentMechanismSetup == 0) {
        InsertElectricMechanisms(0)
        InsertGlutamateMechanisms(1)
        currentMechanismSetup = 1
    } else if ($1 == 9) { // && currentMechanismSetup == 0) {
        InsertElectricMechanisms(0)
       InsertPotassiumMechanisms(1)
        currentMechanismSetup = 0 
    }
    
    
    
    // Update advance() proc and run
    if ($1 == 1) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvDefault.hoc")
        FrapCircle()
    } else if ($1 == 2) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvFrapLine.hoc")
        FrapLine()
    } else if ($1 == 3) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvDefault.hoc")
        SpatialVoltage()
    } else if ($1 == 4) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvDefault.hoc")
        ConstantStimulations()
    } else if ($1 == 5) {        
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvDefault.hoc")
        FrequencyStimulations()
    } else if ($1 == 6) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvCalciumDynamics.hoc")
        RunCaSimulation()
    } else if ($1 == 7) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvCalciumWave.hoc")
        CalciumWave()
    } else if ($1 == 8) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvGlutamate.hoc")
        RunAstroGlu(OnlySingleGluSimulations)
    } else if ($1 == 9) {
        load_file(1, "Code/Core/Simulations/AdvanceProcs/AdvPotassium.hoc")
        RunAstroPotasasium(OnlySingleGluSimulations) 
    }
}

// Shows main program UI.
proc showMainUi() { local minV1, minV2, maxV localobj vBoxLeftPanel, vBoxCentralPanel, vBoxRightPanel, plotShapeMainV, graphMainSomaV

    Z_coordinate = 10   // the stochastic parameter changes the Z-distribution of astrocytes branches
    ScalingDiam = 0.2   //  the parameter scales the diameter of the central dendrites
    
    // LengthXY = 5.5   //
    // LengthZ = 2      // These were not used;
    // ShiftXY = 200    // also, the first three duplicate those ones from Code\Prologue\Astrocyte\initAstrocyte.hoc
    // Distance = 2     //
    
    hBoxMainPanel = new HBox()
    hBoxMainPanel.intercept(1)
    {
        // Left panel of main menu
        vBoxLeftPanel = new VBox()
        vBoxLeftPanel.intercept(1)
        {
            if (isBaseOrNanoStart) {
                /* !!
                xpanel("")
                xbutton("Import cell", "loadNanoHocFile()")
                xpanel()
                */
                
                createReseedingDeck()
                
                if (isAstrocyteOrNeuron) {
                    createAstrocyteGeometryPanel()
                } else {
                    createNeuronGeometryPanel()
                }
                
                xpanel("Dendritic geometry")
                xlabel("========= Dendritic geometry ================================")
                // xlabel("========= For library stem tree files only =========")
                //xlabel("Seed of random number to modify Z coordinate")
                //xlabel("of each segment from - 1 to 1 um")
                //xvalue("Z coordinate Random number","Z_coordinate", 1, "stretch(Z_coordinate, ScalingDiam)", 0, 1)
                
                   xvalue("Scaling of diameter","ScalingDiam", 1, "stretch(Z_coordinate, ScalingDiam)", 0, 1)
                
                //xvalue("Length x and Y","LengthXY", 1, "stretchXY(LengthXY, LengthZ)", 0, 1)
                //xvalue("Length z","LengthZ", 1, "stretchXY(LengthXY, LengthZ)", 0, 1)
                /*
                xlabel("----Gap Junctions----------------------------------------------------------------------")
                xvalue("Number of Gap junctions, evenly distributed on dendritic tree", "NumberDendrites")
                xvalue("Gap junction resistance (Megohm)","GapResistance", 1,"res_gap(GapResistance, potential)", 0, 1  )
                xvalue("Gap junction reverse potential (mV)","potential", 1,"res_gap(GapResistance, potential)", 0, 1  )
                */
                xlabel("To display the radial distribution of: S/V ratio,")
                xlabel("tissue volume fraction, volume, surface area, and branch diameter")
                xlabel("Results are  saved to file VolumeFraction.txt")
                xbutton("Geometrical Parameters", "GeometricalParameters()")
                xlabel("=============================================================")
                xpanel()
                
                xpanel("Diffusion-escape Gap Junction",0)
                xlabel("Diffusion-escape Gap Junction ")
                xstatebutton("Switch Gap junctions, external - switch off and internal - switch on",&SwitchOffGapJunction, "CaGapFlux(jd/(1e+6),SwitchOffGapJunction)")
                xlabel("To switch off both Gap junction, it is necessary to equate the Diffusion leak rate to zero")
                xvalue("Diffusion leak rate, jg (nA/mM)","jd", 1,"CaGapFlux(jd/(1e+6), SwitchOffGapJunction)", 0, 1  )
                //xvalue("Maximum distance between Gap Junctions, Distance (um)","Distance", 1,"CaGapFlux(jd/(1e+6), Distance)", 0, 1  )
                xpanel()
            } else {
                // !! maybe something must be available
                xpanel("Not available")
                xlabel("Not available in \"Start with Nano geometry\" mode")
                xpanel()
            }
        }
        vBoxLeftPanel.intercept(0)
        vBoxLeftPanel.map("Geometry")
        
        // Plots
        vBoxCentralPanel = new VBox()
        vBoxCentralPanel.intercept(1)
        {
            // Space plot of Voltage
            plotShapeMainV = new PlotShape(0)
            fast_flush_list.append(plotShapeMainV)
            plotShapeMainV.size(-50,50,-50,50)
            plotShapeMainV.view(-50, -50, 100, 100, 165, 169, 400.64, 400.32)
            plotShapeMainV.exec_menu("Shape Plot")
            plotShapeMainV.exec_menu("View = plot")
            plotShapeMainV.variable("v")
            graphUtils.addPlotDynamicsMenuItem(plotShapeMainV, 0, "Voltage", "v", 1)
            plotShapeMainV.show(0)
            if (isAstrocyteOrNeuron) {
                minV1 = -85
                minV2 = -85
                maxV = -80
            } else {
                minV1 = -65
                minV2 = -80
                maxV = 40
            }
            plotShapeMainV.scale(minV1, maxV)   // mV, scale of voltage on 3D plots
            plotShapeMainV.label(0.0340357, 0.94, "Voltage (mV)", 2, 1, 0, 0, 1)
            
            graphMainSomaV = new Graph()
            addplot(graphMainSomaV,0)
            graphMainSomaV.size(0, tstop, minV2, maxV)
            graphMainSomaV.addvar("soma_ref.o(0).sec.v(0.5)")
            graphMainSomaV.label(0.0340357, 0.94, "Voltage (mV)", 2, 1, 0, 0, 1)
            graphMainSomaV.label(0.45, 0.01, "Time (ms)", 2, 1, 0, 0, 1)
        }
        vBoxCentralPanel.intercept(0)
        vBoxCentralPanel.map("Plots")
        
        // Right panel of main menu
        vBoxRightPanel = new VBox()
        vBoxRightPanel.intercept(1)
        {
            xpanel("")
            xbutton("Edit biophysics", "startMechManager()")
            if (!isAstrocyteOrNeuron) {
                xbutton("Edit synapses", "startSynManager()")
            }
            xbutton("Edit extracellular sources (in development)", "startECSManager()")     // !!!
            if (isBaseOrNanoStart && !isAstrocyteOrNeuron) {
                xbutton("Insert electrode", "insertElectrode()")
            }
            xbutton("Export cell", "startExportManager()")
            xpanel()
            xpanel("Various scenarios for calculating astrocyte dynamics")
            xlabel("====================== Simulations ======================")
           //xlabel("Simulation of FRAP experiment with  round-spot bleaching")
           //xbutton("FRAP with round-spot bleaching", "SimulationSelected(1)")
            xlabel("---------------------------------------------------------------------------------------------------------")
            xlabel("Simulation of line-scan FRAP")
            xbutton("Line-scan FRAP","SimulationSelected(2)")
            xlabel("---------------------------------------------------------------------------------------------------------")
            xlabel("Simulation of  spatial distribution of voltage along dendrites") 
            xbutton("Membrane voltage distribution", "SimulationSelected(3)")
            xlabel("---------------------------------------------------------------------------------------------------------")
            xlabel("Parameters of somatic stimuli")
            xbutton("Constant electric stimuli", "SimulationSelected(4)")
            //xlabel("---------------------------------------------------------------------------------------------------------")
            //xlabel("Parameters of sinusoidal stimulations into soma")
            //xbutton("Variable electric stimuli","SimulationSelected(5)")
            xlabel("---------------------------------------------------------------------------------------------------------")
            xlabel("Parameters for microscopic calcium dynamics")
            xbutton("Microscopic calcium dynamics", "SimulationSelected(6)")
            xlabel("---------------------------------------------------------------------------------------------------------")
            xlabel("Calcium Wave simulations")
            xbutton("Calcium Wave", "SimulationSelected(7)")
            xlabel("---------------------------------------------------------------------------------------------------------")
            xlabel("Astrocyte model with Glutamate transporters")
            xbutton("Membrane biophysics with glutamate transport", "SimulationSelected(8)")
            xlabel("Astrocyte model with potassium dynamics")
            xbutton("Dynamics of intra and extracellular K+", "SimulationSelected(9)")
            xlabel("=======================================================")
            xlabel("By default active Ca2+ mechanisms are only inserted into soma and dendrites")
            xlabel("and are uninserted during 'Glutamate dynamics' to speed up computation.")
            xlabel("Active Ca2+ mechanisms can be inserted using the following parameters.")
            xlabel("Simulation should be restarted after changing any of them.")
            xstatebutton("Insert Ca active mechanism in leaves (excluding 'Glutamate dynamics')", &cadifusInElectricalLeaves, "InsertCadifusInElectricalLeaves(cadifusInElectricalLeaves)")
            xstatebutton("Insert Ca active mechanism everywhere in 'Glutamate dynamics'", &cadifusInAllGlu, "InsertCadifusInAllGlu(cadifusInAllGlu)")
            xpanel()
        }
        vBoxRightPanel.intercept(0)
        vBoxRightPanel.map("Simulations")
    }
    hBoxMainPanel.intercept(0)
    hBoxMainPanel.map("Repertoire of computation", 285, 0, -1, -1)
}

proc createReseedingDeck() {
    strdef text
    
    deckReseeding = new Deck()
    deckReseeding.intercept(1)
    {
        xpanel("")
        xlabel("=============== Where to Seed the Nanostructures ===============")
        xradiobutton("All dendrites", "isAllOrSomeDendritesSeeded = 1", isAllOrSomeDendritesSeeded == 1)
        xradiobutton("Some dendrites (I will select them)", "isAllOrSomeDendritesSeeded = 0", isAllOrSomeDendritesSeeded == 0)
        xbutton("Reseed", "seededDendritesChangedHandler()")
        xlabel("")
        if (isAstrocyteOrNeuron) {
            // !!!! dup. with initAstrocyte.hoc
            xpvalue("Max number of stalks per dendrite", &nanoBranchesManager.MaxNumberBranchesPerDendrite, 1, "addLeaves(MinDistance)")
            // !!!! commented just because it's not about "Where to Seed the Nanostructures"
            // xpvalue("Number of leaves per stalk", &NumberLeavesPerStalk, 1, "addLeaves(MinDistance)")
            
            /* !!!!
            xlabel("Initial min. distance between stalks is limit value that cannot be reduced using panel.")
            xlabel("To decrease this value, increase value - MaxNumberStalksPerDendrite")
            */
            xpvalue("Min distribution over branches", &MinDistance, 1, "addLeaves(MinDistance)")
        } else {
            // !!!! dup. with initNeuron.hoc
            xpvalue("Max number of spines per dendrite", &nanoBranchesManager.MaxNumberBranchesPerDendrite, 1, "ReseedSpines()")
            
            /* !!!!
            xlabel("Initial min. distance between spines is limit value that cannot be reduced using panel.")
            xlabel("To decrease this value, increase value - MaxNumberSpinesPerDendrite")
            */
            xpvalue("Min distribution over branches", &MinDistance, 1, "ReseedSpines()")
        }
        xpanel()
        xpanel("")
        xlabel("=============== Where to Seed the Nanostructures ===============")
        xlabel("")
        xlabel("Not available after the first interaction with any of these widgets:")
        xlabel("    * Manager of Biophysics")
        if (!isAstrocyteOrNeuron) {
            xlabel("    * Manager of Synapses")
        }
        xlabel("    * Manager of Extracellular Sources")
        xpanel()
    }
    deckReseeding.intercept(0)
    deckReseeding.flip_to(0)
    deckReseeding.map()
}

proc showRunControlPanel() {
    xpanel("RunControl", 0)
    xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
    xbutton("Init & Run","run()")
    xbutton("Stop","stoprun=1")
    xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
    xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
    xbutton("Single Step","steprun()")
    xvalue("t","t", 2 )
    xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
    xvalue("dt","dt", 1,"setdt()", 0, 1 )
    xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
    xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
    xvalue("Real Time","realtime", 0,"", 0, 1 )
    xpanel(0, 125)
}

proc insertElectrode() {
    load_file(1, "Code/Prologue/Neuron/Electrod.hoc")
    mwh.showMessageBox("IClamp was inserted into the centre of the first soma section.", "Please be advised that it will be deleted immediately once you close the \"PointProcessGroupManager\" widget.", "IClamp inserted")
}

proc startMechManager() { local isCancel
    isCancel = makeSureReseedingLocked()
    if (isCancel) {
        return
    }
    
    makeSureMechCompsCreatedOrImportedThenShowMechManagerBaseWidget()
}

proc startSynManager() { local isCancel
    isCancel = makeSureReseedingLocked()
    if (isCancel) {
        return
    }
    
    makeSureSynCompsCreatedOrImportedThenShowSynManagerBaseWidget()
}

proc startECSManager() { local isCancel
    isCancel = makeSureReseedingLocked()
    if (isCancel) {
        return
    }
    
    showExtracellularManagerBaseWidget()
}

proc startExportManager() { localobj nil
    dismissIfNotNil(manageAndRunWidget)
    
    if (exportManagerMainWidget == nil) {
        exportManagerMainWidget = new ExportManagerMainWidget()
    } else {
        exportManagerMainWidget.dismissHandler()
    }
    exportManagerMainWidget.show()
}

isReseedingLocked = 0

func makeSureReseedingLocked() { local isCancel
    if (isReseedingLocked || !isBaseOrNanoStart) {
        return 0
    }
    isCancel = !boolean_dialog("To proceed, we need to lock the ability to reseed the nanostructures. Do you want to proceed?", "Yes", "No")
    if (!isCancel) {
        deckReseeding.flip_to(1)
        isReseedingLocked = 1
    }
    return isCancel
}
