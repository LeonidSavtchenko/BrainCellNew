
{ load_file("PythonUtilsForExport.hoc") }


// !! make it localobj in exportCellToHocFile
objref allNames

// !!
proc exportCellToHocFile() {
    strdef outHocFilePathName, msg
    
    outHocFilePathName = $s1
    
    // !! maybe add smth. like "This file was generated by that program..." in the start
    
    // Get all names (base geometry, nanogeometry, extracellular sources etc.)
    // !! maybe it's not optimal because
    // (1) there is a lot of nanogeometry sections with known names (no need to use slow "forall")
    // (2) here we call an obfunc from Import module
    // (3) we already had all base geometry names at some point before
    allNames = getAllSectionNames()     // !! for nanogeometry it simply returns AstrocyteNanoBranch, but the full name is AstrocyteNanoBranch[1].LargeGlia[2]
    
    // !! think about saving only the topological tree connected to soma
    
    mwh.showPleaseWaitBox("Exporting nanogeometry file.")
    {
        callPythonExportCore(outHocFilePathName)
    }
    mwh.hidePleaseWaitBox()
    
    // !! maybe need to dump values like celsius, v_init etc., call finitialize... - ask Lesha
    
    // !! maybe add smth. like "access <soma_name>[0]" in the end
    
    // !! maybe here I need to copy nrnmech.dll from the root folder to the folder selected by user - ask Lesha
    
    // !! think about a checkbox to open just saved file in default text editor
    mwh.startIntercepting()
    {
        msg = "We don't export the changes made with Mech Manager%s."
        if (isAstrocyteOrNeuron) {
            sprint(msg, msg, "")
        } else {
            sprint(msg, msg, " and Syn Manager")
        }
        mwh.showNotImplementedWarning(msg)
        // !! also, the distance centre location is hardcoded in the exported file rather than actually exported
        mwh.showMessageBox("Export complete successfully", "Complete")
    }
    mwh.endIntercepting()
}

// Select nanogeometry HOC file (save or load)
// $s1 - "w" or "r"
// $s2 - "Save" or "Load"
// $s3 (output) - The selected file path and name (only if selected)
// Returns: 0/1 flag indicating that the file was selected
func selectNanoHocFile() { localobj file
    strdef hint, defaultDirPath
    
    file = new File()
    sprint(hint, "%s brain cell with nanogeometry", $s2)
    sprint(defaultDirPath, "%sNanogeometry/", getcwd())
    file.chooser($s1, hint, "*.hoc", $s2, "Cancel", defaultDirPath)
    if (!file.chooser()) {
        print "File wasn't selected"
        return 0
    }
    
    $s3 = file.getname
    return 1
}

// Save nanogeometry HOC file
proc saveNanoHocFile() { local isSelected
    strdef filePathName
    
    isSelected = selectNanoHocFile("w", "Save", filePathName)    // !! maybe propose default file name in style "<imported_name>_nano.hoc"
    if (!isSelected) {
        return
    }
    
    exportCellToHocFile(filePathName)
}

// Load and validate nanogeometry HOC file
// Returns: 0/1 flag indicating that the file was loaded successfully
func loadNanoHocFile() { local isSelected, status
    strdef filePathName
    
    isSelected = selectNanoHocFile("r", "Load", filePathName)
    if (!isSelected) {
        return 0
    }
    
    // !! need to add some check that user doesn't try to load a base geometry file in that way
    // !! if called from MainUi, then need to delete the old cell here (something like proc cleanupBeforeNextImport from Import module, but much more to cleanup)
    
    mwh.showPleaseWaitBox("Loading nanogeometry file.")
    {
        status = load_file(1, filePathName)
    }
    mwh.hidePleaseWaitBox()
    if (!status) {
        // !! maybe show messagebox
        return 0
    }
    
    // !! validation: make sure the next lists were created: isAstrocyteOrNeuron, soma_ref, dendrite_ref, axon_ref (for neuron only), nanoProximal_ref, nanoDistal_ref etc.
    
    return 1
}
