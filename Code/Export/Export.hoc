
// !!! Do not forget to export GLOBAL-s for membrane mechanisms and PPs

// !! BUG: the distance centre location is hardcoded in the exported file rather than actually exported

// !! Some ideas:
//    * think about saving only the topological tree connected to the first soma section
//    * maybe need to dump values like celsius, v_init etc., call finitialize...
//    * maybe add smth. like "This file was generated by that program..." in the file header


proc exportCellToHocFile() {
    strdef outHocFilePathName, line1, line2, line3, line4, line5, line6, line7, line8, line9, line10
    
    outHocFilePathName = $s1
    
    mwh.showPleaseWaitBox("Exporting nanogeometry file.")
    {
        callPythonExportCore(outHocFilePathName)
    }
    mwh.hidePleaseWaitBox()
    
    // !! think about a checkbox to open just saved file in default text editor
    mwh.startIntercepting()
    {
        line1 = "Here is what we don't export at the moment (the list is incomplete):"
        line2 = "    * GLOBAL vars of biophys mechs%s"
        line4 = "    * custom PPs/ACs%s"
        if (isAstrocyteOrNeuron) {
            sprint(line2, line2, "")
            sprint(line4, line4, "")
        } else {
            sprint(line2, line2, " and synaptic PPs/ACs")
            line3 = "    * \"Random\" synapse location"
            sprint(line4, line4, " (outside synapses)")
        }
        line5 = "    * v_init, celsius, dt"
        line6 = "    * the distance centre location"
        line7 = "    * files \"params.hoc\", \"runner.hoc\" and \"nrnmech.dll\""
        line8 = ""
        line9 = "Not implemented."
        line10 = "If required, please ask the developer to prioritize."
        if (isAstrocyteOrNeuron) {
            mwh.showWarningBox(line1, line2, line4, line5, line6, line7, line8, line9, line10)
        } else {
            mwh.showWarningBox(line1, line2, line3, line4, line5, line6, line7, line8, line9, line10)
        }
        
        mwh.showMessageBox("Export complete successfully", "Complete")
    }
    mwh.endIntercepting()
}

// Select nanogeometry HOC file (save or load)
// $s1 - "w" or "r"
// $s2 - "Save" or "Load"
// $s3 (output) - The selected file path and name (only if selected)
// Returns: 0/1 flag indicating that the file was selected
func selectNanoHocFile() { localobj file
    strdef hint, defaultDirPath
    
    file = new File()
    sprint(hint, "%s brain cell with nanogeometry", $s2)
    sprint(defaultDirPath, "%sNanogeometry/", getcwd())
    file.chooser($s1, hint, "*.hoc", $s2, "Cancel", defaultDirPath)
    if (!file.chooser()) {
        // File wasn't selected
        return 0
    }
    
    $s3 = file.getname
    return 1
}

// Save nanogeometry HOC file
func saveNanoHocFile() { local isSelected
    strdef filePathName
    
    isSelected = selectNanoHocFile("w", "Save", filePathName)    // !! maybe propose default file name in style "<imported_name>_nano.hoc"
    if (!isSelected) {
        return 1
    }
    
    exportCellToHocFile(filePathName)
    
    return 0
}

// Load and validate nanogeometry HOC file
// Returns: 0/1 flag indicating that the file was loaded successfully
func loadNanoHocFile() { local isSelected, status
    
    isSelected = selectNanoHocFile("r", "Load", loadedNanoHocFilePathName)
    if (!isSelected) {
        return 0
    }
    
    // !! need to add some check that user doesn't try to load a base geometry file in that way
    // !! if called from MainUi, then need to delete the old cell here (something like proc cleanupBeforeNextImport from Import module, but much more to cleanup)
    
    mwh.showPleaseWaitBox("Loading nanogeometry file.")
    {
        status = load_file(1, loadedNanoHocFilePathName)
    }
    mwh.hidePleaseWaitBox()
    if (!status) {
        // !! maybe show messagebox
        return 0
    }
    
    // !! validation: make sure the next lists were created: isAstrocyteOrNeuron, soma_ref, dendrite_ref, axon_ref (for neuron only), nanoProximal_ref, nanoDistal_ref etc.
    
    return 1
}
