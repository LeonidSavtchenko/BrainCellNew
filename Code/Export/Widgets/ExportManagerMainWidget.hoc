
begintemplate ExportManagerMainWidget

    public show, dismissHandler
    
    external mwh, compUtils, inhomAndStochLibrary
    external saveNanoHocFile, createEmptyPanel, unmapIfNotNil
    external isAstrocyteOrNeuron
    
    objref mainBox, deck1, deck2, deck3, deck4, deck5
    objref clovWidgets[1]
    
    isExportDistMechs = -1
    isExportDistMechInhoms = -1
    isExportDistMechStochs = -1
    isExportSyns = -1
    isExportSynInhoms = -1
    isExportSynStochs = -1
    isCreateParamsHoc = -1
    isExposeModelVars = -1
    isCreateRunnerHoc = -1
    isRecordAndSaveModelVars = -1
    isRecordAndSaveWithAPCounts = -1
    isMakeSweepForModelVars = -1
    isCopyDll = -1
    isNewOrExistingDll = -1
    
    numClovWidgets = -1
    
    
    proc init() {
        isExportDistMechs = 1
        isExportDistMechInhoms = 1
        isExportDistMechStochs = 1
        isExportSyns = 1
        isExportSynInhoms = 1
        isExportSynStochs = 1
        isCreateParamsHoc = 0
        isExposeModelVars = 0
        isCreateRunnerHoc = 0
        isRecordAndSaveModelVars = 0
        isRecordAndSaveWithAPCounts = 0
        isMakeSweepForModelVars = 0
        isCopyDll = 0
        isNewOrExistingDll = 0
        
        numClovWidgets = 3
        
        objref clovWidgets[numClovWidgets]
        clovWidgets[0] = new CreateListOfInputVarsWidget(0)
        clovWidgets[1] = new CreateListOfOutputVarsWidget()
        clovWidgets[2] = new CreateListOfInputVarsWidget(1)
    }
    
    proc show() { local numInhomVars, numStochVars localobj hBox1, hBox2, hBox3, hBox4, hBox5, list
        strdef text
        
        compUtils.makeSureAllCompsCreated()     // Needed for AddOneInputVarWidget
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("The minimum exported data include all topology and geometry (with nanogeometry).")
            xlabel("Please choose what other data must be exported:")
            xpanel()
            hBox1 = new HBox()
            hBox1.intercept(1)
            {
                xpanel("")
                xcheckbox("All biophysics", &isExportDistMechs, "distMechsCheckBoxHandler()")
                xpanel()
                numInhomVars = inhomAndStochLibrary.getNumInhomVarsForDistMechs()
                numStochVars = inhomAndStochLibrary.getNumStochVarsForDistMechs()
                deck1 = createInhomStochDeck(numInhomVars, numStochVars, &isExportDistMechInhoms, &isExportDistMechStochs, isExportDistMechs)
            }
            hBox1.intercept(0)
            hBox1.map()
            if (!isAstrocyteOrNeuron) {
                hBox2 = new HBox()
                hBox2.intercept(1)
                {
                    xpanel("")
                    xcheckbox("All synapses", &isExportSyns, "synsCheckBoxHandler()")
                    xpanel()
                    numInhomVars = inhomAndStochLibrary.getNumInhomVarsForSyns()
                    numStochVars = inhomAndStochLibrary.getNumStochVarsForSyns()
                    deck2 = createInhomStochDeck(numInhomVars, numStochVars, &isExportSynInhoms, &isExportSynStochs, isExportSyns)
                }
                hBox2.intercept(0)
                hBox2.map()
            }
            xpanel("")
            xlabel("")
            xlabel("Please choose what other files must be created or copied:")
            xpanel()
            hBox3 = new HBox()
            hBox3.intercept(1)
            {
                xpanel("")
                xcheckbox("Create \"params.hoc\"", &isCreateParamsHoc, "createParamsHocCheckBoxHandler()")
                xpanel()
                deck3 = new Deck()
                deck3.intercept(1)
                {
                    createEmptyPanel()
                    xpanel("")
                    xlabel("By default, the file will contain the following general settings:")
                    xlabel("    ENABLE_GRAPHICAL_INTERFACE, SHOW_TOPOLOGY, ENABLE_AUTORUN, ENABLE_AUTOEXIT")
                    xlabel("and general simulation params:")
                    xlabel("    DT, TSTART, TSTOP")
                    xcheckbox("Expose some vars (I will select them)", &isExposeModelVars, "varsSelectorCheckBoxHandler(0, isExposeModelVars)")
                    xpanel()
                }
                deck3.intercept(0)
                deck3.flip_to(isCreateParamsHoc)
                deck3.map()
            }
            hBox3.intercept(0)
            hBox3.map()
            hBox4 = new HBox()
            hBox4.intercept(1)
            {
                xpanel("")
                xcheckbox("Create \"runner.hoc\"", &isCreateRunnerHoc, "createRunnerHocCheckBoxHandler()")
                xpanel()
                deck4 = new Deck()
                deck4.intercept(1)
                {
                    createEmptyPanel()
                    xpanel("")
                    xcheckbox("Record and save some vars (I will select them)", &isRecordAndSaveModelVars, "varsSelectorCheckBoxHandler(1, isRecordAndSaveModelVars)")
                    list = new List("APCount")
                    sprint(text, "Record and save the times with all existing APCount-s (%d detected)", list.count())
                    xcheckbox(text, &isRecordAndSaveWithAPCounts, "recordAndSaveWithAPCountsCheckBoxHandler()")
                    xcheckbox("Make a sweep for some vars (I will select them and define the grids)", &isMakeSweepForModelVars, "varsSelectorCheckBoxHandler(2, isMakeSweepForModelVars)")
                    xpanel()
                }
                deck4.intercept(0)
                deck4.flip_to(isCreateRunnerHoc)
                deck4.map()
            }
            hBox4.intercept(0)
            hBox4.map()
            hBox5 = new HBox()
            hBox5.intercept(1)
            {
                xpanel("")
                xcheckbox("Copy \"nrnmech.dll\"", &isCopyDll, "copyDllCheckBoxHandler()")
                xpanel()
                deck5 = new Deck()
                deck5.intercept(1)
                {
                    createEmptyPanel()
                    xpanel("")
                    xradiobutton("Copy the existing DLL (it may contain some unused mechs)", "copyDllRadioButtonHandler(0)", isNewOrExistingDll == 0)
                    xradiobutton("Build and copy a new DLL (it will contain only used mechs)", "copyDllRadioButtonHandler(1)", isNewOrExistingDll == 1)
                    xpanel()
                }
                deck5.intercept(0)
                deck5.flip_to(isCopyDll)
                deck5.map()
            }
            hBox5.intercept(0)
            hBox5.map()
            xpanel("")
            xlabel("")
            xbutton("Export", "exportHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Manager of export", 60, 100, -1, -1)
    }
    
    proc dismissHandler() {
        dismissChilds()
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    obfunc createInhomStochDeck() { local numInhomVars, numStochVars, cardIdx localobj deck
        strdef text
        
        numInhomVars = $1
        numStochVars = $2
        cardIdx = $5
        
        deck = new Deck()
        deck.intercept(1)
        {
            createEmptyPanel()
            xpanel("")
            sprint(text, "With inhom vars (%d detected)", numInhomVars)
            xcheckbox(text, &$&3)
            sprint(text, "With stoch vars (%d detected)", numStochVars)
            xcheckbox(text, &$&4)
            xpanel()
        }
        deck.intercept(0)
        deck.flip_to(cardIdx)
        deck.map()
        
        return deck
    }
    
    proc distMechsCheckBoxHandler() {
        deck1.flip_to(isExportDistMechs)
    }
    
    proc synsCheckBoxHandler() {
        deck2.flip_to(isExportSyns)
    }
    
    proc createParamsHocCheckBoxHandler() {
        deck3.flip_to(isCreateParamsHoc)
    }
    
    proc varsSelectorCheckBoxHandler() { local clovWidIdx, isChecked
        clovWidIdx = $1
        isChecked = $2
        dismissChilds()
        if (isChecked) {
            clovWidgets[clovWidIdx].show()
        }
    }
    
    proc createRunnerHocCheckBoxHandler() {
        deck4.flip_to(isCreateRunnerHoc)
    }
    
    proc recordAndSaveWithAPCountsCheckBoxHandler() {
        strdef line1, line2, line3
        if (!isRecordAndSaveWithAPCounts) {
            return
        }
        line1 = "You can use the next standard widgets to add new or edit existing APCount-s:"
        line2 = "* Tools -> Point Processes -> Managers -> Point Manager"
        line3 = "* Tools -> Point Processes -> Managers -> Point Group"
        mwh.showMessageBox(line1, line2, line3, "APCount-s")
    }
    
    proc copyDllCheckBoxHandler() {
        deck5.flip_to(isCopyDll)
    }
    
    proc copyDllRadioButtonHandler() {
        isNewOrExistingDll = $1
    }
    
    proc exportHandler() { local isCancel
        /* !!
        if (isExportDistMechs || isExportSyns || isCreateParamsHoc || isCreateRunnerHoc || isCopyDll) {
            mwh.showNotImplementedWarning()
            return
        }
        */
        
        isCancel = saveNanoHocFile()
        if (isCancel) {
            return
        }
        
        dismissHandler()
    }
    
    proc dismissChilds() { local clovWidIdx
        for clovWidIdx = 0, numClovWidgets - 1 {
            clovWidgets[clovWidIdx].dismissHandler()
        }
    }
    
endtemplate ExportManagerMainWidget

objref exportManagerMainWidget
exportManagerMainWidget = new ExportManagerMainWidget()
