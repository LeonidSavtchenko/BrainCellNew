
// Keeping on the top level to have access to "v_init" etc.
_tempValue = -1

begintemplate ExposedOrSweptInputVar
    
    public enumSpDmCeSt, compIdx, mechIdx, varType, varName, varNameWithIndex, customExpr
    public gridInfoOrNil
    public s, sg
    public prepareShownStrings, getValue, getUnitsCommentOrEmpty, isEqual, isReleaseProbability
    
    external mth, mcu, compUtils
    external getWatchedVarUnits, stringEmpty, stringsEqual, codeContractViolation
    external _tempValue
    
    isExposedOrSwept = -1
    
    enumSpDmCeSt = -1   // 0: "Synapse part", 1: "Distributed mechanism", 2: "Custom expression", 3: "Standard NEURON var (exposed only)"
    compIdx = -1
    mechIdx = -1
    varType = -1
    strdef varName, varNameWithIndex
    arraySize = -1
    arrayIndex = -1
    strdef customExpr
    
    objref gridInfoOrNil
    
    strdef s, sg
    
    isInteger = -1
    
    
    proc init() { local numArg
        numArg = numarg()
        
        isInteger = 0
        
        if (numArg == 2) {
            isExposedOrSwept = $1
            customExpr = $s2
            enumSpDmCeSt = 2
        } else if (numArg == 3 || numArg == 4) {
            isExposedOrSwept = $1
            enumSpDmCeSt = $2
            customExpr = $s3
            if (numArg == 4) {
                isInteger = $4
            }
            if (!isExposedOrSwept) {
                codeContractViolation()
            }
            if (enumSpDmCeSt != 3) {
                codeContractViolation()
            }
        } else if (numArg == 8) {
            isExposedOrSwept = $1
            enumSpDmCeSt = $2
            compIdx = $3
            mechIdx = $4
            varType = $5
            varName = $s6
            arraySize = $7
            arrayIndex = $8
            mth.getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
        } else {
            codeContractViolation()
        }
        
        prepareShownStrings()
    }
    
    proc prepareShownStrings() { local isDmOrSynPart, enumDmPpNc localobj comp, nil
        strdef compTypeName, compName, varTypeName, mechName
        
        if (enumSpDmCeSt == 0) {
            compTypeName = "Syn"
        } else if (enumSpDmCeSt == 1) {
            compTypeName = "Bio"
        } else if (enumSpDmCeSt == 2) {
            compTypeName = "Cust"   // Keep in sync with enterVarExpression
        } else if (enumSpDmCeSt == 3) {
            compTypeName = "Std"
        } else {
            codeContractViolation()
        }
        
        if (enumSpDmCeSt < 2) {
            isDmOrSynPart = enumSpDmCeSt
            comp = compUtils.getComp(isDmOrSynPart, compIdx)
            compName = comp.name
            mth.getVarTypeName(varType, varTypeName)
            enumDmPpNc = comp.enumDmPpNc
            if (enumDmPpNc != 2) {
                mth.getMechName(enumDmPpNc, mechIdx, mechName)
                if (varType != -1) {    // -1: GLOBAL
                    sprint(s, "%s: %s \\ %s \\ %s \\ %s", compTypeName, compName, mechName, varTypeName, varNameWithIndex)
                } else {
                    sprint(s, "%s: @All \\ %s \\ %s \\ %s", compTypeName, mechName, varTypeName, varNameWithIndex)
                }
            } else {
                sprint(s, "%s: %s \\ %s \\ %s", compTypeName, compName, varTypeName, varNameWithIndex)
            }
        } else {
            sprint(s, "%s: %s", compTypeName, customExpr)   // Keep in sync with enterVarExpression
        }
        
        if (isExposedOrSwept) {
            return
        }
        
        if (gridInfoOrNil == nil) {
            sprint(sg, "%s (1 value)", s)
        } else {
            sprint(sg, "%s (%d values)", s, gridInfoOrNil.numPts)
        }
    }
    
    func getValue() { local isDmOrSynPart, varTypeIdx localobj comp
        if (enumSpDmCeSt < 2) {
            if (varType != -1) {    // PARAMETER, ASSIGNED, STATE
                isDmOrSynPart = enumSpDmCeSt
                comp = compUtils.getComp(isDmOrSynPart, compIdx)
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                return comp.mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex)
            } else {                // GLOBAL
                return getGlobalOrCustomValue(varNameWithIndex)
            }
        } else {
            return getGlobalOrCustomValue(customExpr)
        }
    }
    
    proc getUnitsCommentOrEmpty() { local numArg, isDmOrSynPart, enumDmPpNc
        strdef unitsOrEmpty
        
        numArg = numarg()
        if (numArg == 0 || numArg > 2) {
            codeContractViolation()
        }
        
        // !! is that needed?
        unitsOrEmpty = ""
        
        if (enumSpDmCeSt < 2) {
            isDmOrSynPart = enumSpDmCeSt
            enumDmPpNc = compUtils.getComp(isDmOrSynPart, compIdx).enumDmPpNc
            mth.getVarUnits(enumDmPpNc, mechIdx, varName, varNameWithIndex, unitsOrEmpty)
        } else {
            getWatchedVarUnits(customExpr, unitsOrEmpty)
        }
        if (!stringEmpty(unitsOrEmpty)) {
            sprint($s1, " (%s)", unitsOrEmpty)
        } else {
            $s1 = ""
        }
        
        if (numArg == 2) {
            $s2 = unitsOrEmpty
        }
    }
    
    func isEqual() { local isDmOrSynPart, enumDmPpNc, res localobj comp
        if (enumSpDmCeSt == 2) {
            return 0
        } else if (enumSpDmCeSt == 3) {
            codeContractViolation()
        }
        isDmOrSynPart = enumSpDmCeSt
        comp = compUtils.getComp(isDmOrSynPart, compIdx)
        enumDmPpNc = comp.enumDmPpNc
        res = (enumDmPpNc == $1 && mechIdx == $3 && varType == $4 && stringsEqual(varName, $s5) && arrayIndex == $6)
        if (varType != -1) {    // -1: GLOBAL
            res = res && (compIdx == $2)
        }
        return res
    }
    
    func isReleaseProbability() { local enumDmPpNc localobj comp
        if (enumSpDmCeSt != 0) {
            return 0
        }
        comp = compUtils.getComp(0, compIdx)
        enumDmPpNc = comp.enumDmPpNc
        return (enumDmPpNc == 2 && mcu.isMetaVar(varName))
    }
    
    // All next staff is private
    
    
    func getGlobalOrCustomValue() {
        strdef hocCommand
        sprint(hocCommand, "_tempValue = %s", $s1)
        execute(hocCommand)     // Do not replace with "execute(*, this)" not to lose access to "v_init" etc.
        return _tempValue
    }
    
endtemplate ExposedOrSweptInputVar
