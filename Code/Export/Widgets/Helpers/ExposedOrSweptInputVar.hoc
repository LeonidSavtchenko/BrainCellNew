
// Keeping on the top level to have access to "v_init" etc.
_tempValue = -1

begintemplate ExposedOrSweptInputVar
    
    public enumSpDmCeSt, compIdx, mechIdx, varType, varName, varNameWithIndex, customExpr
    public gridInfoOrNil
    public s
    public getValue, isEqual, isReleaseProbability
    
    external mth, mcu, compUtils
    external stringsEqual, codeContractViolation
    external _tempValue
    
    enumSpDmCeSt = -1   // 0: "Synapse part", 1: "Distributed mechanism", 2: "Custom expression", 3: "Standard NEURON var"
    compIdx = -1
    mechIdx = -1
    varType = -1
    strdef varName, varNameWithIndex
    arraySize = -1
    arrayIndex = -1
    strdef customExpr
    
    objref gridInfoOrNil
    
    strdef s
    
    
    proc init() { local numArg
        numArg = numarg()
        
        if (numArg == 1) {
            enumSpDmCeSt = 2
            customExpr = $s1
        } else if (numArg == 2) {
            enumSpDmCeSt = $1
            customExpr = $s2
            if (enumSpDmCeSt != 3) {
                codeContractViolation()
            }
        } else if (numArg == 7) {
            enumSpDmCeSt = $1
            compIdx = $2
            mechIdx = $3
            varType = $4
            varName = $s5
            arraySize = $6
            arrayIndex = $7
            mth.getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
        } else {
            codeContractViolation()
        }
        
        prepareShownString()
    }
    
    func getValue() { local isDmOrSynPart, varTypeIdx localobj comp
        if (enumSpDmCeSt < 2) {
            if (varType != -1) {    // PARAMETER, ASSIGNED, STATE
                isDmOrSynPart = enumSpDmCeSt
                comp = compUtils.getComp(isDmOrSynPart, compIdx)
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                return comp.mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex)
            } else {                // GLOBAL
                return getGlobalOrCustomValue(varNameWithIndex)
            }
        } else {
            return getGlobalOrCustomValue(customExpr)
        }
    }
    
    func isEqual() { local isDmOrSynPart, enumDmPpNc localobj comp
        if (enumSpDmCeSt == 2) {
            return 0
        } else if (enumSpDmCeSt == 3) {
            codeContractViolation()
        }
        isDmOrSynPart = enumSpDmCeSt
        comp = compUtils.getComp(isDmOrSynPart, compIdx)
        enumDmPpNc = comp.enumDmPpNc
        return (enumDmPpNc == $1 && compIdx == $2 && mechIdx == $3 && varType == $4 && stringsEqual(varName, $s5) && arrayIndex == $6)
    }
    
    func isReleaseProbability() { local enumDmPpNc localobj comp
        if (enumSpDmCeSt != 0) {
            return 0
        }
        comp = compUtils.getComp(0, compIdx)
        enumDmPpNc = comp.enumDmPpNc
        return (enumDmPpNc == 2 && mcu.isMetaVar(varName))
    }
    
    // All next staff is private
    
    
    proc prepareShownString() { local isDmOrSynPart, enumDmPpNc localobj comp
        strdef compTypeName, compName, varTypeName, mechName
        
        if (enumSpDmCeSt == 0) {
            compTypeName = "Syn"
        } else if (enumSpDmCeSt == 1) {
            compTypeName = "Bio"
        } else if (enumSpDmCeSt == 2) {
            compTypeName = "Cust"   // Keep in sync with enterVarExpression
        } else if (enumSpDmCeSt == 3) {
            compTypeName = "Std"
        } else {
            codeContractViolation()
        }
        
        if (enumSpDmCeSt < 2) {
            isDmOrSynPart = enumSpDmCeSt
            comp = compUtils.getComp(isDmOrSynPart, compIdx)
            compName = comp.name
            mth.getVarTypeName(varType, varTypeName)
            enumDmPpNc = comp.enumDmPpNc
            if (enumDmPpNc != 2) {
                mth.getMechName(enumDmPpNc, mechIdx, mechName)
                sprint(s, "%s: %s \\ %s \\ %s \\ %s", compTypeName, compName, mechName, varTypeName, varNameWithIndex)
            } else {
                sprint(s, "%s: %s \\ %s \\ %s", compTypeName, compName, varTypeName, varNameWithIndex)
            }
        } else {
            sprint(s, "%s: %s", compTypeName, customExpr)   // Keep in sync with enterVarExpression
        }
    }
    
    func getGlobalOrCustomValue() {
        strdef hocCommand
        sprint(hocCommand, "_tempValue = %s", $s1)
        execute(hocCommand)     // Do not replace with "execute(*, this)" not to lose access to "v_init" etc.
        return _tempValue
    }
    
endtemplate ExposedOrSweptInputVar
