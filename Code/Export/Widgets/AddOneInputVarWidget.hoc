
begintemplate AddOneInputVarWidget

    public show, dismissHandler
    
    external mwh, mth, compUtils
    external synGroup
    external createEmptyPanel, createMetaVarHint, unmapIfNotNil
    external enumSynCompIdxs
    
    objref mainBox, deck
    objref parentWidget
    objref compList, mechList, varTypeList, varNameWithIndexList
    
    isDmOrSynPart = -1
    
    selCompIdx = -1
    selMechIdx = -1
    selVarType = -1
    selVarNameWithIndexIdx = -1
    
    enumHomInhomStoch = -1
    
    
    proc init() { local aoivWidIdx
        aoivWidIdx = $1
        parentWidget = $o2
        
        isDmOrSynPart = 1 - aoivWidIdx
        
        compList = new List()
        mechList = new List()
        varTypeList = new List()
        varNameWithIndexList = new List()
        
        selCompIdx = -2
        selMechIdx = -1
        selVarType = -2
        selVarNameWithIndexIdx = -1
        
        enumHomInhomStoch = 0
    }
    
    proc show() { localobj hBox
        strdef compText, mechText
        
        populateCompList()
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("Show only:")
            xradiobutton("Homogen vars", "whatToShowChangedHandler(0)", enumHomInhomStoch == 0)
            xradiobutton("Inhom models", "whatToShowChangedHandler(1)", enumHomInhomStoch == 1)
            xradiobutton("Stoch models", "whatToShowChangedHandler(2)", enumHomInhomStoch == 2)
            xpanel()
            hBox = new HBox()
            hBox.intercept(1)
            {
                if (isDmOrSynPart) {
                    compText = "Compartment"
                    mechText = "Mechanism"
                } else {
                    compText = "Synapse part"
                    mechText = "PP or NetCon"
                }
                showOneList(compText, compList, "compSelectHandler")
                showOneList(mechText, mechList, "mechSelectHandler")
                showOneList("Variable type", varTypeList, "varTypeSelectHandler")
                showOneList("Variable", varNameWithIndexList, "varNameWithIndexSelectHandler")
            }
            hBox.intercept(0)
            hBox.map()
            deck = new Deck()
            deck.intercept(1)
            {
                createEmptyPanel()
                xpanel("")
                xlabel("* Only inter-comp-homogen non-stoch vars are shown.")
                xpanel()
                xpanel("")
                createMetaVarHint()
                xpanel()
            }
            deck.intercept(0)
            deck.map()
            // deck.flip_to(*)      // Will be done below in compSelectHandler
            xpanel("")
            xbutton("Select", "selectHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("One variable", 160, 200, -1, -1)
        
        compSelectHandler(0)
    }
    
    proc dismissHandler() {
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    proc populateCompList() { local numComps, compIdx localobj comp
    
        compList.remove_all()
        
        if (isDmOrSynPart) {
            numComps = compUtils.getNumDistMechComps()
            for compIdx = 0, numComps - 1 {
                comp = compUtils.getComp(1, compIdx)
                compList.append(new ItemOfFilteredBrowsedList(compIdx, comp.name))
            }
            compList.append(new ItemOfFilteredBrowsedList(-1, "All"))
        } else {
            if (synGroup.is3Or1PartInSynStruc()) {
                addOneSynCompToList(enumSynCompIdxs.srcPp)
                addOneSynCompToList(enumSynCompIdxs.netCon)
                addOneSynCompToList(enumSynCompIdxs.trgPp)
            } else {
                addOneSynCompToList(enumSynCompIdxs.sngPp)
            }
        }
    }
    
    proc addOneSynCompToList() { local synCompIdx localobj comp
        synCompIdx = $1
        comp = compUtils.getComp(isDmOrSynPart, synCompIdx)
        compList.append(new ItemOfFilteredBrowsedList(synCompIdx, comp.name))
    }
    
    proc showOneList() { localobj list, vBox
        strdef header, command
        
        header = $s1
        list = $o2
        command = $s3
        
        vBox = new VBox()
        vBox.intercept(1)
        {
            xpanel("")
            sprint(header, "%s:", header)
            xlabel(header)
            xpanel()
            sprint(command, "%s(hoc_ac_)", command)
            list.browser("", "s")
            list.select_action(command)
            list.select(0)
        }
        vBox.intercept(0)
        vBox.map()
    }
    
    proc whatToShowChangedHandler() {
        enumHomInhomStoch = $1
        if (enumHomInhomStoch != 0) {
            mwh.showNotImplementedWarning()
        }
    }
    
    proc compSelectHandler() { local compListIdx, isAll, enumDmPpNc, numMechs, mechIdx, mechListIdx localobj comp
        strdef mechName
        
        compListIdx = $1
        
        mechList.remove_all()
        
        if (compListIdx == -1) {
            // We are called on compList.remove_all() when user opens this widget again
            selCompIdx = -2
            mechSelectHandler(-1)
            return
        }
        
        selCompIdx = compList.o(compListIdx).idx
        
        isAll = (selCompIdx == -1)
        deck.flip_to(isAll)
        if (isAll) {
            mwh.showNotImplementedWarning()
            varTypeList.remove_all()
            varNameWithIndexList.remove_all()
            selMechIdx = -1
            selVarType = -2
            selVarNameWithIndexIdx = -1
            return
        }
        
        comp = compUtils.getComp(isDmOrSynPart, selCompIdx)
        
        if (isDmOrSynPart) {
            enumDmPpNc = 0
            
            numMechs = mth.getNumMechs(enumDmPpNc)
            for mechIdx = 0, numMechs - 1 {
                if (!comp.isMechInserted[mechIdx]) {
                    continue
                }
                mth.getMechName(enumDmPpNc, mechIdx, mechName)
                mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
            }
            
            if (numMechs != 0) {
                mechListIdx = 0
                mechList.select(mechListIdx)
                selMechIdx = mechList.o(mechListIdx).idx
            } else {
                mechListIdx = -1
                selMechIdx = -1
            }
        } else {
            if (selCompIdx == enumSynCompIdxs.netCon) {
                mechIdx = 0
                comp.mechStds[mechIdx][0].name(mechName)
                deck.flip_to(2)
            } else {
                synGroup.getPpNameOrEmpty(comp.enumPpRole, mechName)
                mechIdx = mth.getMechIdx(1, mechName)
            }
            mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
            
            mechListIdx = 0
            selMechIdx = mechIdx
        }
        
        mechSelectHandler(mechListIdx)
    }
    
    proc mechSelectHandler() { local mechListIdx, enumDmPpNc, varTypeIdx, numVarTypes, varTypeListIdx localobj comp
        mechListIdx = $1
        
        varTypeList.remove_all()
        
        if (mechListIdx == -1) {
            selMechIdx = -1
            varTypeSelectHandler(-1)
            return
        }
        
        selMechIdx = mechList.o(mechListIdx).idx
        
        comp = compUtils.getComp(isDmOrSynPart, selCompIdx)
        enumDmPpNc = comp.enumDmPpNc
        
        varTypeIdx = -1     // GLOBAL
        if (mth.doesMechHaveGlobalVars(enumDmPpNc, selMechIdx)) {
            addItemToVarTypeList(varTypeIdx)
        }
        varTypeIdx = 1      // PARAMETER
        if (mth.getNumMechVars(enumDmPpNc, selMechIdx, varTypeIdx) != 0) {
            addItemToVarTypeList(varTypeIdx)
        }
        
        numVarTypes = varTypeList.count()
        if (numVarTypes != 0) {
            varTypeListIdx = 0
            varTypeList.select(varTypeListIdx)
            selVarType = varTypeList.o(varTypeListIdx).idx
        } else {
            varTypeListIdx = -1
            selVarType = -2
        }
        varTypeSelectHandler(varTypeListIdx)
    }
    
    proc varTypeSelectHandler() { local varTypeListIdx, enumDmPpNc, numVars, varIdx, arraySize, arrayIndex localobj comp
        strdef varName, varNameWithIndex
        
        varTypeListIdx = $1
        
        varNameWithIndexList.remove_all()
        
        if (varTypeListIdx == -1) {
            selVarType = -2
            return
        }
        
        selVarType = varTypeList.o(varTypeListIdx).idx
        
        comp = compUtils.getComp(isDmOrSynPart, selCompIdx)
        enumDmPpNc = comp.enumDmPpNc
        
        numVars = mth.getNumMechVars(enumDmPpNc, selMechIdx, selVarType)
        for varIdx = 0, numVars - 1 {
            arraySize = mth.getVarNameAndArraySize(enumDmPpNc, selMechIdx, selVarType, varIdx, varName)
            for arrayIndex = 0, arraySize - 1 {
                mth.getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
                varNameWithIndexList.append(new String(varNameWithIndex))
            }
        }
        
        if (numVars != 0) {
            selVarNameWithIndexIdx = 0
            varNameWithIndexList.select(selVarNameWithIndexIdx)
        } else {
            selVarNameWithIndexIdx = -1
        }
        varNameWithIndexSelectHandler(selVarNameWithIndexIdx)
    }
    
    proc varNameWithIndexSelectHandler() {
        selVarNameWithIndexIdx = $1
    }
    
    proc selectHandler() {
        strdef varNameWithIndex
        varNameWithIndex = varNameWithIndexList.o(selVarNameWithIndexIdx).s
        parentWidget.onOneVarSelectHandler(isDmOrSynPart, selCompIdx, selMechIdx, selVarType, varNameWithIndex)
        dismissHandler()
    }
    
    proc addItemToVarTypeList() { local varType
        strdef varTypeName
        varType = $1
        mth.getVarTypeName(varType, varTypeName)
        varTypeList.append(new ItemOfFilteredBrowsedList(varType, varTypeName))
    }
    
endtemplate AddOneInputVarWidget
