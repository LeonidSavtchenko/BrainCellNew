
// !! some code dupl. with ExtracellularManagerMainWidget
begintemplate CreateListOfInputVarsWidget

    public show, onVarAddHandler, onVarCorrectHandler, onDefineVarGridOkHandler, dismissHandler
    
    external exportOptions
    external enterVarExpression, isVarExprUnique, replaceItemInBrowsedListThenSelect, deleteSelectedItemFromBrowsedList, openDeck, closeDeck, unmapIfNotNil, codeContractViolation
    external isAstrocyteOrNeuron
    
    objref mainBox, exprsList
    objref aoivWidgets[1], dg4ivWidget
    objref this
    
    isExposedOrSwept = -1
    
    numAoivWidgets = -1
    
    firstColWidth = -1
    secondColWidth = -1
    slotHeight = -1
    
    
    proc init() { local aoivWidIdx
        isExposedOrSwept = $1
        
        numAoivWidgets = 2
        
        objref aoivWidgets[numAoivWidgets]
        for aoivWidIdx = 0, numAoivWidgets - 1 {
            aoivWidgets[aoivWidIdx] = new AddOneInputVarWidget(isExposedOrSwept, aoivWidIdx, this)
        }
        
        dg4ivWidget = new DefineGridForInputVarWidget(this)
        
        // The width was chosen to fit "Spine Neck" -> frapiono0_frapion_ion[ (99 values)]
        if (isExposedOrSwept) {
            exprsList = exportOptions.exposedVarsList
            firstColWidth = 325
        } else {
            exprsList = exportOptions.sweptVarsList
            firstColWidth = 375
        }
        
        secondColWidth = 105
        slotHeight = 190
    }
    
    proc show() { localobj hBox, deck
        strdef label, title, field
        
        if (isExposedOrSwept) {
            label = "Vars to expose in the params file:"
            title = "Exposed variables"
            field = "s"
        } else {
            label = "Vars to sweep:"
            title = "Swept variables"
            field = "sg"
        }
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel(label)
            xpanel()
            hBox = new HBox()
            hBox.intercept(1)
            {
                // It turns out, the usage of two Deck-s with just 1 card below
                // gives a nicer UI compared to other options (VBox, HBox or no-box)
                deck = openDeck()
                {
                    exprsList.browser("", field)
                    if (exprsList.count() != 0) {
                        exprsList.select(0)
                    }
                    exprsList.accept_action("correctVarHandler()")  // Double click
                }
                closeDeck(deck, 0, firstColWidth, slotHeight)
                deck = openDeck()
                {
                    xpanel("")
                    xbutton("Add biophys var", "addBiophysVarHandler()")
                    if (!isAstrocyteOrNeuron) {
                        xbutton("Add synapse var", "addSynVarHandler()")
                    }
                    xbutton("Add custom var", "addCustomVarHandler()")
                    xlabel("")
                    xbutton("Correct var", "correctVarHandler()")
                    xbutton("Delete var", "deleteVarHandler()")
                    
                    if (!isExposedOrSwept) {
                        xlabel("")
                        xbutton("Define var grid", "defineVarGridHandler()")
                    }
                    xpanel()
                }
                closeDeck(deck, 0, secondColWidth, slotHeight)
            }
            hBox.intercept(0)
            hBox.map()
            xpanel("")
            xbutton("OK", "okHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map(title, 110, 150, -1, -1)
    }
    
    func onVarAddHandler() { local numVars localobj newItem
        newItem = $o1
        
        if (!isVarExprUnique(newItem.s, exprsList)) {
            return 0
        }
        
        exprsList.append(newItem)
        numVars = exprsList.count()
        exprsList.select(numVars - 1)
        
        return 1
    }
    
    func onVarCorrectHandler() { local varIdx localobj newItem
        newItem = $o1
        varIdx = $2
        
        if (!isVarExprUnique(newItem.s, exprsList)) {
            return 0
        }
        
        replaceItemInBrowsedListThenSelect(exprsList, newItem, varIdx)
        
        return 1
    }
    
    proc onDefineVarGridOkHandler() { local varIdx localobj gridInfo, thisItem
        gridInfo = $o1
        varIdx = $2
        
        thisItem = exprsList.o(varIdx)
        thisItem.gridInfoOrNil = gridInfo
        thisItem.prepareShownStrings()
        
        // Without this, the old string will be shown in UI until user closes the widget and opens it again
        replaceItemInBrowsedListThenSelect(exprsList, thisItem, varIdx)
    }
    
    proc dismissHandler() {
        dismissChilds()
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    proc addBiophysVarHandler() {
        dismissChilds()
        aoivWidgets[0].show()   // --> onVarAddHandler
    }
    
    proc addSynVarHandler() {
        dismissChilds()
        aoivWidgets[1].show()   // --> onVarAddHandler
    }
    
    proc correctBiophysOrSynVar() { local aoivWidIdx, selVarIdx localobj listItem
        aoivWidIdx = $1
        listItem = $o2
        selVarIdx = $3
        dismissChilds()
        aoivWidgets[aoivWidIdx].show(listItem, selVarIdx)   // --> onVarCorrectHandler
    }
    
    proc addCustomVarHandler() { local isOK, numVars
        strdef expr
        
        dismissChilds()
        
        expr = ""
        isOK = enterVarExpression(expr, exprsList)
        if (!isOK) {
            return
        }
        
        exprsList.append(new ExposedOrSweptInputVar(isExposedOrSwept, expr))
        
        numVars = exprsList.count()
        exprsList.select(numVars - 1)
    }
    
    proc correctVarHandler() { local selVarIdx, enumSpDmCeSt, isOK localobj oldItem, newItem
        strdef expr
        
        dismissChilds()
        
        selVarIdx = exprsList.selected()
        if (selVarIdx == -1) {
            // The list is empty
            return
        }
        
        oldItem = exprsList.o(selVarIdx)
        enumSpDmCeSt = oldItem.enumSpDmCeSt
        if (enumSpDmCeSt == 0) {
            correctBiophysOrSynVar(1, oldItem, selVarIdx)
        } else if (enumSpDmCeSt == 1) {
            correctBiophysOrSynVar(0, oldItem, selVarIdx)
        } else if (enumSpDmCeSt == 2) {
            expr = oldItem.customExpr
            isOK = enterVarExpression(expr, exprsList)
            if (!isOK) {
                return
            }
            newItem = new ExposedOrSweptInputVar(isExposedOrSwept, expr)
            onVarCorrectHandler(newItem, selVarIdx)
        } else {
            codeContractViolation()
        }
    }
    
    proc deleteVarHandler() {
        dismissChilds()
        deleteSelectedItemFromBrowsedList(exprsList)
    }
    
    proc defineVarGridHandler() { local selVarIdx localobj gridInfoOrNil, sweptVar
        dismissChilds()
        
        selVarIdx = exprsList.selected()
        if (selVarIdx == -1) {
            // The list is empty
            return
        }
        
        gridInfoOrNil = exprsList.o(selVarIdx).gridInfoOrNil
        sweptVar = exprsList.o(selVarIdx)
        dg4ivWidget.show(gridInfoOrNil, selVarIdx, sweptVar)    // --> onDefineVarGridOkHandler
    }
    
    proc okHandler() {
        dismissHandler()
    }
    
    proc dismissChilds() { local aoivWidIdx
        for aoivWidIdx = 0, numAoivWidgets - 1 {
            aoivWidgets[aoivWidIdx].dismissHandler()
        }
        dg4ivWidget.dismissHandler()
    }
    
endtemplate CreateListOfInputVarsWidget
