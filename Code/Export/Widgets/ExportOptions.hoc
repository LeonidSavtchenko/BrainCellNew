
begintemplate ExportOptions

    public isExportDistMechs, isExportDistMechAssignedAndState, isExportDistMechInhoms, isExportDistMechStochs, isExportSyns, isExportSynAssignedAndState, isExportSynInhoms, isExportSynStochs, isCreateParamsHoc, isExposeModelVars, isCreateRunnerHoc, isRecordAndSaveModelVars, isMakeSweepForModelVars, isCopyDll, isNewOrExistingDll
    public isExportAnyDistFuncs, isExportAnyStochFuncs, isExportAnyInhomBiophysModels, isExportSegmentationHelper, isExportAnyStochBiophysModels, isExportAnyInhomSynModels, isExportAnyStochSynModels
    public isExportedInhomVar, isExportedStochVar, isExportedInhomBiophysVar, isExportedStochBiophysVar, isExportedInhomSynVar, isExportedStochSynVar
    public isPythonRequired
    
    external isAstrocyteOrNeuron
    external inhomAndStochLibrary
    
    isExportDistMechs = -1
    isExportDistMechAssignedAndState = -1
    isExportDistMechInhoms = -1
    isExportDistMechStochs = -1
    isExportSyns = -1
    isExportSynAssignedAndState = -1
    isExportSynInhoms = -1
    isExportSynStochs = -1
    isCreateParamsHoc = -1
    isExposeModelVars = -1
    isCreateRunnerHoc = -1
    isRecordAndSaveModelVars = -1
    isMakeSweepForModelVars = -1
    isCopyDll = -1
    isNewOrExistingDll = -1
    
    
    proc init() {
        isExportDistMechs = 1
        isExportDistMechAssignedAndState = 1
        isExportDistMechInhoms = 1
        isExportDistMechStochs = 1
        isExportSyns = 1
        isExportSynAssignedAndState = 1
        isExportSynInhoms = 1
        isExportSynStochs = 1
        isCreateParamsHoc = 0
        isExposeModelVars = 0
        isCreateRunnerHoc = 0
        isRecordAndSaveModelVars = 0
        isMakeSweepForModelVars = 0
        isCopyDll = 0
        isNewOrExistingDll = 0
    }
    
    func isExportAnyDistFuncs() {
        return isExportAnyInhomBiophysModels() || isExportAnyInhomSynModels()
    }
    
    func isExportAnyStochFuncs() {
        return isExportAnyStochBiophysModels() || isExportAnyStochSynModels()
    }
    
    func isExportAnyInhomBiophysModels() {
        return (isExportDistMechs && isExportDistMechInhoms && inhomAndStochLibrary.getNumInhomVarsForDistMechs() != 0)
    }
    
    func isExportSegmentationHelper() {
        return (isExportDistMechs && isExportDistMechInhoms && inhomAndStochLibrary.isAnyNonVerbatimInhomVarsForDistMechs())
    }
    
    func isExportAnyStochBiophysModels() {
        return (isExportDistMechs && isExportDistMechStochs && inhomAndStochLibrary.getNumStochVarsForDistMechs() != 0)
    }
    
    func isExportAnyInhomSynModels() {
        return (!isAstrocyteOrNeuron && isExportSyns && isExportSynInhoms && inhomAndStochLibrary.getNumInhomVarsForSyns() != 0)
    }
    
    func isExportAnyStochSynModels() {
        return (!isAstrocyteOrNeuron && isExportSyns && isExportSynStochs && inhomAndStochLibrary.getNumStochVarsForSyns() != 0)
    }
    
    func isExportedInhomVar() { localobj activeSpecVar
        activeSpecVar = $o1
        if (!activeSpecVar.isInhom) {
            return 0
        }
        if (activeSpecVar.isDmOrSynPart) {
            if (!isExportDistMechs) {
                return 0
            }
            if (!isExportDistMechInhoms) {
                return 0
            }
            if (activeSpecVar.varType > 1 && !isExportDistMechAssignedAndState) {
                return 0
            }
        } else {
            if (isAstrocyteOrNeuron || !isExportSyns) {
                return 0
            }
            if (!isExportSynInhoms) {
                return 0
            }
            if (activeSpecVar.varType > 1 && !isExportSynAssignedAndState) {
                return 0
            }
        }
        return 1
    }
        
    func isExportedStochVar() { localobj activeSpecVar
        activeSpecVar = $o1
        if (!activeSpecVar.isStoch) {
            return 0
        }
        if (activeSpecVar.isDmOrSynPart) {
            if (!isExportDistMechs) {
                return 0
            }
            if (!isExportDistMechStochs) {
                return 0
            }
            if (activeSpecVar.varType > 1 && !isExportDistMechAssignedAndState) {
                return 0
            }
        } else {
            if (isAstrocyteOrNeuron || !isExportSyns) {
                return 0
            }
            if (!isExportSynStochs) {
                return 0
            }
            if (activeSpecVar.varType > 1 && !isExportSynAssignedAndState) {
                return 0
            }
        }
        return 1
    }
    
    func isExportedInhomBiophysVar() { localobj activeSpecVar
        activeSpecVar = $o1
        // 1: "PARAMETER"
        return isExportDistMechs && activeSpecVar.isInhom && activeSpecVar.isDmOrSynPart && (activeSpecVar.varType == 1 || isExportDistMechAssignedAndState)
    }
    
    func isExportedStochBiophysVar() { localobj activeSpecVar
        activeSpecVar = $o1
        // 1: "PARAMETER"
        return isExportDistMechs && activeSpecVar.isStoch && activeSpecVar.isDmOrSynPart && (activeSpecVar.varType == 1 || isExportDistMechAssignedAndState)
    }
    
    func isExportedInhomSynVar() { localobj activeSpecVar
        activeSpecVar = $o1
        // 1: "PARAMETER"
        return !isAstrocyteOrNeuron && isExportSyns && activeSpecVar.isInhom && !activeSpecVar.isDmOrSynPart && (activeSpecVar.varType == 1 || isExportSynAssignedAndState)
    }
    
    func isExportedStochSynVar() { localobj activeSpecVar
        activeSpecVar = $o1
        // 1: "PARAMETER"
        return !isAstrocyteOrNeuron && isExportSyns && activeSpecVar.isStoch && !activeSpecVar.isDmOrSynPart && (activeSpecVar.varType == 1 || isExportSynAssignedAndState)
    }
    
    func isPythonRequired() { local cond1, cond2, cond3, cond4
        // The exported file will require Python only if we export any inhom/stoch models requiring Python
        cond1 = (isExportDistMechs && isExportDistMechInhoms && inhomAndStochLibrary.doesAnyInhomVarRequirePython(1, isExportDistMechAssignedAndState))
        cond2 = (isExportSyns && isExportSynInhoms && inhomAndStochLibrary.doesAnyInhomVarRequirePython(0, isExportSynAssignedAndState))
        cond3 = (isExportDistMechStochs && inhomAndStochLibrary.doesAnyStochVarRequirePython(1, isExportDistMechAssignedAndState))
        cond4 = (isExportSynStochs && inhomAndStochLibrary.doesAnyStochVarRequirePython(0, isExportSynAssignedAndState))
        return cond1 || cond2 || cond3 || cond4
    }
    
endtemplate ExportOptions


objref exportOptions
exportOptions = new ExportOptions()
