
py:getIntegerValueFromTopLevel('isAstrocyteOrNeuron')

py:getAllCreateStatementsExceptNanogeometry()

py:getIntegerValueFromTopLevel('NumberDendrites')
py:getIntegerValueFromTopLevel('NumberLeavesPerStalk')
py:getIntegerValueFromTopLevel('NumberNanoBranches')

begintemplate AstrocyteNanoBranch
    public LargeGlia, SmallGlia
    create LargeGlia[1], SmallGlia[1]
    external NumberLeavesPerStalk
    proc init() {
        create LargeGlia[NumberLeavesPerStalk], SmallGlia[NumberLeavesPerStalk]
    }
endtemplate AstrocyteNanoBranch

objref astrocyteNanoBranch[NumberNanoBranches]
for idx = 0, NumberNanoBranches - 1 {
    astrocyteNanoBranch[idx] = new AstrocyteNanoBranch()
}

//////////////////// Start of section references /////////////////////////
objref soma_ref, dendrite_ref

// Soma
py:createListOfSectionRef('usedNamesForSoma', 'soma_ref')

// Dendrites
py:createListOfSectionRef('usedNamesForDendrites', 'dendrite_ref')

// Nanogeometry
py:insertAllLinesFromFile('Code\\NanoCore\\Exported\\CreateNanoRefs_Exported.hoc')

createRefsForNanoGeometry()
//////////////////// End of section references ///////////////////////////

//////////////////// Start of topology ///////////////////////////////////
py:initTopology()
//////////////////// End of topology /////////////////////////////////////

//////////////////// Start of geometry ///////////////////////////////////
py:initGeometry()
//////////////////// End of geometry /////////////////////////////////////

//////////////////// Start of Soma biophysics ////////////////////////////
// py!!:insertAllLinesFromFile('Code\\Astrocyte\\SomaBiophysics.hoc')
//////////////////// End of Soma biophysics //////////////////////////////

//////////////////// Start of Dendrites biophysics ///////////////////////
// py!!:insertAllLinesFromFile('Code\\Astrocyte\\DendritesBiophysics.hoc')
//////////////////// End of Dendrites biophysics /////////////////////////

//////////////////// Start of End Foot biophysics ////////////////////////
// py!!:insertAllLinesFromFile('Code\\Astrocyte\\EndFootBiophysics.hoc')
//////////////////// End of End Foot biophysics //////////////////////////

//////////////////// Start of nanogeometry biophysics ////////////////////
py:getDoubleValueFromTopLevel('GPassive')
py:getIntegerValueFromTopLevel('currentMechanismSetup')
py:getDoubleValueFromTopLevel('DensityGluTransporters')

py:insertAllLinesFromFile('Code\\NanoCore\\Astrocyte\\Exported\\AstrocyteNanoBranch_Exported.hoc')

for idx = 0, NumberNanoBranches - 1 {
    initAstrocyteBiophysics(astrocyteNanoBranch[idx])
}

//////////////////// End of nanogeometry biophysics //////////////////////

//////////////////// Start of Other biophysics ///////////////////////////
// py!!:insertAllLinesFromFile('Code\\Astrocyte\\OtherBiophysics.hoc')
//////////////////// End of Other biophysics /////////////////////////////

// !! hardcoded rather than exported
soma_ref.o(0).sec distance()
