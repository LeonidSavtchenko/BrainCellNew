
py:getIntegerValueFromTopLevel('isAstrocyteOrNeuron')

py:getAllCreateStatementsExceptNanogeometry()

py:getIntegerValueFromTopLevel('NumberDendrites')
py:getIntegerValueFromTopLevel('NumberNanoBranches')

begintemplate NeuronNanoBranch
    public spine_neck, spine_head
    create spine_neck, spine_head
endtemplate NeuronNanoBranch

objref neuronNanoBranch[NumberNanoBranches]
for idx = 0, NumberNanoBranches - 1 {
    neuronNanoBranch[idx] = new NeuronNanoBranch()
}

//////////////////// Start of section references /////////////////////////
objref soma_ref, dendrite_ref, axon_ref

// Soma
py:createListOfSectionRef('usedNamesForSoma', 'soma_ref')

// Dendrites
py:createListOfSectionRef('usedNamesForDendrites', 'dendrite_ref')

// Axon
py:createListOfSectionRef('usedNamesForAxon', 'axon_ref')

// Nanogeometry
py:insertAllLinesFromFile('Code\\NanoCore\\Exported\\CreateNanoRefs_Exported.hoc')

createRefsForNanoGeometry()
//////////////////// End of section references ///////////////////////////

//////////////////// Start of topology ///////////////////////////////////
py:initTopology()
//////////////////// End of topology /////////////////////////////////////

//////////////////// Start of geometry ///////////////////////////////////
py:initGeometry()
//////////////////// End of geometry /////////////////////////////////////

//////////////////// Start of soma biophysics ////////////////////////////
// py!!:insertAllLinesFromFile('Code\\Neuron\\SomaBiophysics.hoc')
//////////////////// End of soma biophysics //////////////////////////////

//////////////////// Start of dendrites biophysics ///////////////////////
// py!!:insertAllLinesFromFile('Code\\Neuron\\DendritesBiophysics.hoc')
//////////////////// End of dendrites biophysics /////////////////////////

//////////////////// Start of axon biophysics ////////////////////////////
// py!!:insertAllLinesFromFile('Code\\Neuron\\AxonBiophysics.hoc')
//////////////////// End of axon biophysics //////////////////////////////

//////////////////// Start of nanogeometry biophysics ////////////////////
py:getDoubleValueFromTopLevel('Vrest')
py:getDoubleValueFromTopLevel('RmDend')
py:getDoubleValueFromTopLevel('RaAll')
py:getDoubleValueFromTopLevel('gna')
py:getDoubleValueFromTopLevel('gkdr')
py:getDoubleValueFromTopLevel('nash')

py:insertAllLinesFromFile('Code\\Preface\\Neuron\\Exported\\Biophys_Exported.hoc')

py:getDoubleValueFromTopLevel('BasicK')

py:insertAllLinesFromFile('Code\\Preface\\Neuron\\Exported\\Diffusion3D_Exported.hoc')

isFirstReseeding = 1
isExportedMode = 1

py:insertAllLinesFromFile('Code\\NanoCore\\Neuron\\Exported\\NeuronNanoBranch_Exported.hoc')

for idx = 0, NumberNanoBranches - 1 {
    initNeuronBiophysics(neuronNanoBranch[idx])
}

//////////////////// End of nanogeometry biophysics //////////////////////

//////////////////// Start of other biophysics ///////////////////////////
// py!!:insertAllLinesFromFile('Code\\Neuron\\OtherBiophysics.hoc')
//////////////////// End of other biophysics /////////////////////////////

// !! hardcoded rather than exported
soma_ref.o(0).sec distance()

//////////////////// Start of synapses ///////////////////////////////////
py:getIntegerValueFromTopLevel('enumSynLoc')

//////////////////////////////////////////////////////////////////////////
py:insertAllLinesFromFile('Code\\Preface\\Neuron\\Exported\\AddSynapses_Exported.hoc')
//////////////////// End of synapses /////////////////////////////////////
