
// Just some declarations for binding in the proc-s below (will be defined before the first usage)
numWatchedAPCounts = -1
objref apcList, recordedVecsFromAPCounts[1]

// in: numWatchedAPCounts, apcList, recordedVecsFromAPCounts (taken from the top level)
proc setUpVecsForRecordingFromAPCounts() { local apcIdx localobj vec
    for apcIdx = 0, numWatchedAPCounts - 1 {
        vec = new Vector()
        apcList.o(apcIdx).record(vec)
        recordedVecsFromAPCounts[apcIdx] = vec
    }
}

objref pyObj

// in: outFileNameTimestampFormat, outFolderName, numSweptVars, numWatchedAPCounts, apcList, recordedVecsFromAPCounts, oneValueFormat (taken from the top level)
proc saveRecordedVecsFromAPCounts() { local apcIdx, maxNumRecs, n, recIdx localobj outFile, vec
    strdef pyCommand, outFileName, outFilePathName, line, unitsStr, oneValueStr
    
    sprint(pyCommand, "(exec('import datetime'), datetime.datetime.now().strftime('aps %s.txt'))[1]", outFileNameTimestampFormat)
    outFileName = pyObj.ev(pyCommand)
    
    sprint(outFilePathName, "%s/%s", outFolderName, outFileName)
    outFile = new File()
    outFile.wopen(outFilePathName)
    
    // The swept var names and values
    if (numSweptVars != 0) {
        dumpSweptVarsToFileHeader(outFile)
    }
    
    // The time var name
    line = "t"
    for apcIdx = 1, numWatchedAPCounts - 1 {
        sprint(line, "%s\tt", line)
    }
    outFile.printf("%s\n", line)
    
    // The time var units
    unitsStr = units(&t)
    sprint(line, "%s", unitsStr)
    for apcIdx = 1, numWatchedAPCounts - 1 {
        sprint(line, "%s\t%s", line, unitsStr)
    }
    outFile.printf("%s\n", line)
    
    maxNumRecs = -1
    for apcIdx = 0, numWatchedAPCounts - 1 {
        n = apcList.o(apcIdx).n
        if (n > maxNumRecs) {
            maxNumRecs = n
        }
    }
    
    // The recorded times of action potentials
    for recIdx = 0, maxNumRecs - 1 {
        
        // The first column
        vec = recordedVecsFromAPCounts[0]
        if (recIdx < vec.size()) {
            sprint(line, oneValueFormat, vec.x(recIdx))
        } else {
            line = ""
        }
        
        // All next columns
        for apcIdx = 1, numWatchedAPCounts - 1 {
            vec = recordedVecsFromAPCounts[apcIdx]
            if (recIdx < vec.size()) {
                sprint(oneValueStr, oneValueFormat, vec.x(recIdx))
                sprint(line, "%s\t%s", line, oneValueStr)
            } else {
                sprint(line, "%s\t", line)
            }
        }
        
        outFile.printf("%s\n", line)
    }
    
    outFile.close()
}
