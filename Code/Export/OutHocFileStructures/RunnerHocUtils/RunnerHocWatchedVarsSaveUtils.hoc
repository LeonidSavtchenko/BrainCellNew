
// in: outFolderName, timestamp, numSweptVars, numWatchedVars, watchedVarNames, recordedVarVecs, recordedTimeVec, Dt, oneValueFormat (taken from the top level)
proc saveRecordedVarVecs() { local watchedVarIdx, actNumRecs, recIdx, time localobj outFile
    strdef outFilePathName, line, oneValueStr
    
    sprint(outFilePathName, "%s/vars %s.txt", outFolderName, timestamp)
    outFile = new File()
    outFile.wopen(outFilePathName)
    
    // The swept var names and values
    if (numSweptVars != 0) {
        dumpSweptVarsToFileHeader(outFile)
    }
    
    // The watched var names
    line = "t"
    for watchedVarIdx = 0, numWatchedVars - 1 {
        sprint(line, "%s\t%s", line, watchedVarNames.o(watchedVarIdx).s)
    }
    outFile.printf("%s\n", line)
    
    // The watched var units
    sprint(line, "%s", units(&t))
    for watchedVarIdx = 0, numWatchedVars - 1 {
        sprint(line, "%s\t%s", line, watchedVarUnits.o(watchedVarIdx).s)
    }
    outFile.printf("%s\n", line)
    
    // For fixed time step method, this will be < numRecs if user stopped the cycle
    actNumRecs = recordedVarVecs[0].size()
    
    // The watched var data
    for recIdx = 0, actNumRecs - 1 {
        if (cvode.active()) {
            time = recordedTimeVec.x(recIdx)
        } else {
            time = recIdx * Dt
        }
        sprint(line, oneValueFormat, time)
        for watchedVarIdx = 0, numWatchedVars - 1 {
            sprint(oneValueStr, oneValueFormat, recordedVarVecs[watchedVarIdx].x[recIdx])
            sprint(line, "%s\t%s", line, oneValueStr)
        }
        outFile.printf("%s\n", line)
    }
    
    outFile.close()
}
