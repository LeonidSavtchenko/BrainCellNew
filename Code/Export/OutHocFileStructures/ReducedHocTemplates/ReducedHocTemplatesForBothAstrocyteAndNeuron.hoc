
nan = -1
{ sscanf("nan", "%f", &nan) }

func isNaN() {
    return !($1 == $1)  // Do not replace with "!="
}

begintemplate MechComp_

    public initHomogenBiophysics
    public name, list_ref, isMechInserted, mechStds
    external isNaN
    
    strdef name
    objref list_ref
    double isMechInserted[1]
    objref mechStds[1]
    
    objref mechType
    numMechs = -1
    
    
    proc init() {
        name = $s1
        list_ref = $o2
        
        mechType = new MechanismType(0) // 0: "Distributed Membrane Mechanisms"
        numMechs = mechType.count
        
        double isMechInserted[numMechs]
        objref mechStds[numMechs]
    }
    
    // !! keep in sync with MechComp.applyHomogenChangesToDirtyMechs in the main program
    proc initHomogenBiophysics() { local morphologyMechIdx, mechIdx, secIdx, diamValue localobj sec_ref
        strdef diamVarName
        
        morphologyMechIdx = 0
        diamVarName = "diam"
        
        for mechIdx = 0, numMechs - 1 {
            if (!isMechInserted[mechIdx]) {
                continue
            }
            mechType.select(mechIdx)
            for secIdx = 0, list_ref.count() - 1 {
                list_ref.o(secIdx).sec {
                    mechType.make()
                    mechStds[mechIdx].out()
                    if (mechIdx == morphologyMechIdx) {
                        diamValue = mechStds[mechIdx].get(diamVarName)
                        if (!isNaN(diamValue)) {
                            diam = diamValue
                        }
                    }
                }
            }
        }
    }
    
endtemplate MechComp_
