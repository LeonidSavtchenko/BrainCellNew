
// Keep in sync with RNGUtils
begintemplate ReducedRNGUtils

    public getFor_stochFunc_withUniqueSeed, getSeedFor_SEFW
    public resetAllSeeds, getAllSeeds, setAllSeeds
    
    uniqueSeedForHoc = -1
    uniqueSeedForMod = -1
    
    minSeedForMod = -1
    maxNumSeedsPerRankForMod = -1
    
    
    proc init() {
        if (!use_mcell_ran4()) {
            minSeedForMod = 0       // HOC and MOD use different RNGs, so we don't care about seeds overlapping
        } else {
            minSeedForMod = 10000   // HOC and MOD can use the same RNG, so we try to prevent seeds overlapping
        }
        
        // The maximum value for exportOptions.numRepeatsForStats user can use with the guarantee of unique seeds
        // (important only when pc.nhost() > 1)
        maxNumSeedsPerRankForMod = 1000
        
        resetAllSeeds()
    }
    
    obfunc getFor_stochFunc_withUniqueSeed() { localobj rng
        rng = new Random(uniqueSeedForHoc)
        uniqueSeedForHoc += 1
        return rng
    }
    
    func getSeedFor_SEFW() { local seed
        seed = uniqueSeedForMod
        uniqueSeedForMod += 1
        return seed
    }
    
    proc resetAllSeeds() { localobj pc
        uniqueSeedForHoc = 9    // Just copied from RNGUtils
        
        pc = new ParallelContext()
        uniqueSeedForMod = minSeedForMod + maxNumSeedsPerRankForMod * pc.id
    }
    
    proc getAllSeeds() {
        $&1 = uniqueSeedForHoc
        $&2 = uniqueSeedForMod
    }
    
    proc setAllSeeds() {
        uniqueSeedForHoc = $1
        uniqueSeedForMod = $2
    }
    
endtemplate ReducedRNGUtils
