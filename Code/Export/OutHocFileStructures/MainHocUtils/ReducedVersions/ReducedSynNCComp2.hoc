
begintemplate ReducedSynNCComp

    public enumDmPpNc, mechStds
    public applyInhomogeneity
    
    external mth, mcu
    external synGroup, seh, utils4FakeMech4NC
    external codeContractViolation
    
    enumDmPpNc = -1
    objref mechStds[1][1]
    
    
    proc init() {
        enumDmPpNc = 2
        objref mechStds[1][1]
    }
    
    // Keep in sync with SynNCComp.applyInhomogeneity
    proc applyInhomogeneity() { local varType, arraySize, arrayIndex, isMetaVar, isSefwEnabled, isWeightVar, y localobj distFuncHelper, firstNetCon, mechStd, syn, thisPp
        strdef mechName, varName, varNameWithIndex
        
        mechName = $s1  // Just placeholders
        varType = $2    //
        varName = $s3
        arraySize = $4
        arrayIndex = $5
        distFuncHelper = $o6
        
        if (varType != 1) {     // 1: "PARAMETER"
            codeContractViolation()
        }
        
        isMetaVar = mcu.isMetaVar(varName)
        isSefwEnabled = seh.isSefwEnabled()
        
        if (isMetaVar && !isSefwEnabled) {
            return
        }
        
        if (!isMetaVar) {
            mth.getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
            isWeightVar = mth.isWeightNetConVar(varName)
        } else {
            mechStd = new MechanismStandard(seh.realMechName, seh.realVarType)
        }
        
        for synGroup.applyInhomogeneityIter(syn, distFuncHelper) {
            y = distFuncHelper.calculateAt(syn.dist)
            if (!isMetaVar) {
                firstNetCon = syn.netCon
                utils4FakeMech4NC.setNetConVar(firstNetCon, varNameWithIndex, y)
                if (isSefwEnabled && isWeightVar) {
                    syn.sefwNetCon.weight = firstNetCon.weight
                }
            } else {
                thisPp = syn.sefwPp
                mechStd.in(thisPp)
                mechStd.set(seh.realVarName, y, seh.realArrayIndex)
                mechStd.out(thisPp)
            }
        }
    }
    
endtemplate ReducedSynNCComp
