
// !! get rid of this once Syn Manager is ready
// objref DistanceDistribution  // This was not used

begintemplate Synapse

    public source, netCon, target, single, sec_ref, connectionPoint, dist
    public getPointProcess, changeLocation, changeStructure
    
    // !! uncomment here and below once it's exported
    // external codeContractViolation
    
    objref source, netCon, target, single, sec_ref
    
    connectionPoint = -1
    dist = -1
    
    
    proc init() { local numArg
        numArg = numarg()
        if (numArg == 5) {
            source = $o1
            netCon = $o2
            target = $o3
            sec_ref = $o4
            connectionPoint = $5
        } else if (numArg == 3) {
            single = $o1
            sec_ref = $o2
            connectionPoint = $3
        } else {
            // codeContractViolation()
        }
        calcAndCacheDist()
    }
    
    obfunc getPointProcess() { local enumPpRoleExt localobj nil
        enumPpRoleExt = $1     // 0: "Source PP", 1: "Target PP", 2: "Single PP", 3: "Target PP or Single PP"
        
        if (enumPpRoleExt == 0) {
            return source
        } else if (enumPpRoleExt == 1) {
            return target
        } else if (enumPpRoleExt == 2) {
            return single
        } else if (enumPpRoleExt == 3) {
            if (netCon != nil) {
                return target
            } else {
                return single
            }
        } else {
            // codeContractViolation()
        }
    }
    
    proc changeLocation() {
        sec_ref = $o1
        connectionPoint = $2
        calcAndCacheDist()
    }
    
    proc changeStructure() { local numArg localobj nil
        numArg = numarg()
        if (numArg == 3) {
            netCon = $o2    // Destroying old NetCon first
            source = $o1
            target = $o3
            single = nil
        } else if (numArg == 1) {
            single = $o1
            netCon = nil
            source = nil
            target = nil
        } else {
            // codeContractViolation()
        }
    }
    
    // All next staff is private
    
    
    proc calcAndCacheDist() {
        sec_ref.sec {
            dist = distance(connectionPoint)
        }
    }
    
endtemplate Synapse

objref smAllSyns
smAllSyns = new List()


// This proc will be called each time after neuron nanogeometry reseeding
// Create and connect all default synapses; the number is the same as the number of spines
// Inputs (all taken from the top level): SynapseLocationDendrite, weight, IntervalSynapticActivity, SwtichOn, noise,
//                                        nanoDistal_ref, nanoProximal_ref
proc Neuron_AddSynapses_reseed() { local numSyns, synIdx, connectionPoint localobj source, target, sec_ref, netCon, synapse
    
    numSyns = nanoDistal_ref.count()
    
    for synIdx = 0, numSyns - 1 {
        source = new NetStim()
        
        if (SynapseLocationDendrite) {
            // Synapse is connected to the centre of spine_head
            connectionPoint = 0.5
            nanoDistal_ref.o(synIdx).sec {
                target = new Exp2Syn(connectionPoint)
                sec_ref = new SectionRef()
            }
        } else {
            // Synapse is connected to the point on dendrite where spine_neck emerges
            nanoProximal_ref.o(synIdx).sec connectionPoint = parent_connection()
            nanoProximal_ref.o(synIdx).parent {
                target = new Exp2Syn(connectionPoint)
                sec_ref = new SectionRef()
            }
        }
        
        // !! get rid of this once Syn Manager is ready
        // DistanceDistribution.x = dist
        // print "distance = ", dist
        // Conductance depended on distance. The formula is the same for all calculations
        // ConDistance = 0.5125 + dist * 0.65 / 300
        ConDistance = 1
        
        netCon = new NetCon(source, target, 0, 0, weight * ConDistance)
        source.start = 2
        source.interval = IntervalSynapticActivity
        source.number = SwtichOn
        source.noise = noise
        
        synapse = new Synapse(source, netCon, target, sec_ref, connectionPoint)
        smAllSyns.append(synapse)
    }
}

Neuron_AddSynapses_reseed()
