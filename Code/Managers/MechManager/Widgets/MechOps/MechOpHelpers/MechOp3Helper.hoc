
// !! major code dupl. with MechOp2Helper

begintemplate MechOp3Helper

    public getHeader, isSkipBlock, insertBlock, dismissChilds
    public defineStochFuncSubWidget
    public title, isRequireApply, itemTypeIdx
    
    external mmAllComps
    external math, mth, mwh, mmmowb, mcu, inhomAndStochLibrary
    external dismissIfNotNil
    
    objref defineStochFuncSubWidget
    
    strdef title
    isRequireApply = -1
    itemTypeIdx = -1
    
    
    proc init() {
        title = "Review all stochastic variables"
        isRequireApply = 0
        itemTypeIdx = 2     // Button
    }
    
    proc getHeader() {
        $s1 = "Only stochastic variables of inserted mechanisms are shown below."
        // $s2 is not assigned
    }
    
    func isSkipBlock() { local compIdx, mechIdx, isSkipBasedOnMech, varType, varTypeIdx localobj comp
        strdef varName
        
        compIdx = $1
        mechIdx = $2
        
        isSkipBasedOnMech = mmmowb.mechOpHelpers[1].isSkipBlock(compIdx, mechIdx)
        if (isSkipBasedOnMech) {
            return 1
        }
        
        comp = mmAllComps.o(compIdx)
        
        for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            if (comp.isMechVarTypeStoch[mechIdx][varTypeIdx]) {
                return 0
            }
        }
        
        return 1
    }
    
    func insertBlock() { local compIdx, mechIdx, numInsertedItems, varType, varTypeIdx, numMechVars, varIdx, arraySize, arrayIndex, isStoch localobj comp
        strdef name, varTypeName, varName, varNameWithIndexAndUnits, text, handlerHocCommand
        
        compIdx = $1
        mechIdx = $2
        name = $s3
        
        comp = mmAllComps.o(compIdx)
        
        numInsertedItems = 0
        for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            if (!comp.isMechVarTypeStoch[mechIdx][varTypeIdx]) {
                continue
            }
            mth.getVarTypeName(varType, varTypeName)
            numMechVars = mth.getNumMechVars(0, mechIdx, varType)
            for varIdx = 0, numMechVars - 1 {
                arraySize = mth.getVarNameAndArraySize(0, mechIdx, varType, varIdx, varName)
                for arrayIndex = 0, arraySize - 1 {
                    isStoch = inhomAndStochLibrary.isStochEnabledFor(0, compIdx, mechIdx, varType, varIdx, arrayIndex)
                    if (isStoch) {
                        mth.getVarNameWithIndexAndUnits(0, mechIdx, varName, arraySize, arrayIndex, varNameWithIndexAndUnits)
                        sprint(text, "%s/%s: %s", name, varTypeName, varNameWithIndexAndUnits)
                        sprint(handlerHocCommand, "defineStochFuncHandler(%d, %d, %d, %d, %d)", compIdx, mechIdx, varType, varIdx, arrayIndex)
                        xbutton(text, handlerHocCommand)
                        numInsertedItems += 1
                    }
                }
            }
        }
        
        return numInsertedItems
    }
    
    proc dismissChilds() {
        dismissIfNotNil(defineStochFuncSubWidget)
    }
    
    
    // All next proc-s are private
    
    proc defineStochFuncHandler() { local compIdx, mechIdx, varType, varIdx, arrayIndex
        compIdx = $1
        mechIdx = $2
        varType = $3
        varIdx = $4
        arrayIndex = $5
        
        dismissChilds()
        
        defineStochFuncSubWidget = mcu.defineStochFuncHandler(0, compIdx, mechIdx, varType, varIdx, arrayIndex)
    }
    
endtemplate MechOp3Helper
