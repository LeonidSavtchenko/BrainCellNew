
// !! major code dupl. with MechOp3Helper

begintemplate MechOp2Helper

    public getHeader, isSkipBlock, insertBlock, dismissChilds
    public defineDistFuncSubWidget
    public title, isRequireApply, itemTypeIdx
    
    external mmAllComps
    external mwh, mth, mmmowb, msmBaseWidget
    external dismissIfNotNil
    
    objref defineDistFuncSubWidget
    
    strdef title
    isRequireApply = -1
    itemTypeIdx = -1
    
    
    proc init() {
        title = "Review all inhomogeneous variables"
        isRequireApply = 0
        itemTypeIdx = 2     // Button
    }
    
    proc getHeader() {
        $s1 = "Only inhomogeneous variables of inserted mechanisms are shown below."
        // $s2 is not assigned
    }
    
    func isSkipBlock() { local compIdx, mechIdx, isSkipBasedOnMech, varType, varTypeIdx localobj comp
        strdef varName
        
        compIdx = $1
        mechIdx = $2
        
        isSkipBasedOnMech = mmmowb.mechOpHelpers[1].isSkipBlock(compIdx, mechIdx)
        if (isSkipBasedOnMech) {
            return 1
        }
        
        comp = mmAllComps.o(compIdx)
        
        for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            if (comp.isMechVarTypeInhom[mechIdx][varTypeIdx]) {
                return 0
            }
        }
        
        return 1
    }
    
    func insertBlock() { local compIdx, mechIdx, numInsertedItems, varType, varTypeIdx, numMechVars, varIdx, arraySize, arrayIndex, isInhom localobj comp
        strdef name, varTypeName, varName, varNameWithIndexAndUnits, text, handlerHocCommand
        
        compIdx = $1
        mechIdx = $2
        name = $s3
        
        comp = mmAllComps.o(compIdx)
        
        numInsertedItems = 0
        for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            if (!comp.isMechVarTypeInhom[mechIdx][varTypeIdx]) {
                continue
            }
            mth.getVarTypeName(varType, varTypeName)
            numMechVars = mth.getNumMechVars(0, mechIdx, varType)
            for varIdx = 0, numMechVars - 1 {
                arraySize = mth.getVarNameAndArraySize(0, mechIdx, varType, varIdx, varName)
                for arrayIndex = 0, arraySize - 1 {
                    isInhom = comp.isMechVarInhom(mechIdx, varTypeIdx, varName, arrayIndex)
                    if (isInhom) {
                        mth.getVarNameWithIndexAndUnits(0, mechIdx, varName, arraySize, arrayIndex, varNameWithIndexAndUnits)
                        sprint(text, "%s/%s: %s", name, varTypeName, varNameWithIndexAndUnits)
                        sprint(handlerHocCommand, "defineDistFuncHandler(%d, %d, %d, %d, %d)", compIdx, mechIdx, varType, varIdx, arrayIndex)
                        xbutton(text, handlerHocCommand)
                        numInsertedItems += 1
                    }
                }
            }
        }
        
        return numInsertedItems
    }
    
    proc dismissChilds() {
        dismissIfNotNil(defineDistFuncSubWidget)
    }
    
    
    // All next proc-s are private
    
    proc defineDistFuncHandler() { local compIdx, mechIdx, varType, varIdx, arrayIndex
        compIdx = $1
        mechIdx = $2
        varType = $3
        varIdx = $4
        arrayIndex = $5
        
        dismissChilds()
        
        defineDistFuncSubWidget = msmBaseWidget.defineDistFuncHandler(1, compIdx, mechIdx, varType, varIdx, arrayIndex)
    }
    
endtemplate MechOp2Helper
