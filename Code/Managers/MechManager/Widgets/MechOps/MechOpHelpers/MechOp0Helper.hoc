
begintemplate MechOp0Helper

    public getHeader, isSkipBlock, insertBlock, dismissChilds
    public title, isRequireApply, itemTypeIdx
    
    external mmAllComps
    external mwh, mth
    external codeContractViolation
    
    strdef title
    isRequireApply = -1
    itemTypeIdx = -1
    
    
    proc init() {
        title = "Insert/uninsert mechanisms"
        isRequireApply = 1
        itemTypeIdx = 0     // Checkbox
    }
    
    proc getHeader() {
        $s1 = "All available mechanisms are shown below."
        // $s2 is not assigned
    }
    
    func isSkipBlock() {
        return 0
    }
    
    func insertBlock() { local compIdx, mechIdx localobj comp
        strdef name, handlerHocCommand
        
        compIdx = $1
        mechIdx = $2
        name = $s3
        
        comp = mmAllComps.o(compIdx)
        prepareCheckboxHandlerHocCommand(compIdx, mechIdx, handlerHocCommand)
        xcheckbox(name, &comp.isMechInserted[mechIdx], handlerHocCommand)
        
        return 1
    }
    
    proc dismissChilds() {
        // No childs
    }
    
    
    // All next proc-s are private
    
    proc prepareCheckboxHandlerHocCommand() { local compIdx, mechIdx
        strdef hocCommandTemplate
        
        compIdx = $1
        mechIdx = $2
        
        if (mechIdx == mth.morphologyMechIdx) {
            hocCommandTemplate = "preventCheckboxUncheckingHandler(%d, %d)"
        } else if (mth.isDistMechSticky(mechIdx)) {
            hocCommandTemplate = "stickyMechCheckboxHandler(%d, %d)"
        } else {
            hocCommandTemplate = "checkboxHandler(%d, %d)"
        }
        sprint($s3, hocCommandTemplate, compIdx, mechIdx)
    }
    
    proc preventCheckboxUncheckingHandler() { local compIdx, mechIdx
        strdef mechName, msg
        
        compIdx = $1
        mechIdx = $2
        
        if (mechIdx != mth.morphologyMechIdx) {
            codeContractViolation()
        }
        
        mth.getMechName(0, mechIdx, mechName)
        
        sprint(msg, "\"%s\" mechanism cannot be uninserted (Neuron restriction).", mechName)
        mwh.showWarningBox(msg)
        
        mmAllComps.o(compIdx).isMechInserted[mechIdx] = 1
    }
    
    proc stickyMechCheckboxHandler() { local compIdx, mechIdx, wasMechInserted, willMechBeInserted localobj comp
        strdef mechName, msg
        
        compIdx = $1
        mechIdx = $2
        
        if (!mth.isDistMechSticky(mechIdx)) {
            codeContractViolation()
        }
        
        comp = mmAllComps.o(compIdx)
        mth.getMechName(0, mechIdx, mechName)
        
        comp.list_ref.o(0).sec wasMechInserted = ismembrane(mechName)   // 1st section state
        willMechBeInserted = comp.isMechInserted[mechIdx]               // Checkbox state
        
        if (wasMechInserted && !willMechBeInserted) {
            sprint(msg, "Once inserted, \"%s\" mechanism cannot be uninserted anymore (Neuron restriction).", mechName)
            mwh.showWarningBox(msg)
            comp.isMechInserted[mechIdx] = 1
            return
        }
        
        checkboxHandler(compIdx, mechIdx)
    }
    
    proc checkboxHandler() { local compIdx, mechIdx
        compIdx = $1
        mechIdx = $2
        mmAllComps.o(compIdx).markMechDirty(mechIdx)
    }
    
endtemplate MechOp0Helper
