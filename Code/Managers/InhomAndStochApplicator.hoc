
begintemplate InhomAndStochApplicator
    
    public isStochEnabledFor, enableOrUpdateInhomFor, enableOrUpdateStochFor, startPlayingVars, stopPlayingVars, onInit, onStep, disableInhomOrStochFor, onMechUninsert, onCompMerge, onCompSplit
    
    external eachItemInList
    
    objref inhomAndStochTargets
    
    
    proc init() {
        inhomAndStochTargets = new List()
    }
    
    // in: compIdx, mechIdx, varType, varIdx, arrayIndex
    func isStochEnabledFor() {
        idx = findInhomAndStochTarget($1, $2, $3, $4, $5)
        if (idx == inhomAndStochTargets.count()) {
            // Not found
            return 0
        }
        return inhomAndStochTargets.o(idx).isStoch
    }
    
    // in: compIdx, mechIdx, varType, varIdx, arrayIndex, distFuncHelper
    func enableOrUpdateInhomFor() { local idx
        idx = findInhomAndStochTarget($1, $2, $3, $4, $5)
        if (idx == inhomAndStochTargets.count()) {
            // Not found
            inhomAndStochTargets.append(new InhomAndStochTarget($1, $2, $3, $4, $5, $o6))
            return 0
        }
        inhomAndStochTargets.o(idx).updateInhom($o6)
        return 1
    }
    
    // in: compIdx, mechIdx, varType, varIdx, arrayIndex, boundingHelper, stochFuncHelper, stochFuncCatIdx
    func enableOrUpdateStochFor() { local idx localobj nil
        idx = findInhomAndStochTarget($1, $2, $3, $4, $5)
        if (idx == inhomAndStochTargets.count()) {
            // Not found
            inhomAndStochTargets.append(new InhomAndStochTarget($1, $2, $3, $4, $5, nil, $o6, $o7, $8, $9))
            return 0
        }
        inhomAndStochTargets.o(idx).updateStoch($o6, $o7, $8, $9)
        return 1
    }
    
    // !!! BUG: need to call this func with isInhomOrStoch = 1 somewhere
    // in: isInhomOrStoch, compIdx, mechIdx, varType, varIdx, arrayIndex
    func disableInhomOrStochFor() { local idx, isAnotherDisabledAsWell
        idx = findInhomAndStochTarget($2, $3, $4, $5, $6)
        if (idx == inhomAndStochTargets.count()) {
            // Not found
            return 0
        }
        isAnotherDisabledAsWell = inhomAndStochTargets.o(idx).disableInhomOrStoch($1)
        if (isAnotherDisabledAsWell) {
            inhomAndStochTargets.remove(idx)
        }
        // !! do I need to restore the old value for the var here?
        return 1
    }
    
    func startPlayingVars() { local isAllPlayed, isThisPlayed localobj inhomAndStochTarget
        isAllPlayed = 1
        for eachItemInList(inhomAndStochTarget, inhomAndStochTargets) {
            isThisPlayed = inhomAndStochTarget.setPlayIfPossible()
            isAllPlayed = isAllPlayed && isThisPlayed
        }
        return !isAllPlayed
    }
    
    proc stopPlayingVars() { localobj inhomAndStochTarget
        for eachItemInList(inhomAndStochTarget, inhomAndStochTargets) {
            inhomAndStochTarget.stopPlayingVars()
        }
    }
    
    proc onInit() { localobj inhomAndStochTarget
        for eachItemInList(inhomAndStochTarget, inhomAndStochTargets) {
            inhomAndStochTarget.onInit()
        }
    }
    
    proc onStep() { localobj inhomAndStochTarget
        for eachItemInList(inhomAndStochTarget, inhomAndStochTargets) {
            inhomAndStochTarget.onStep()
        }
    }
    
    // !! call this
    proc onMechUninsert() {
        // !! disable stochasticity for all vars of the uninserted mechanism
    }
    
    // !! call this
    proc onCompMerge() {
        // !! update inhomAndStochTargets accordingly
    }
    
    // !! call this
    proc onCompSplit() {
        // !! update inhomAndStochTargets accordingly
    }
    
    // All next staff is private
    
    
    // in: compIdx, mechIdx, varType, varIdx, arrayIndex
    func findInhomAndStochTarget() { local idx
        // Not many inhomAndStochTarget-s, so hashless comparison works just fine
        for idx = 0, inhomAndStochTargets.count() - 1 {
            if (inhomAndStochTargets.o(idx).isEqual($1, $2, $3, $4, $5)) {
                break
            }
        }
        return idx
    }
    
endtemplate InhomAndStochApplicator


objref inhomAndStochApplicator
inhomAndStochApplicator = new InhomAndStochApplicator()
