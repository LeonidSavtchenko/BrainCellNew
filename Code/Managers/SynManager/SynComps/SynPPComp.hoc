
begintemplate SynPPComp

    public name, enumDmPpNc, enumPpRole, isMechVarTypeInhom, mechStds
    public isMechVarInhom, prepareVarsEditorHeader, getDistRange, getSecList, markMechDirty, updateStatsCurve, updateVerbatimModelCurve, applyInhomogeneity, isAnyVarInhom
    public isMechVarTypeInhom, mechStds, isMechDirty
    
    external mwh, mth, math, mcu
    external smAllSyns, synGroup
    external stringsEqual, codeContractViolation
    external eachItemInList
    
    strdef name
    enumDmPpNc = -1
    enumPpRole = -1
    
    double isMechVarTypeInhom[1][1]     // 0/1 flags
    // !! would it make sense to create these MechanismStandard-s without 2nd ctor arg and get rid of 2nd dimension in this array?
    objref mechStds[1][1]
    double isMechDirty[1]               // 0/1 flags
    
    objref this
    
    
    proc init() { local numArg, numMechs, mechIdx, varType, varTypeIdx localobj impRedObj, actFirstPp, mechStd, nil
        strdef actPpName, thisPpName
        
        numArg = numarg()
        if (numArg == 1) {
            // Load data from the imported reduced template (part 1)
            impRedObj = $o1
            name = impRedObj.name
            enumPpRole = impRedObj.enumPpRole
        } else if (numArg == 2) {
            name = $s1
            enumPpRole = $2
        } else {
            codeContractViolation()
        }
        
        enumDmPpNc = 1
        
        numMechs = mth.getNumMechs(enumDmPpNc)
        
        double isMechVarTypeInhom[numMechs][3]  // 0/1 flags
        objref mechStds[numMechs][3]            // 0: "PARAMETER", 1: "ASSIGNED", 2: "STATE"
        double isMechDirty[numMechs]            // 0/1 flags
        
        synGroup.getPpNameOrEmpty(enumPpRole, actPpName)
        actFirstPp = smAllSyns.o(0).getPointProcess(enumPpRole)
        
        for mechIdx = 0, numMechs - 1 {
            mth.getMechName(1, mechIdx, thisPpName)
            
            for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
                mechStd = new MechanismStandard(thisPpName, varType)
                
                if (stringsEqual(thisPpName, actPpName)) {
                    // It's a code contract that all the syns have homogeneous PP-s at the time of new SynPPComp-s construction
                    // (but this does not apply to "start with nano" mode)
                    mechStd.in(actFirstPp)
                }
                
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                mechStds[mechIdx][varTypeIdx] = mechStd
            }
        }
        
        // !! search for inhomogeneities in the vars
        
        if (impRedObj == nil) {
            return
        }
        
        // Load data from the imported reduced template (part 2)
        
        mechIdx = impRedObj.mechIdx
        for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
            varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
            mechStd = impRedObj.mechStds[mechIdx][varTypeIdx]
            if (mechStd != nil) {
                mechStds[mechIdx][varTypeIdx] = mechStd     // Replacing it just to have NaN-s for all inhom vars
                mcu.setOneIfNeededIn_isMechVarTypeInhom(this, mechIdx, varType)
            }
        }
    }
    
    // !! code dupl. with MechComp
    func isMechVarInhom() { local mechIdx, varType, arrayIndex, varTypeIdx
        strdef varName
        mechIdx = $1
        varType = $2
        varName = $s3
        arrayIndex = $4
        if (varType == -1) {    // -1: "GLOBAL"
            return 0
        }
        varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
        return math.isNaN(mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex))
    }
    
    // !! mostly code dupl. with MechComp
    // !! it would be better to move this to MechTypeHelper
    proc prepareVarsEditorHeader() { local mechIdx, varType
        strdef varTypeName, mechName
        
        mechIdx = $1
        varType = $2
        
        mth.getMechName(1, mechIdx, mechName)
        mth.getVarTypeName(varType, varTypeName)
        sprint($s3, "%s in %s (all %s variables):", mechName, name, varTypeName)
    }
    
    proc getDistRange() {
        synGroup.getDistRange(&$&1, &$&2)
    }
    
    obfunc getSecList() {
        return synGroup.getSecList()
    }
    
    proc markMechDirty() { local mechIdx
        mechIdx = $1
        isMechDirty[mechIdx] = 1
    }
    
    proc updateStatsCurve() { local yMin, yMax, varType, arraySize, arrayIndex, y localobj graph, nil, mechStd, syn, pp
        strdef mechName, varName, actPpName
        
        graph = $o1
        yMin = $&2
        yMax = $&3
        mechName = $s4
        varType = $5
        varName = $s6
        arraySize = $7  // Just a placeholder
        arrayIndex = $8
        
        synGroup.getPpNameOrEmpty(enumPpRole, actPpName)
        if (!stringsEqual(actPpName, mechName)) {
            // The actual synapses don't have PPs with this role or use different PPs
            return
        }
        
        mechStd = new MechanismStandard(mechName, varType)
        
        for synGroup.updateStatsCurveIter(syn, graph, &y, &yMin, &yMax) {
            pp = syn.getPointProcess(enumPpRole)
            mechStd.in(pp)
            y = mechStd.get(varName, arrayIndex)
        }
        
        $&2 = yMin
        $&3 = yMax
    }
    
    proc updateVerbatimModelCurve() {
        // It's a code contract that all the syns have homogeneous PP-s at the time of new SynPPComp-s construction
        codeContractViolation()
    }
    
    // Keep in sync with ReducedSynPPComp2.applyInhomogeneity
    proc applyInhomogeneity() { local varType, arraySize, arrayIndex, y localobj distFuncHelper, mechStd, syn, thisPp
        strdef mechName, varName
        
        mechName = $s1
        varType = $2
        varName = $s3
        arraySize = $4  // Just a placeholder
        arrayIndex = $5
        distFuncHelper = $o6
        
        if (varType == -1) {    // -1: "GLOBAL"
            codeContractViolation()
        }
        
        mechStd = new MechanismStandard(mechName, varType)
        
        for synGroup.applyInhomogeneityIter(syn, distFuncHelper) {
            thisPp = syn.getPointProcess(enumPpRole)
            mechStd.in(thisPp)
            y = distFuncHelper.calculateAt(syn.dist)
            // !! BUG: "variable_domain" used in "MechanismStandard.panel()" is ignored in "MechanismStandard.set()" and "MechanismStandard.out()",
            //      so we can use any invalid value here without even a warning
            mechStd.set(varName, y, arrayIndex)
            mechStd.out(thisPp)
        }
    }
    
    func isAnyVarInhom() { local mechIdx
        mechIdx = $1
        return synGroup.isAnyVarInhom(this, mechIdx)
    }
    
endtemplate SynPPComp
