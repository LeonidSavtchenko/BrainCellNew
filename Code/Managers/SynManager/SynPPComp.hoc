
begintemplate SynPPComp

    public name, isMechVarTypeInhom, mechStds
    public isMechVarInhom, prepareMechPanelHeader, getDistRange, getSecList, updateStatsCurve
    
    external mth, math, mwh
    external synGroup
    
    strdef name
    
    double isMechVarTypeInhom[1][1]     // 0/1 flags
    // !! would it make sense to create these MechanismStandard-s without 2nd ctor arg and get rid of 2nd dimension in this array?
    objref mechStds[1][1]
    
    
    proc init() { local numMechs, mechIdx, varType, varTypeIdx localobj mechStd
        strdef mechName
        
        name = $s1
        
        numMechs = mth.getNumMechs(1)
        
        double isMechVarTypeInhom[numMechs][3]  // 0/1 flags
        objref mechStds[numMechs][3]            // 0: "PARAMETER", 1: "ASSIGNED", 2: "STATE"
        
        for mechIdx = 0, numMechs - 1 {
            mth.getMechName(1, mechIdx, mechName)
            
            for varType = 1, 3 {    // 1: "PARAMETER", 2: "ASSIGNED", 3: "STATE"
                mechStd = new MechanismStandard(mechName, varType)
                
                // !! mechStd.in(firstPP)
                
                varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
                mechStds[mechIdx][varTypeIdx] = mechStd
            }
        }
    }
    
    // !! code dupl. with MechComp
    func isMechVarInhom() { local mechIdx, varTypeIdx, arrayIndex
        strdef varName
        mechIdx = $1
        varTypeIdx = $2
        varName = $s3
        arrayIndex = $4
        return math.isNaN(mechStds[mechIdx][varTypeIdx].get(varName, arrayIndex))
    }
    
    // !! mostly code dupl. with MechComp
    // !! it would be better to move this to MechTypeHelper
    proc prepareMechPanelHeader() { local mechIdx, varType
        strdef varTypeName, mechName
        
        mechIdx = $1
        varType = $2
        
        mth.getMechName(1, mechIdx, mechName)
        mth.getVarTypeName(varType, varTypeName)
        sprint($s3, "%s in %s (all %s variables)", mechName, name, varTypeName)
    }
    
    proc getDistRange() {
        synGroup.getDistRange(&$&1, &$&2)
    }
    
    obfunc getSecList() {
        return synGroup.getSecList()
    }
    
    proc updateStatsCurve() { local yMin, yMax, varType, arrayIndex localobj graph
        strdef mechName, varName
        
        graph = $o1
        yMin = $&2
        yMax = $&3
        mechName = $s4
        varType = $5
        varName = $s6
        arrayIndex = $7
        
        mwh.showNotImplementedWarning()
    }
    
endtemplate SynPPComp
