
begintemplate SynLocationWidget

    public show, getSynLocName, dismissHandler
    
    external synGroup
    external createEmptyPanel, unmapIfNotNil, codeContractViolation
    
    objref mainBox, deck
    
    enumSynLoc = -1
    p = -1
    isReviewAfterApply = -1
    
    pMin = -1
    pMax = -1
    
    
    proc init() {
        // !! take it from the top level (SynapseLocationDendrite)
        enumSynLoc = 0      // 0: "Spine Head", 1: "Dendrite (just under Spine Neck)", 2: "Random"
        
        p = 0.5
        
        isReviewAfterApply = 0
        
        pMin = 0
        pMax = 1
        
        variable_domain(&p, pMin, pMax)
    }
    
    proc show() { local synLocIdx
        strdef synLocName, handlerHocCommand, text
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("Synapse location:")
            for synLocIdx = 0, 2 {
                getSynLocName(synLocName, synLocIdx)
                sprint(handlerHocCommand, "synLocChangedHandler(%d)", synLocIdx)
                xradiobutton(synLocName, handlerHocCommand, enumSynLoc == synLocIdx)
            }
            xpanel()
            deck = new Deck()
            deck.intercept(1)
            {
                createEmptyPanel()
                xpanel("")
                xlabel("Bernoulli distribution:")
                for synLocIdx = 0, 1 {
                    getSynLocName(synLocName, synLocIdx)
                    sprint(text, "p = %d means \"all on %s\"", synLocIdx, synLocName)
                    xlabel(text)
                }
                xpvalue("p", &p, 1)
                xslider(&p, pMin, pMax)
                xpanel()
            }
            deck.intercept(0)
            // deck.flip_to(*)     // Will be done below in synLocChangedHandler
            deck.map()
            xpanel("")
            xlabel("")
            xbutton("Apply", "applyHandler()")
            xlabel("")
            xcheckbox("Review after \"Apply\"", &isReviewAfterApply)
            xlabel("       (this will open a new \"PointBrowser\")")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Synapse location", 610, 65, -1, -1)
        
        synLocChangedHandler(enumSynLoc)
    }
    
    proc getSynLocName() { local numArg, synLocIdx
        numArg = numarg()
        
        if (numArg == 1) {
            synLocIdx = enumSynLoc
        } else if (numArg == 2) {
            synLocIdx = $2
        } else {
            codeContractViolation()
        }
        
        if (synLocIdx == 0) {
            $s1 = "Spine Head"
        } else if (synLocIdx == 1) {
            $s1 = "Dendrite (just under Spine Neck)"
        } else if (synLocIdx == 2) {
            $s1 = "Random"
        } else {
            codeContractViolation()
        }
    }
    
    proc dismissHandler() {
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    proc synLocChangedHandler() { local cardIdx
        enumSynLoc = $1
        cardIdx = (enumSynLoc == 2)
        deck.flip_to(cardIdx)
    }
    
    proc applyHandler() {
        synGroup.applyChangesToLoc(enumSynLoc, p, isReviewAfterApply)
        isReviewAfterApply = 0
        dismissHandler()
    }
    
endtemplate SynLocationWidget

objref slw
slw = new SynLocationWidget()
