
begintemplate SpineNeckDiamCache

    public cacheAllDiams, getCachedDiam
    public diamsVec
    
    external isAstrocyteOrNeuron, nanoProximal_ref
    external codeContractViolation
    
    objref diamsVec
    
    
    proc init() {
        diamsVec = new Vector()
    }
    
    proc cacheAllDiams() { local numSpines, spineIdx
        if (isAstrocyteOrNeuron) {
            codeContractViolation()
        }
        numSpines = nanoProximal_ref.count()
        diamsVec.resize(numSpines)
        for spineIdx = 0, numSpines - 1 {
            nanoProximal_ref.o(spineIdx).sec {
                if (diam == 0) {
                    codeContractViolation()
                }
                diamsVec.x(spineIdx) = diam
            }
        }
    }
    
    func getCachedDiam() { local spineIdx
        spineIdx = $1
        return diamsVec.x(spineIdx)
    }
    
endtemplate SpineNeckDiamCache

objref spineNeckDiamCache
spineNeckDiamCache = new SpineNeckDiamCache()
