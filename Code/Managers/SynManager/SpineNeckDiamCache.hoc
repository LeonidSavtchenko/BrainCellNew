
begintemplate SpineNeckDiamCache

    public cacheAllDiams, getCachedDiam
    
    external isAstrocyteOrNeuron, nanoProximal_ref
    external codeContractViolation
    external isScheduledCachingOfSpineNeckDiams
    
    double diams[1]
    
    
    proc cacheAllDiams() { local numSpines, spineIdx
        if (isAstrocyteOrNeuron) {
            codeContractViolation()
        }
        numSpines = nanoProximal_ref.count()
        double diams[numSpines]
        for spineIdx = 0, numSpines - 1 {
            nanoProximal_ref.o(spineIdx).sec {
                if (diam == 0) {
                    codeContractViolation()
                }
                diams[spineIdx] = diam
            }
        }
        isScheduledCachingOfSpineNeckDiams = 0
    }
    
    func getCachedDiam() { local spineIdx
        spineIdx = $1
        return diams[spineIdx]
    }
    
endtemplate SpineNeckDiamCache

objref spineNeckDiamCache
spineNeckDiamCache = new SpineNeckDiamCache()
