
// https://www.neuron.yale.edu/neuron/static/new_doc/programming/math/random.html#Random.weibull
// https://www.mathworks.com/help/stats/weibull-distribution.html
// https://en.wikipedia.org/wiki/Weibull_distribution

begintemplate WeibullDistHelper

    public addParamsToPanel, calcPdf, calcCdf, getMean, getStdDev, firstDice
    
    external math, specMath
    
    objref parentWidget
    
    k = -1
    lambda = -1
    
    
    proc init() { local inf
        parentWidget = $o1
        
        k = 2.5
        lambda = 3.5
        
        inf = math.inf
        variable_domain(&k, 0.1, inf)
        variable_domain(&lambda, float_epsilon, inf)
    }
    
    proc addParamsToPanel() {
        xpvalue("k", &k, 1, "parentWidget.valueChangedHandler()")
        xpvalue("lambda", &lambda, 1, "parentWidget.valueChangedHandler()")
    }
    
    func calcPdf() { local x, xDivLambda, y
        x = $1
        
        if (x > 0) {
            xDivLambda = x / lambda
            y = k / lambda * xDivLambda ^ (k - 1) * exp(-xDivLambda ^ k)
        } else if (x < 0){
            y = 0
        } else {
            if (k > 1) {
                y = 0
            } else if (k == 0) {
                y = 1 / lambda
            } else {
                // https://www.wolframalpha.com/input?i=lim+k+%2F+lambda+*+%28x%2Flambda%29+%5E+%28k+-+1%29+*+exp%28-%28x%2Flambda%29+%5E+k%29+as+x-%3E0%2B
                y = math.inf
            }
        }
        
        return y
    }
    
    func calcCdf() { local x, y
        x = $1
        
        if (x >= 0) {
            y = 1 - exp(-(x / lambda) ^ k)
        } else {
            y = 0
        }
        
        return y
    }
    
    func getMean() {
        return lambda * specMath.gamma(1 + 1 / k)
    }
    
    func getStdDev() {
        return lambda * sqrt(specMath.gamma(1 + 2 / k) - specMath.gamma(1 + 1 / k) ^ 2)
    }
    
    func firstDice() { local alpha, beta localobj rng
        rng = $o1
        
        alpha = k
        beta = lambda ^ k
        return rng.weibull(alpha, beta)     // !!! cannot achieve mean = 0
    }
    
endtemplate WeibullDistHelper
