
// This widget has one major cons compared to MechanismStandard.panel():
// the variable domains are not checked for variables anymore

begintemplate VarsEditorWidget

    public show, onApplyInInhomEditor, onApplyOrDisableInStochEditor, dismissHandler
    public compIdx
    
<<<<<<< HEAD
    external mwh, math, mth, mcu, compUtils, sbh4ve, inhomAndStochLibrary, seh
=======
    external mwh, math, mth, mcu, sbh4ve, inhomAndStochLibrary, seh
>>>>>>> 079650c00928b3fba5c5e710974d74a050fd1bca
    external createElasticSpacer, createEmptyPanel, dismissIfNotNil, codeContractViolation
    
    objref mainBox
    objref mechStd, buffer, isMechVarInhom, isMechVarStoch
    
    enumDmPpNc = -1
    compIdx = -1
    objref comp
    mechIdx = -1
    strdef mechName
    varType = -1
    varTypeIdx = -1
    
    slotHeight = -1
    
    objref subWidget
    
    
    proc init() { local isMechOrSynEditor, numMechVars, varIdx, arraySize, arrayIndex, isInhom, isStoch localobj inhomFlagsVec, stochFlagsVec
        strdef varName
        
        enumDmPpNc = $1
        compIdx = $2
        mechIdx = $3
        varType = $4
        
        if (varType == -1) {    // GLOBAL
            codeContractViolation()
        }
        
        mth.getMechName(enumDmPpNc, mechIdx, mechName)
        
        isMechOrSynEditor = (enumDmPpNc == 0)
        comp = compUtils.getComp(isMechOrSynEditor, compIdx)
        
        varTypeIdx = mth.convertVarTypeToVarTypeIdx(varType)
        
        mechStd = comp.mechStds[mechIdx][varTypeIdx]
        
        mechStdToBuffer()
        
        numMechVars = mechStd.count()
        isMechVarInhom = new List()
        isMechVarStoch = new List()
        for varIdx = 0, numMechVars - 1 {
            arraySize = mth.getVarNameAndArraySize(enumDmPpNc, mechIdx, varType, varIdx, varName)
            inhomFlagsVec = new Vector(arraySize)
            stochFlagsVec = new Vector(arraySize)
            for arrayIndex = 0, arraySize - 1 {
                isInhom = comp.isMechVarInhom(mechIdx, varTypeIdx, varName, arrayIndex)
                inhomFlagsVec.x(arrayIndex) = isInhom
                isStoch = inhomAndStochLibrary.isStochEnabledFor(enumDmPpNc, compIdx, mechIdx, varType, varIdx, arrayIndex)
                stochFlagsVec.x(arrayIndex) = isStoch
            }
            isMechVarInhom.append(inhomFlagsVec)
            isMechVarStoch.append(stochFlagsVec)
        }
        
        slotHeight = 31
    }
    
    proc show() { local isAnyNaN, isAnyMeta, varIdx, arraySize, arrayIndex, isThisNaN localobj vec, hBox, vBox1, vBox2, vBox3
        strdef header, varName, varNameWithIndex, varNameWithIndexAndUnits, handlerHocCommand
        
        mainBox = new VBox(3, 1)
        mainBox.intercept(1)
        {
            xpanel("")
            comp.prepareVarsEditorHeader(mechIdx, varType, header)
            xlabel(header)
            xpanel()
            isAnyNaN = 0
            isAnyMeta = 0
            for varIdx = 0, buffer.count() - 1 {
                arraySize = mth.getVarNameAndArraySize(enumDmPpNc, mechIdx, varType, varIdx, varName)
                if (mcu.isMetaVar(varName)) {
                    isAnyMeta = 1
                }
                vec = buffer.o(varIdx)
                for arrayIndex = 0, arraySize - 1 {
                    mth.getVarNameWithIndexAndUnits(enumDmPpNc, mechIdx, varName, arraySize, arrayIndex, varNameWithIndexAndUnits, varNameWithIndex)
                    isThisNaN = math.isNaN(vec.x(arrayIndex))
                    
                    hBox = new HBox()
                    hBox.intercept(1)
                    {
                        vBox1 = new VBox()
                        vBox1.intercept(1)
                        {
                            xpanel("")
                            // Unfortunately, we cannot set the "boolean_deflt" arg to 1 when showing "nan" because it would cause "undefined variable nan" error
                            // (the same error as for MechanismStandard.panel())
                            sprint(handlerHocCommand, "editHomogenVarHandler(%d, %d)", varIdx, arrayIndex)
                            xpvalue(varNameWithIndexAndUnits, &vec.x(arrayIndex), !isThisNaN, handlerHocCommand)
                            xpanel()
                        }
                        vBox1.intercept(0)
                        vBox1.map("", 0, 0, 255, slotHeight)    // The width was chosen to fit cadifus -> PARAMETER
                        vBox2 = new VBox()
                        vBox2.intercept(1)
                        {
                            xpanel("")
                            sprint(handlerHocCommand, "defineDistFuncHandler(%d, %d)", varIdx, arrayIndex)
                            xstatebutton("Define as func(dist)", &isMechVarInhom.o(varIdx).x(arrayIndex), handlerHocCommand)
                            xpanel()
                        }
                        vBox2.intercept(0)
                        vBox2.map("", 0, 0, 121, slotHeight)
                        vBox3 = new VBox()
                        vBox3.intercept(1)
                        {
                            if (!sbh4ve.isHideStochButton(mechName, varNameWithIndex)) {
                                xpanel("")
                                sprint(handlerHocCommand, "defineStochFuncHandler(%d, %d)", varIdx, arrayIndex)
                                xstatebutton("Define stoch model", &isMechVarStoch.o(varIdx).x(arrayIndex), handlerHocCommand)
                                xpanel()
                            } else {
                                createElasticSpacer()
                            }
                        }
                        vBox3.intercept(0)
                        vBox3.map("", 0, 0, 122, slotHeight)
                    }
                    hBox.intercept(0)
                    hBox.map()
                    
                    isAnyNaN = isAnyNaN || isThisNaN
                }
            }
            xpanel("")              // Without this, the last var gets cropped sometimes
            if (isAnyMeta) {
                xlabel("* \"@\" means a meta variable; it's not a part of the standard \"NetCon\" class,")
                xlabel("   but rather used by our program to filter events emitted by \"NetCon\"-s")
            }
            if (isAnyNaN) {
                xlabel("* \"nan\" means \"inhomogeneous\";")
                xlabel("   to make it homogeneous, replace \"nan\" with a number, press \"Enter\" and click \"Apply\" in the parent widget")
            }
            xpanel()
            if (isAnyMeta || isAnyNaN) {
                createEmptyPanel()  // Without this, the "nan" hint gets cropped sometimes
            }
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Edit variables", 435, 100, -1, -1)
    }
    
    proc onApplyInInhomEditor() { local varIdx, arrayIndex, isInhom localobj vec
        strdef varName
        
        varIdx = $1
        arrayIndex = $2
        isInhom = $3
        
        vec = isMechVarInhom.o(varIdx)
        if (isInhom && vec.x(arrayIndex)) {
            return
        }
        
        mechStd.name(varName, varIdx)
        buffer.o(varIdx).x(arrayIndex) = mechStd.get(varName, arrayIndex)
        if (!isInhom && !vec.x(arrayIndex)) {
            return
        }
        
        vec.x(arrayIndex) = isInhom
        mainBox.unmap()     // !! annoying blinking
        show()              //
    }
    
    proc onApplyOrDisableInStochEditor() { local varIdx, arrayIndex, isStoch
        varIdx = $1
        arrayIndex = $2
        isStoch = $3
        isMechVarStoch.o(varIdx).x(arrayIndex) = isStoch
    }
    
    proc dismissHandler() { localobj nil
        dismissChild()
        if (mainBox != nil) {
            if (mainBox.ismapped()) {
                bufferToMechStd()
                mainBox.unmap()
            }
        }
    }
    
    // All next proc-s are private
    
    
    proc editHomogenVarHandler() { local varIdx, arrayIndex, value
        strdef varName
        
        // !! BUG: If user enters the editbox with "nan" and just leaves it without changing anything,
        //         then "undefined variable nan" error is printed to console and the var gets reset to its default value.
        //         (All this happens before we even get here.)
        
        varIdx = $1
        arrayIndex = $2
        
        value = buffer.o(varIdx).x(arrayIndex)
        
        if (!math.isNaN(value)) {
            isMechVarInhom.o(varIdx).x(arrayIndex) = 0
            
            mth.getVarNameAndArraySize(enumDmPpNc, mechIdx, varType, varIdx, varName)
            seh.ifMetaVarThenUpdateStatus(varName, value)
        }
        
        comp.markMechDirty(mechIdx)
        dismissChild()
    }
    
    proc defineDistFuncHandler() { local varIdx, arrayIndex
        varIdx = $1
        arrayIndex = $2
        defineSmthCommonHandler(isMechVarInhom, varIdx, arrayIndex)
        subWidget = mcu.defineDistFuncHandler(enumDmPpNc, compIdx, mechIdx, varType, varIdx, arrayIndex)
    }
    
    proc defineStochFuncHandler() { local varIdx, arrayIndex
        varIdx = $1
        arrayIndex = $2
        defineSmthCommonHandler(isMechVarStoch, varIdx, arrayIndex)
        subWidget = mcu.defineStochFuncHandler(enumDmPpNc, compIdx, mechIdx, varType, varIdx, arrayIndex)
    }
    
    proc defineSmthCommonHandler() { local varIdx, arrayIndex localobj isMechVarSmth
        isMechVarSmth = $o1
        varIdx = $2
        arrayIndex = $3
        
        // Compensating the effect of this click
        isMechVarSmth.o(varIdx).x(arrayIndex) = 1 - isMechVarSmth.o(varIdx).x(arrayIndex)
        doNotify()  // Without this, user will notice one quick blink of the "LED"
        
        bufferToMechStd()
        
        dismissChild()
    }
    
    // Prepare a buffer with values that will be bound to xpvalue-s
    // (just because we cannot bound the internal values from MechanismStandard object to xpvalue-s directly)
    proc mechStdToBuffer() { local varIdx, arraySize, arrayIndex localobj vec
        strdef varName
        
        buffer = new List()
        for varIdx = 0, mechStd.count() - 1 {
            arraySize = mechStd.name(varName, varIdx)
            vec = new Vector(arraySize)
            for arrayIndex = 0, arraySize - 1 {
                vec.x(arrayIndex) = mechStd.get(varName, arrayIndex)
            }
            buffer.append(vec)
        }
    }
    
    proc bufferToMechStd() { local isAnyInhom, varIdx, arraySize, arrayIndex, value localobj vec
        strdef varName
        
        isAnyInhom = 0
        for varIdx = 0, buffer.count() - 1 {
            vec = buffer.o(varIdx)
            arraySize = mechStd.name(varName, varIdx)
            for arrayIndex = 0, arraySize - 1 {
                value = vec.x(arrayIndex)
                mechStd.set(varName, value, arrayIndex)
                if (math.isNaN(value)) {
                    isAnyInhom = 1
                }
            }
        }
        
        comp.isMechVarTypeInhom[mechIdx][varTypeIdx] = isAnyInhom
    }
    
    proc dismissChild() {
        dismissIfNotNil(subWidget)
    }
    
endtemplate VarsEditorWidget
