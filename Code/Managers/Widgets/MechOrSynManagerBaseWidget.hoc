
{ load_file("../../Core/Widgets/alt_stdrun.hoc") }
{ load_file("../../Core/Widgets/AltRunControlWidget.hoc") }


isScheduledRescanningOfDistMechs = 0
isScheduledCachingOfSpineNeckDiams = 0

begintemplate MechOrSynManagerBaseWidget

    public show, showMechManagerHandler, showSynManagerHandler, showAltRunControlHandler, onNanoReseedOrUpdateHandler, dismissHandler
    public synManagerMainWidget
    
    external mmAllComps, smAllSyns, synGroup
    external mwh, spineNeckDiamCache
    external dismissIfNotNil
    external isScheduledRescanningOfDistMechs, isScheduledCachingOfSpineNeckDiams
    
    objref mainBox, this
    objref mechManagerMainWidget, synManagerMainWidget, altRunControlWidget
    
    isMechOrSyn = -1
    
    
    proc init() {
        isMechOrSyn = $1
    }
    
    proc show() {
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            if (isMechOrSyn) {
                xbutton("Show Mech Manager", "showMechManagerHandler()")
            } else {
                xbutton("Show Syn Manager", "showSynManagerHandler()")
            }
            xbutton("Show Alt Run Control", "showAltRunControlHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Base widget", 25, 575, -1, -1)
    }
    
    proc showMechManagerHandler() { localobj nil
        dismissIfNotNil(mechManagerMainWidget)
        
        if (mmAllComps.count() == 0) {
            mwh.showWarningBox("Cannot open the manager of distributed mechanisms because there are no compartments.")
            return
        }
        
        if (mechManagerMainWidget == nil) {
            execute("mechManagerMainWidget = new MechManagerMainWidget()", this)
        }
        mechManagerMainWidget.show()
        if (isScheduledRescanningOfDistMechs) {
            mechManagerMainWidget.rescanHandler()
        }
        mechManagerMainWidget.mechOpSelectHandler()
    }
    
    proc showSynManagerHandler() { local isDisconnected, xMin, xMax localobj nil
        dismissIfNotNil(synManagerMainWidget)
        
        if (smAllSyns.count() == 0) {
            mwh.showWarningBox("Cannot open the manager of synapses because there are no synapses.")
            return
        }
        
        if (synManagerMainWidget == nil) {
            execute("synManagerMainWidget = new SynManagerMainWidget()", this)
        }
        
        isDisconnected = synGroup.getDistRange(&xMin, &xMax)
        if (isDisconnected) {
            mwh.showWarningBox("Cannot edit inhomogeneity in synapses", "because at least one synapse target section doesn't have a topological connection with the distance centre.")
            
            // !! overkill here: we don't need to prevent opening the widget because user might wanted to do smth unrelated to inhomogeneity
            return
        }
        
        if (isScheduledCachingOfSpineNeckDiams) {
            spineNeckDiamCache.cacheAllDiams()
        }
        synManagerMainWidget.show(xMin, xMax)
    }
    
    proc showAltRunControlHandler() {
        dismissIfNotNil(altRunControlWidget)
        altRunControlWidget = new AltRunControlWidget()
        altRunControlWidget.show()
    }
    
    proc onNanoReseedOrUpdateHandler() {
        dismissManagers()
        isScheduledRescanningOfDistMechs = 1    // !! for higher performance, it would be better to rescan only nanogeometry
        isScheduledCachingOfSpineNeckDiams = 1
    }
    
    proc dismissHandler() {
        dismissManagers()
        dismissIfNotNil(altRunControlWidget)
        mainBox.unmap()
    }
    
    // All next staff is private
    
    
    proc dismissManagers() {
        dismissIfNotNil(mechManagerMainWidget)
        dismissIfNotNil(synManagerMainWidget)
    }
    
endtemplate MechOrSynManagerBaseWidget
