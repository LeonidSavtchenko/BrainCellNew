
userDefinedHocDistFuncResult = -1   // !! get rid of this: the user function must assign value to a public scalar living in the template below

begintemplate DistFuncGroupsBDHelper

    public selectedHandler, calculateAt, onNewSection, dismissHandler
    public parentWidget, isSkipOneSelect
    public modelIdx     // For DistFuncGroupCHelper
    
    external definePythonFunction, callPythonFunction, codeContractViolation, printMsgAndRaiseError
    external userDefinedHocDistFuncResult
    
    objref parentWidget, this
    
    modelIdx = -1
    strdef oneLinerHocDistFuncName, oneLinerHocDistFuncBody
    strdef oneLinerPyDistFuncName, oneLinerPyDistFuncBody
    strdef userDefinedHocDistFuncName, userDefinedPyDistFuncName
    
    isSkipOneSelect = -1
    
    
    proc init() {
        modelIdx = $1
        parentWidget = $o2  // !! not used
        
        if (modelIdx < 0 || modelIdx > 3) {
            codeContractViolation()
        }
        
        oneLinerHocDistFuncName = "mechManagerOneLinerHocDistFunc"
        oneLinerHocDistFuncBody = "x/10 + 50*sin(2*PI*x/200) * tanh(x/100)"
        
        oneLinerPyDistFuncName = "mechManagerOneLinerPyDistFunc"
        oneLinerPyDistFuncBody = "x/10 + 50*sin(2*pi*x/200) * tanh(x/100)"
        
        userDefinedHocDistFuncName = "myDistFunc"
        userDefinedPyDistFuncName = "myDistFunc"
        
        isSkipOneSelect = 0
    }
    
    func selectedHandler() { local numArg, isJustLoaded, isAccept
        strdef hocCommand, hint1, hint2, text
        
        if (isSkipOneSelect) {
            isSkipOneSelect = 0
            return 0
        }
        
        numArg = numarg()
        if (numArg == 0) {
            isJustLoaded = 0
        } else if (numArg == 1) {
            isJustLoaded = $1
        } else {
            codeContractViolation()
        }
        
        hint1 = " The expression must depend on \"x\"."
        if (!isJustLoaded) {
            hint2 = " (We assume you've defined the function in console manually or loaded from file.)"
        } else {
            hint2 = ""
        }
        
        if (modelIdx == 0) {
            sprint(text, "Enter HOC expression (one-liner).%s", hint1)
            isAccept = string_dialog(text, oneLinerHocDistFuncBody)
            if (!isAccept) {
                return 1
            }
            defineHocFunction(oneLinerHocDistFuncName, oneLinerHocDistFuncBody)
        } else if (modelIdx == 1) {
            sprint(text, "Enter Python expression (one-liner).%s We've done \"from math import *\" for you.", hint1)
            isAccept = string_dialog(text, oneLinerPyDistFuncBody)
            if (!isAccept) {
                return 1
            }
            definePythonFunction(oneLinerPyDistFuncName, oneLinerPyDistFuncBody)
        } else if (modelIdx == 2) {
            sprint(text, "Enter name of your HOC function. $1 is x, return is y.%s", hint2)
            isAccept = string_dialog(text, userDefinedHocDistFuncName)
            if (!isAccept) {
                return 1
            }
        } else if (modelIdx == 3) {
            sprint(text, "Enter name of your Python function. The input argument is x, return is y.%s", hint2)
            isAccept = string_dialog(text, userDefinedPyDistFuncName)
            if (!isAccept) {
                return 1
            }
        } else {
            codeContractViolation()
        }
        
        return 0
    }
    
    func calculateAt() { local x
        x = $1
        
        if (modelIdx == 0) {
            return mechManagerOneLinerHocDistFunc(x)
        } else if (modelIdx == 1) {
            return callPythonFunction(oneLinerPyDistFuncName, x)
        } else if (modelIdx == 2) {
            return callUserDefinedHocDistFunc(userDefinedHocDistFuncName, x)
        } else if (modelIdx == 3) {
            return callPythonFunction(userDefinedPyDistFuncName, x)
        } else {
            codeContractViolation()
        }
    }
    
    proc onNewSection() {
        // Nothing here
    }
    
    proc dismissHandler() {
        // Nothing here
    }
    
    
    // All next proc-s are private
    
    func mechManagerOneLinerHocDistFunc() { codeContractViolation() }
    
    proc defineHocFunction() { local isSuccess
        strdef oneLinerHocDistFuncName, oneLinerHocDistFuncBody, hocCommand
        
        oneLinerHocDistFuncName = $s1
        oneLinerHocDistFuncBody = $s2
        
        sprint(hocCommand, "func %s() { local x\nx = $1\nreturn %s }", oneLinerHocDistFuncName, oneLinerHocDistFuncBody)
        isSuccess = execute1(hocCommand, this)
        // !! BUG: something is wrong with error hendling here, e.g. user can enter "1x" and get no error
        if (!isSuccess) {
            printMsgAndRaiseError("Failed to define the function. Please check the syntax.")
        }
    }
    
    func callUserDefinedHocDistFunc() { local x
        strdef userDefinedHocDistFuncName, hocCommand
        
        userDefinedHocDistFuncName = $s1
        x = $2
        
        // !! 1. invent a better way to pass x without "sprint" (maybe from Python accessing hocObj.x)
        // !! 2. the result must be assigned to a public scalar living in this template (just for encapsulation)
        sprint(hocCommand, "userDefinedHocDistFuncResult = %s(%.15e)", userDefinedHocDistFuncName, x)
        execute(hocCommand)
        
        return userDefinedHocDistFuncResult
    }
    
endtemplate DistFuncGroupsBDHelper
