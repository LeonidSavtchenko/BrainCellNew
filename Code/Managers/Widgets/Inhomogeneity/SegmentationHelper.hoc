
begintemplate SegmentationHelper

    public recalculateFactors, subdivideSection
    public segmentationMode, total_nseg, min_nseg
    
    external codeContractViolation
    
    // init-ed
    distRange = -1
    
    // UI
    segmentationMode = -1
    total_nseg = -1
    min_nseg = -1
    
    // Calculated factors
    factorMode1 = -1
    factorMode2 = -1
    
    
    proc init() {
        distRange = $1
        
        if (distRange == 0) {
            codeContractViolation()
        }
        
        // Defaults
        segmentationMode = 1     // !! set the default to 2 once implemented
        total_nseg = 30
        min_nseg = 5
        
        recalculateFactors()
    }
    
    proc recalculateFactors() {
        factorMode1 = total_nseg / distRange
        factorMode2 = calculateFactorMode2()
    }
    
    proc subdivideSection() { local new_nseg, meanAbsDer
        if (segmentationMode == 0) {
            return
        } else if (segmentationMode == 1) {
            new_nseg = int(factorMode1 * L)            // !! this rounds towards 0; maybe it would be better to round towards the nearest integer
        } else if (segmentationMode == 2) {
            meanAbsDer = calculateMeanAbsDer()
            new_nseg = int(factorMode2 * L * meanAbsDer)    // !! the same comment
        } else {
            codeContractViolation()
        }
        
        if (new_nseg < min_nseg) {
            new_nseg = min_nseg
        }
        
        nseg = new_nseg
    }
    
    
    // All next funcs are private
    
    func calculateFactorMode2() {
        // !! Not implemented
        return factorMode1
    }
    
    func calculateMeanAbsDer() {
        // !! Not implemented
        return 1
    }
    
endtemplate SegmentationHelper
