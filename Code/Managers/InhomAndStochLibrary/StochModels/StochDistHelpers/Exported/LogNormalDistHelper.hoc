
// https://www.neuron.yale.edu/neuron/static/new_doc/programming/math/random.html#Random.lognormal
// https://www.mathworks.com/help/stats/lognormal-distribution.html
// https://en.wikipedia.org/wiki/Log-normal_distribution

begintemplate LogNormalDistHelper

    public addParamsToPanel, calcPdf, calcCdf, getMean, getStdDev, firstDice, exportParams, importParams
    
    external math
    external codeContractViolation
    
    objref parentWidget
    
    mu = -1
    sigma = -1
    
    
    proc init() {
        parentWidget = $o1
        setParams(-1.3, 0.6)
    }
    
    proc addParamsToPanel() {
        xpvalue("mu", &mu, 1, "parentWidget.valueChangedHandler()")
        xpvalue("sigma", &sigma, 1, "parentWidget.valueChangedHandler()")
    }
    
    func calcPdf() { local x, y
        x = $1
        
        if (x > 0) {
            y = 1 / (x * sigma * sqrt(2 * PI)) * exp(-0.5 * ((log(x) - mu) / sigma) ^ 2)
        } else {
            y = 0
        }
        
        return y
    }
    
    func calcCdf() { local x, y
        x = $1
        
        if (x > 0) {
            y = 0.5 * (1 + erf((log(x) - mu) / (sigma * sqrt(2))))
        } else {
            y = 0
        }
        
        return y
    }
    
    func getMean() {
        return exp(mu + 0.5 * sigma ^ 2)
    }
    
    func getStdDev() { local sigmaSq
        sigmaSq = sigma ^ 2
        return sqrt(exp(sigmaSq) - 1) * exp(mu + 0.5 * sigmaSq)
    }
    
    func firstDice() { local mean, sigmaSq, variance localobj rng
        rng = $o1
        
        mean = getMean()
        sigmaSq = sigma ^ 2
        variance = (exp(sigmaSq) - 1) * exp(2 * mu + sigmaSq)   // We don't call getStdDev here for higher precision
        return rng.lognormal(mean, variance)    // !! cannot achieve mean = 0
    }
    
    proc exportParams() { localobj vecOfVals
        vecOfVals = $o1
        
        vecOfVals.resize(2)
        vecOfVals.x(0) = mu
        vecOfVals.x(1) = sigma
    }
    
    proc importParams() { localobj vecOfVals
        vecOfVals = $o1
        
        if (vecOfVals.size() != 2) {
            codeContractViolation()
        }
        setParams(vecOfVals.x(0), vecOfVals.x(1))
    }
    
    // All next staff is private
    
    
    proc setParams() { local inf
        mu = $1
        sigma = $2
        
        inf = math.inf
        variable_domain(&sigma, 1e-5, inf)
    }
    
endtemplate LogNormalDistHelper
