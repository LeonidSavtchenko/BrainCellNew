
// !! if user loads mechanisms dynamically (see neuron.load_mechanisms), then we need to re-create the singleton object

if (isAstrocyteOrNeuron) {
    objref fakeMechType4NC, utils4FakeMech4NC
} else {
    { load_file("SynManager/SynManagerBaseLoads.hoc") }
}

begintemplate MechTypeHelper

    public getMechType, getNumMechs, getMechName, getNumVarTypes, getNumMechVars, doesMechHaveGlobalVars, doesMechHaveNotGlobalVars, getVarNameAndArraySize, getVarTypeName, getVarNameWithIndex, getVarNameWithIndexAndUnits, isDistMechSticky, checkIfInhomogeneityOrStochasticityCannotBeAppliedToThisDistMechVar, convertVarTypeToVarTypeIdx, doesPointProcessRequireSection, isPointProcessAcceptableNetConSource, isPointProcessAcceptableNetConTarget
    
    public morphologyMechIdx, diamVarType
    public extracellularMechName, ionSuffix, diamVarName
    
    external mwh
    external stringsEqual, stringEndsWith, stringEmpty, codeContractViolation
    external fakeMechType4NC, utils4FakeMech4NC
    external isAstrocyteOrNeuron
    
    objref mechTypes[1]
    objref _doesMechHaveGlobalVars[1]
    objref this
    
    // Special mechs and vars
    morphologyMechIdx = -1
    extracellularMechIdx = -1
    diamVarType = -1
    diamVarIdx = -1
    strdef morphologyMechName, extracellularMechName, ionSuffix, diamVarName
    
    
    proc init() { local mechTypeIdx, numMechs, mechIdx, numMechGlobalVars localobj flagsVec
        strdef mechName
        
        objref mechTypes[3]                 // 0: "Distributed Membrane Mechanisms", 1: "Point Processes", 2: "NetCon"
        objref _doesMechHaveGlobalVars[3]   // Array of Vector-s of 0/1 flags
        
        for mechTypeIdx = 0, 1 {    // 0: "Distributed Membrane Mechanisms", 1: "Point Processes"
            mechTypes[mechTypeIdx] = new MechanismType(mechTypeIdx)
            
            // Initialize _doesMechHaveGlobalVars[mechTypeIdx] vector
            numMechs = getNumMechs(mechTypeIdx)
            flagsVec = new Vector(numMechs)     // 0/1 flags
            for mechIdx = 0, numMechs - 1 {
                getMechName(mechTypeIdx, mechIdx, mechName)
                
                numMechGlobalVars = nrnglobalmechmenu(mechName, 0)
                
                // Just another way to do the same:
                // mechStd = new MechanismStandard(mechName, -1)    // -1 means GLOBAL
                // numMechGlobalVars = mechStd.count()
                
                flagsVec.x(mechIdx) = (numMechGlobalVars != 0)
            }
            _doesMechHaveGlobalVars[mechTypeIdx] = flagsVec
        }
        
        if (!isAstrocyteOrNeuron) {
            mechTypeIdx = 2             // 2: "NetCon"
            mechTypes[mechTypeIdx] = fakeMechType4NC
            flagsVec = new Vector(1)
            mechIdx = 0
            numMechGlobalVars = utils4FakeMech4NC.getNumGlobalVars()
            flagsVec.x(mechIdx) = (numMechGlobalVars != 0)
            _doesMechHaveGlobalVars[mechTypeIdx] = flagsVec
        }
        
        // All code below is for Distributed Membrane Mechanisms only
        
        
        // The NEURON code responsible for "Can't uninsert mechanism" and "Not allowed to uninsert ions at this time" warnings:
        //  \nrn-master\src\nrnoc\cabcode.cpp
        
        // This mech is inserted by default and cannot be uninserted
        morphologyMechIdx = 0
        morphologyMechName = "morphology"
        
        // These mechs are not inserted by default, but once inserted, cannot be uninserted anymore
        extracellularMechIdx = 3
        extracellularMechName = "extracellular"
        ionSuffix = "_ion"
        
        // This variable from "morphology" cannot be made inhomogeneous in the same way like others (NEURON restriction)
        diamVarType = 1     // PARAMETER
        diamVarIdx = 0
        diamVarName = "diam"
        
        // Draw user attention if something changed in future NEURON version
        checkDistMechCodeContract(morphologyMechIdx, morphologyMechName)
        checkDistMechCodeContract(extracellularMechIdx, extracellularMechName)
        checkDistVarCodeContract(morphologyMechIdx, diamVarType, diamVarIdx, diamVarName)
    }
    
    obfunc getMechType() { local isLocalOrDist
        isLocalOrDist = $1
        return mechTypes[isLocalOrDist]
    }
    
    func getNumMechs() { local enumDmPpNc
        enumDmPpNc = $1
        return mechTypes[enumDmPpNc].count
    }
    
    proc getMechName() { local enumDmPpNc, mechIdx localobj mechType
        enumDmPpNc = $1
        mechIdx = $2
        mechType = mechTypes[enumDmPpNc]
        mechType.select(mechIdx)
        mechType.selected($s3)
    }
    
    func isDistMechSticky() { local mechIdx
        strdef mechName
        mechIdx = $1
        getMechName(0, mechIdx, mechName)
        // !! it looks like checking for "_ion" suffix is not what NEURON does internally
        return mechIdx == extracellularMechIdx || stringEndsWith(mechName, ionSuffix)
    }
    
    // Next proc-s are "static"
    
    
    func getNumVarTypes() { local enumDmPpNc
        enumDmPpNc = $1
        if (enumDmPpNc == 0 || enumDmPpNc == 1) {
            return 3    // "PARAMETER", "ASSIGNED", "STATE"
        } else if (enumDmPpNc == 2) {
            return 1
        } else {
            codeContractViolation()
        }
    }
    
    func getNumMechVars() { local enumDmPpNc, mechIdx, varType localobj mechStd
        enumDmPpNc = $1
        mechIdx = $2
        varType = $3
        mechStd = createMechStd(enumDmPpNc, mechIdx, varType)
        return mechStd.count()
    }
    
    func doesMechHaveGlobalVars() { local enumDmPpNc, mechIdx
        enumDmPpNc = $1
        mechIdx = $2
        return _doesMechHaveGlobalVars[enumDmPpNc].x(mechIdx)
    }
    
    func doesMechHaveNotGlobalVars() { local enumDmPpNc, mechIdx, varType
        enumDmPpNc = $1
        mechIdx = $2
        varType = $3
        return getNumMechVars(enumDmPpNc, mechIdx, varType) != 0
    }
    
    func getVarNameAndArraySize() { local enumDmPpNc, mechIdx, varType, varIdx localobj mechStd
        enumDmPpNc = $1
        mechIdx = $2
        varType = $3
        varIdx = $4
        mechStd = createMechStd(enumDmPpNc, mechIdx, varType)
        return mechStd.name($s5, varIdx)
    }
    
    proc getVarTypeName() { local varType
        varType = $1
        
        if (varType == -1) {
            $s2 = "GLOBAL"
        } else if (varType == 1) {
            $s2 = "PARAMETER"
        } else if (varType == 2) {
            $s2 = "ASSIGNED"
        } else if (varType == 3) {
            $s2 = "STATE"
        } else {
            codeContractViolation()
        }
    }
    
    proc getVarNameWithIndex() { local arraySize, arrayIndex
        strdef varName
        varName = $s1
        arraySize = $2
        arrayIndex = $3
        if (arraySize == 1) {
            $s4 = varName
        } else {
            sprint($s4, "%s[%d]", varName, arrayIndex)
        }
    }
    
    objref _pointProcess
    strdef _unitsStr
    
    proc getVarNameWithIndexAndUnits() { local numArg, enumDmPpNc, mechIdx, arraySize, arrayIndex localobj nil
        strdef varName, varNameWithIndex, mechName, hocCommand
        
        numArg = numarg()
        if (numArg < 6 || numArg > 7) {
            codeContractViolation()
        }
        
        enumDmPpNc = $1
        mechIdx = $2
        varName = $s3
        arraySize = $4
        arrayIndex = $5
        
        getVarNameWithIndex(varName, arraySize, arrayIndex, varNameWithIndex)
        
        // !! is that needed?
        _unitsStr = ""
        
        if (enumDmPpNc == 0) {
            _unitsStr = units(varName)
            // The line below looks more correct but actually leads to error like "Cannot find the symbol for  ca_cadifus[0]"
            // _unitsStr = units(varNameWithIndex)
        } else if (enumDmPpNc == 1) {
            // !! is there an easier way to get the units for an point process var?
            getMechName(enumDmPpNc, mechIdx, mechName)
            sprint(hocCommand, "_pointProcess = new %s(0.5)", mechName) // Without "0.5", we catch "point process not located in a section" error for some PPs, e.g. Exp2Syn
            execute(hocCommand, this)
            sprint(hocCommand, "_unitsStr = units(&_pointProcess.%s)", varNameWithIndex)
            execute(hocCommand, this)
            _pointProcess = nil
        } else if (enumDmPpNc == 2) {
            utils4FakeMech4NC.getVarUnits(varName, _unitsStr)
        } else {
            codeContractViolation()
        }
        if (!stringEmpty(_unitsStr)) {
            // !! some vars have "1" or "1.0" assigned as units. maybe just omit it here?
            sprint($s6, "%s (%s)", varNameWithIndex, _unitsStr)
        } else {
            sprint($s6, "%s", varNameWithIndex) // !! would simple assignment work here?
        }
        
        if (numArg == 7) {
            $s7 = varNameWithIndex
        }
    }
    
    func checkIfInhomogeneityOrStochasticityCannotBeAppliedToThisDistMechVar() { local mechIdx, varType
        strdef varName, mechName, line1
        
        mechIdx = $1
        varType = $2
        varName = $s3
        
        getMechName(0, mechIdx, mechName)
        if (stringEndsWith(mechName, ionSuffix) && varType == 2) {
            codeContractViolation()
        }
        
        if (mechIdx == morphologyMechIdx && varType == diamVarType && stringsEqual(varName, diamVarName)) {
            sprint(line1, "Cannot apply inhomogeneity or stochasticity to \"%s\" in %s.", diamVarName, morphologyMechName)
            mwh.showNotImplementedWarning(line1)
            return 1
        }
        
        return 0
    }
    
    func convertVarTypeToVarTypeIdx() { local varType
        varType = $1
        if (varType >= 1 && varType <= 3) {
            return varType - 1
        } else {
            codeContractViolation()
        }
    }
    
    func doesPointProcessRequireSection() { local mechIdx
        mechIdx = $1
        return !mechTypes[1].is_artificial(mechIdx)
    }
    
    func isPointProcessAcceptableNetConSource() { local mechIdx
        mechIdx = $1
        return mechTypes[1].has_net_event(mechIdx)
    }
    
    func isPointProcessAcceptableNetConTarget() { local mechIdx
        mechIdx = $1
        return mechTypes[1].is_netcon_target(mechIdx)
    }
    
    // All next proc-s are private
    
    
    proc checkDistMechCodeContract() { local mechIdx
        strdef expMechName, actMechName
        mechIdx = $1
        expMechName = $s2
        getMechName(0, mechIdx, actMechName)
        if (!stringsEqual(expMechName, actMechName)) {
            codeContractViolation()
        }
    }
    
    proc checkDistVarCodeContract() { local mechIdx, varType, varIdx
        strdef expVarName, actVarName
        mechIdx = $1
        varType = $2
        varIdx = $3
        expVarName = $s4
        getVarNameAndArraySize(0, mechIdx, varType, varIdx, actVarName)
        if (!stringsEqual(expVarName, actVarName)) {
            codeContractViolation()
        }
    }
    
    objref _fms4nc
    
    obfunc createMechStd() { local enumDmPpNc, mechIdx, varType localobj fms4nc, nil
        strdef mechName
        enumDmPpNc = $1
        mechIdx = $2
        varType = $3
        if (enumDmPpNc != 2) {
            getMechName(enumDmPpNc, mechIdx, mechName)
            return new MechanismStandard(mechName, varType)
        } else {
            execute("_fms4nc = new FakeMechanismStandardForNetCon()", this)     // The template is not loaded for astrocytes
            fms4nc = _fms4nc
            _fms4nc = nil
            return fms4nc
        }
    }
    
endtemplate MechTypeHelper

mth = new MechTypeHelper()
