
// !! taken from SeededDendritesSelectionWidget and generalized; need to integrate it back
begintemplate CompSubsetWidget

    public show, dismissHandler
    
    // !! init arg
    objref in_comp
    objref in_plugin
    
    external mwh
    
    // Callables
    external eachItemInList, addThisAndFilteredChildSecRefsToTheList, removeAllDupSecRefsFromTheList
    
    isSelectWholeSubtree = -1
    
    selectableColor = -1
    notSelectableColor = -1
    selectedColor = -1
    
    objref mainBox, plotShape
    
    objref selected_ref
    
    
    // !!
    // $o1 - !!
    // $2 - 
    proc init() {
        isSelectWholeSubtree = 0    // Keep in sync with xradiobutton
        
        selectableColor = 3     // Blue
        notSelectableColor = 1  // Black
        selectedColor = 2       // Red
        
        selected_ref = new List()
        
        in_comp = $o1
        pluginType = $2
        
        // !! check numarg here: must be 2 if pluginType == 0 or 3 if pluginType == 1
        
        if (pluginType == 0) {
            in_plugin = new PluginForCSW_FromNBM()
        } else if (pluginType == 1) {
            in_plugin = new PluginForCSW_FromMM(in_comp.list_ref)
        } else {
            codeContractViolation()
        }
    }
    
    proc show() {
        strdef text
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            in_plugin.getTopHint(text)
            xlabel(text)
            xlabel("")
            xradiobutton("Select individual sections", "isSelectWholeSubtree = 0", 1)   // Keep in sync with proc init
            xradiobutton("Select whole subtrees", "isSelectWholeSubtree = 1")
            xlabel("")
            // Usage of "Ctrl" is more natural for multiselect than "Shift", but for some reason, mouseEventsHandler is not called at all when "Ctrl" is pressed
            xlabel("Hold \"Shift\" while clicking on sections to keep the previous selection.")
            // !! xlabel("The sections shown in black are not dendrites, and so cannot be selected.")
            xlabel("The sections shown in black are not in the base compartment, and so cannot be selected.")
            xlabel("The number of selected sections is printed to console after each click.")
            xbutton("Done", "doneHandler()")
            xpanel()
            // !! think about showing only selectable sections (call "new PlotShape" with the SectionList arg)
            //    OR propose user a choice: showing all in black and blue OR blue only (radiobuttons)
            plotShape = new PlotShape()
            colorizeCompartments()
            // !! plotShape.menu_tool("Seeded Dendrite(s)", "mouseEventsHandler")
            plotShape.menu_tool("Selected Section(s)", "mouseEventsHandler")
            // !! plotShape.exec_menu("Seeded Dendrite(s)")
            plotShape.exec_menu("Selected Section(s)")
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        // !! mainBox.map("Seeded dendrite(s)")
        mainBox.map("Selected section(s)")
        plotShape.exec_menu("View = plot")
    }
    
    proc colorizeCompartments() { localobj item
        plotShape.color_all(notSelectableColor)
        for eachItemInList(item, in_comp.list_ref) {
            item.sec plotShape.color(selectableColor)
        }
    }
    
    // Mouse events handler: section selection and highlighting
    // $1 - Event type: 1, 2, 3 means move, press, release respectively
    // $2 - x
    // $3 - y
    // $4 - Keystate: reflects the state of Control (bit 1), Shift (bit 2), and Meta (bit 3) keys
    proc mouseEventsHandler() { local eventType, x, y, keystate, isMultiselect, isSectSelectable localobj item
        
        eventType = $1
        x = $2
        y = $3
        keystate = $4
        
        if (eventType != 2) {   // LMB press
            return
        }
        
        isMultiselect = (keystate == 2) // Shift
        if (!isMultiselect) {
            selected_ref.remove_all()
            colorizeCompartments()
        }
        
        // Make the nearest section currently accessed
        plotShape.nearest(x, y)
        plotShape.push_selected()
        
        // Check if the current section belongs to the selectable subset
        isSectSelectable = in_plugin.isCurrentSectSelectable()
        if (!isSectSelectable) {
            pop_section()
            return
        }
        
        if (!isSelectWholeSubtree) {
            selected_ref.append(new SectionRef())
        } else {
            addThisAndFilteredChildSecRefsToTheList(selected_ref, in_plugin)
        }
        
        pop_section()
        
        if (isMultiselect) {
            removeAllDupSecRefsFromTheList(selected_ref)
        }
        
        for eachItemInList(item, selected_ref) {
            item.sec plotShape.color(selectedColor)
        }
        
        // !! BUG: if we got here from MechManager module, user wants to select a subset of Dendrites compartment, and clicks on a dendrite with nanogeometry
        //    as a result, the number printed to console will include nanogeometry by mistake
        //    need to implement a more robust design with filtration of sections from the selected subtree
        //    OR show only selectable sections (call "new PlotShape" with the SectionList arg)
        // !! printf("%d dendrite section(s) selected\n", selected_ref.count())
        printf("%d %s section(s) selected\n", selected_ref.count(), in_comp.name)
        // plotShape.label(numSelectedSectsHint)    // This would be better than "print", but no idea how to delete the old label each time
    }
    
    // The handler of "Done" button
    proc doneHandler() {
        if (selected_ref.count() == 0) {
            mwh.showMessageBox("Please select at least 1 section.", "Nothing selected")
            return
        }
        
        mainBox.unmap()
        in_plugin.doneHandler(selected_ref)
    }
    
    // The handler of "X" button
    proc dismissHandler() {
        mainBox.unmap()
        in_plugin.dismissHandler()
    }
    
endtemplate CompSubsetWidget


/* !!
// Handler of "Reseed" button from the main UI
// Input: isAllOrSomeDendritesSeeded (taken from the top level)
proc seededDendritesChangedHandler() {
    if (isAllOrSomeDendritesSeeded) {
        seededDendrites_ref = dendrites_ref
        // !! do I need to re-calculate MaxDendriticLength using seededDendrites_ref?
        nanoBranchesManager.reseedBranchesWithLastUsedArgs()
    } else {
        // !! after the next operation and before closing cssWidget, interaction with MainUI nanogeometry panels causes an error,
        //    so maybe need to hide MainUI temporarily
        nanoBranchesManager.deleteBranches()
        
        cssWidget = new CompSubsetWidget()
        cssWidget.show()
    }
}
*/