
begintemplate BasicMath

    public inf, nan
    public min, max, updateMinMax, isNaN, disableGreedyComparison, restoreGreedyComparison
    
    external getInfinity, getNaN
    external codeContractViolation
    
    inf = -1
    nan = -1
    
    isGreedyComparisonEnabled = -1
    float_epsilon_old = -1
    
    
    proc init() {
        inf = getInfinity()
        nan = getNaN()
        
        isGreedyComparisonEnabled = 1
    }
    
    func min() {
        if ($1 < $2) {
            return $1
        } else {
            return $2
        }
    }
    
    func max() {
        if ($1 > $2) {
            return $1
        } else {
            return $2
        }
    }
    
    // !! maybe move to "GraphUtils.hoc"
    proc updateMinMax() {
        $&1 = min($&1, $3)
        $&2 = max($&2, $3)
    }
    
    func isNaN() {
        return !($1 == $1)  // Do not replace with "!="
    }
    
    proc disableGreedyComparison() {
        if (!isGreedyComparisonEnabled) {
            codeContractViolation()
        }
        float_epsilon_old = float_epsilon
        float_epsilon = 0
        isGreedyComparisonEnabled = 0
    }
    
    proc restoreGreedyComparison() {
        if (isGreedyComparisonEnabled) {
            codeContractViolation()
        }
        float_epsilon = float_epsilon_old
        isGreedyComparisonEnabled = 1
    }
    
endtemplate BasicMath

objref math
math = new BasicMath()
