
// Here we create all the random number generators used in the program.
// The idea behind this file is to make sure that all the generators have different seeds.
// We don't use a single generator for the whole program just to preserve reproducibility of results in module A independently on:
// * the changes made to code in module B;
// * the scenarios run with module C in the current session.

begintemplate RNGUtils

    public getFor_diameters, getFor_calcium, getFor_frapCircle, getFor_diamAndLen, getFor_branchSeeder, getFor_spineRadius, getFor_neckLen, getFor_neckDiam, getFor_stochFunc_withUniqueSeed, getFor_stretch_withCustomSeed
    
    uniqueSeed = -1
    
    
    proc init() {
        uniqueSeed = 8      // Keep in sync with the code below
    }
    
    obfunc getFor_diameters() {
        return new Random()     // The same as new Random(0)
    }
    
    obfunc getFor_calcium() {
        return new Random(1)
    }
    
    obfunc getFor_frapCircle() {
        return new Random(2)
    }
    
    obfunc getFor_diamAndLen() {
        return new Random(3)
    }
    
    obfunc getFor_branchSeeder() {
        return new Random(4)
    }
    
    obfunc getFor_spineRadius() {
        return new Random(5)
    }
    
    obfunc getFor_neckLen() {
        return new Random(6)
    }
    
    obfunc getFor_neckDiam() {
        return new Random(7)    // Must be equal to uniqueSeed - 1
    }
    
    obfunc getFor_stochFunc_withUniqueSeed() { localobj rng
        rng = new Random(uniqueSeed)
        uniqueSeed += 1
        return rng
    }
    
    // $1 - The seed
    obfunc getFor_stretch_withCustomSeed() {
        return new Random($1)
    }
    
endtemplate RNGUtils

objref rngUtils
rngUtils = new RNGUtils()
