
// Choose unique name for the new created compartment; if the first guess name is in use, then ask user to enter the name
// $s1 - The compartment name ("soma" or "axon") being also the first guess for unique name
// $s2 (out) - The chosen unique and valid name
// Returns: 0/1 flag indicating Accept/Cancel respectively
func chooseUniqueAndValidNameForNewCompartmentForImport() { local isFound, type, isCancel
    strdef compName, chosenName, hint
    
    compName = $s1
    
    chosenName = compName
    
    while (1) {
        // Making sure that:
        //  * the name is a valid string that can be used for creation of a new section object or section array (e.g. "123abc" or "ab+c" are invalid names)
        //  * there is no section object or section array or any variable or keyword with this name
        
        isFound = 0
        for findSecArrayOrObjectIterator(chosenName, 1, 0) {
            isFound = 1
        }
        if (!isFound) {
            // We call name_declared only after the direct section search because
            // it considers name declared even though the section was deleted ("Import other")
            type = name_declared(chosenName)
            if (type == 0 || type == 3) {
                // The chosen name is unique
                if (isValidSecName(chosenName)) {
                    // The chosen name is valid
                    break
                }
            }
        }
        
        sprint(hint, "Cannot create %s with name \"%s\" because the name is either in use, reserved or invalid. Please choose some other name:", compName, chosenName)
        isCancel = _stringInputDialog(hint, chosenName)
        if (isCancel) {
            return 1
        }
    }
    
    $s2 = chosenName
    
    return 0
}

// Ask user to choose a unique name for the compartment
// $s1 - The base compartment name being also the first guess for the new name
// $2 - 0/1 flag indicating Rename/Split respectively
// $s3 (out) - The chosen unique name
// Other input: mmAllComps (taken from the top level)
// Returns: 0/1 flag indicating Accept/Cancel respectively
func chooseUniqueNameForCompartmentForMechManager() { local isSplitOrRename, hintIdx, isCancel, isFound localobj comp
    strdef baseCompName, chosenName, hint
    
    baseCompName = $s1
    isSplitOrRename = $2
    
    chosenName = baseCompName
    
    hintIdx = 0
    while (1) {
        if (hintIdx == 0) {
            hint = "Please choose a unique name for the%s compartment:"
            if (isSplitOrRename) {
                sprint(hint, hint, " new")
            } else {
                sprint(hint, hint, "")
            }
        } else if (hintIdx == 1) {
            hint = "Double spaces are not allowed. Please correct the name:"
        } else if (hintIdx == 2) {
            hint = "This name is already assigned to some compartment. Please choose a unique name:"
        } else {
            codeContractViolation()
        }
        
        isCancel = _stringInputDialog(hint, chosenName)
        if (isCancel) {
            return 1
        }
        
        if (stringEmpty(chosenName)) {
            hintIdx = 0
            continue
        }
        
        if (containsSubstring(chosenName, "  ")) {
            // Keep in sync with py:GeneratorsForMainHocFile._prepareUniqueNameId
            hintIdx = 1
            continue
        }
        
        // Make sure there is no other compartment with the same name
        isFound = 0
        // !! think about Python's Set for better performance
        for eachItemInList(comp, mmAllComps) {
            if (stringsEqual(comp.name, chosenName)) {
                isFound = 1
                break
            }
        }
        if (!isFound) {
            // The chosen name is unique
            break
        }
        
        hintIdx = 2
    }
    
    $s3 = chosenName
    
    return 0
}

func isVarExprUnique() { local isUnique localobj exprsList, oldExpr
    strdef newExpr
    
    newExpr = $s1
    exprsList = $o2
    
    isUnique = 1
    
    for eachItemInList(oldExpr, exprsList) {
        if (stringsEqual(newExpr, oldExpr.s)) {
            mwh.showWarningBox("This var has already been added to the list.")
            isUnique = 0    // Don't replace with "return 0" because iterator-s cannot return
            break           //
        }
    }
    
    return isUnique
}

func enterVarExpression() { local isCancel, isOK localobj exprsList
    strdef var, hint, custVar
    
    var = $s1
    exprsList = $o2
    
    hint = "Please enter a top-level var name, e.g. celsius, v_init, dt etc.:"
    isCancel = _stringInputDialog(hint, var)
    if (isCancel) {
        return 0
    }
    
    if (stringEmpty(var)) {
        // Recursive call
        isOK = enterVarExpression(var, exprsList)
        if (isOK) {
            $s1 = var
        }
        return isOK
    }
    
    sprint(custVar, "Cust: %s", var)    // Keep in sync with ExposedOrSweptInputVar.prepareString
    if (!isVarExprUnique(custVar, exprsList)) {
        return 0
    }
    
    $s1 = var
    
    return 1
}


// Ask user to enter a string
// $s1 - The hint
// $s2 (in/out) - The default proposed string in input, and the entered string in output
//                (all leading and trailing whitespaces are truncated)
// Returns: 0/1 flag indicating Accept/Cancel respectively
func _stringInputDialog() { local isAccepted
    strdef hint, defaultStr, outStr
    
    hint = $s1
    defaultStr = $s2
    
    outStr = defaultStr
    
    isAccepted = string_dialog(hint, outStr)
    if (!isAccepted) {
        return 1
    }
    
    // Truncate all leading and trailing whitespaces in the string
    stringTruncate(outStr, outStr)
    
    $s2 = outStr
    
    return 0
}
