//////////////////// Table of contents ///////////////////////////////////
/*
    Line 14:            Watched vars and recorder settings
    Line 35:            Utils
    Line 142:           Prerequisites
    Line 150:           Main part
*/
//////////////////////////////////////////////////////////////////////////

strdef runnedHocFileName, outFolderName
runnedHocFileName = "2.hoc"
outFolderName = "results"

//////////////////// Start of watched vars and recorder settings /////////

objref watchedVarNames
watchedVarNames = new List()
{ watchedVarNames.append(new String("s.v( 0.05 )")) }
{ watchedVarNames.append(new String("s.gna_hh_wbm( 0.05 )")) }

objref watchedVarUnits
watchedVarUnits = new List()
{ watchedVarUnits.append(new String("mV")) }
{ watchedVarUnits.append(new String("mho/cm2")) }

// We'll record the values only once per "numItersPerOneRecord" iterations (it must be a positive integer)
numItersPerOneRecord = 4

// Hint: use "%g" for compact format and "%.15e" for max precision
strdef oneValueFormat
oneValueFormat = "%-8.4g"

//////////////////// End of watched vars and recorder settings ///////////

//////////////////// Start of utils //////////////////////////////////////

strdef tempFolderName, tempHocFileName
tempFolderName = "temp_folder"
tempHocFileName = "last_cell_without_templates.hoc"

strdef tempHocFilePathName
{ sprint(tempHocFilePathName, "%s/%s", tempFolderName, tempHocFileName) }

numWatchedVars = watchedVarNames.count()
objref recordedVecs[numWatchedVars]

// Print the message, print the call stack, raise the error
// $s1 - The message
proc printMsgAndRaiseError() {
    strdef msg
    sprint(msg, "\n\n    %s\n", $s1)
    execerror(msg)
}

// in: tempFolderName, runnedHocFileName, tempHocFilePathName, outFolderName (taken from the top level)
proc createTempHocFileWithoutTemplatesAndOutputFolder() { local status
    strdef pyCode
    
    pyCode = "import os\ntempFolderName = '%s'\nrunnedHocFileName = '%s'\ntempHocFilePathName = '%s'\noutFolderName = '%s'\ndef createOrCleanUpFolder(folderName):\n    if os.path.exists(folderName):\n        for fileName in os.listdir(folderName):\n            filePath = os.path.join(folderName, fileName)\n            os.remove(filePath)\n    else:\n        os.mkdir(folderName)\ndef createTempHocFileWithoutTemplates():\n    with open(runnedHocFileName, 'r') as inFile, open(tempHocFilePathName, 'w') as outFile:\n        isSkipBlock = False\n        for line in inFile:\n            if line.startswith('begintemplate'):\n                isSkipBlock = True\n            elif line.startswith('endtemplate'):\n                isSkipBlock = False\n            elif not isSkipBlock:\n                outFile.write(line)\ncreateOrCleanUpFolder(tempFolderName)\ncreateTempHocFileWithoutTemplates()\ncreateOrCleanUpFolder(outFolderName)"
    
    sprint(pyCode, pyCode, tempFolderName, runnedHocFileName, tempHocFilePathName, outFolderName)
    
    status = nrnpython(pyCode)
    if (!status) {
        printMsgAndRaiseError("Failed to create the temporary HOC file or the output folder")
    }
}

// in: tempFolderName (taken from the top level)
proc deleteTempFolder() { local status
    strdef pyCode
    
    sprint(pyCode, "import shutil\nshutil.rmtree('%s')", tempFolderName)
    
    status = nrnpython(pyCode)
    if (!status) {
        printMsgAndRaiseError("Failed to delete the temporary folder")
    }
}

// in: numWatchedVars, numRecs, recordedVecs, Dt, watchedVarNames (taken from the top level)
proc setUpVecsForRecording() { local watchedVarIdx
    strdef hocCommandTempl, hocCommand
    
    // This works fine for DMs, PPs and NetCon-s
    hocCommandTempl = "recordedVecs[%d].record(&%s, Dt)"
    
    // But according to NEURON docs, in some cases it is preferable to use the following command
    //  hocCommandTempl = "recordedVecs[%d].record(pointProcessObject, &%s, Dt)"
    
    for watchedVarIdx = 0, numWatchedVars - 1 {
        // This will be resized by NEURON to 0 size just after "run()", here we just allocate memory as they recommend
        recordedVecs[watchedVarIdx] = new Vector(numRecs)
        
        sprint(hocCommand, hocCommandTempl, watchedVarIdx, watchedVarNames.o(watchedVarIdx).s)
        execute(hocCommand)
    }
}

// !!!! simIdx is undefined if there is no swept vars
// in: simIdx, numWatchedVars, watchedVarNames, Dt, oneValueFormat, recordedVecs (taken from the top level)
proc saveRecordedVecs() { local watchedVarIdx, actNumRecs, recIdx, time localobj outFile
    strdef outTxtFilePathName, line, oneValueStr
    
    sprint(outTxtFilePathName, "%s/simIdx = %d.txt", outFolderName, simIdx)
    outFile = new File()
    outFile.aopen(outTxtFilePathName)   // !!!!?? wopen
    
    // The var names
    line = "t"
    for watchedVarIdx = 0, numWatchedVars - 1 {
        sprint(line, "%s\t%s", line, watchedVarNames.o(watchedVarIdx).s)
    }
    outFile.printf("%s\n", line)
    
    // The units
    sprint(line, "%s", units(&t))
    for watchedVarIdx = 0, numWatchedVars - 1 {
        sprint(line, "%s\t%s", line, watchedVarUnits.o(watchedVarIdx).s)
    }
    outFile.printf("%s\n", line)
    
    // This will be < numRecs if user stopped the cycle
    actNumRecs = recordedVecs[0].size()
    
    // The data
    for recIdx = 0, actNumRecs - 1 {
        time = recIdx * Dt
        sprint(line, oneValueFormat, time)
        for watchedVarIdx = 0, numWatchedVars - 1 {
            sprint(oneValueStr, oneValueFormat, recordedVecs[watchedVarIdx].x[recIdx])
            sprint(line, "%s\t%s", line, oneValueStr)
        }
        outFile.printf("%s\n", line)
    }
    
    outFile.close()
}

//////////////////// End of utils ////////////////////////////////////////

//////////////////// Start of prerequisites //////////////////////////////

if (!nrnpython("")) {
    printMsgAndRaiseError("Sorry, this HOC file requires Python for some operations. Please install Python.")
}

//////////////////// End of prerequisites ////////////////////////////////

//////////////////// Start of main part //////////////////////////////////

createTempHocFileWithoutTemplatesAndOutputFolder()

simIdx = 1

{ printf("\nRunning simulation ...\n") }

{ load_file(runnedHocFileName) }

// Both "dt" and "tstop" can be swept
Dt = numItersPerOneRecord * dt
numRecs = tstop / Dt + 1

setUpVecsForRecording()

run()

saveRecordedVecs()

deleteTempFolder()

{ printf("\nComplete!\nThe results were saved to \"%s%s\"\n\n", getcwd(), outFolderName) }

//////////////////// End of main part ////////////////////////////////////