
// Save nanogeometry HOC file
// Returns: 0/1 flag indicating that the save operation was canceled by user
func saveNanoHocFile() { local isCancel, cond localobj bulletedList
    strdef outHocFilePathName, line1, str1, str2
    
    isCancel = fbh.showSaveFileDialog(pyEnumOutFileTypes.nanoGeometryHoc, outHocFilePathName)
    if (isCancel) {
        return 1
    }
    
    // Letting NEURON change "dt" now rather than on start of the simulation,
    // so we export already corrected value of "dt"
    setdt()
    
    mwh.showPleaseWaitBox("Exporting nanogeometry file.")
    {
        callPythonExportCore(outHocFilePathName)
    }
    mwh.hidePleaseWaitBox()
    
    line1 = "Here is what we don't export at the moment (the list is incomplete):"
    
    bulletedList = new List()
    bulletedList.append(new String("\"secondorder\" variable"))
    str1 = "GLOBAL vars of biophys mechs%s"
    str2 = "custom PPs/ACs%s (if you add them), but APCount-s are exported"
    if (isAstrocyteOrNeuron) {
        sprint(str1, str1, "")
        sprint(str2, str2, "")
    } else {
        sprint(str1, str1, " and synaptic PPs/ACs")
        sprint(str2, str2, " outside synapses")
    }
    bulletedList.append(new String(str1))
    bulletedList.append(new String(str2))
    bulletedList.append(new String("custom \"proc advance() { ... }\", e.g. the ones used in the \"Simulations\""))
    if (isExternalSimStart) {   // !!! maybe add || isBaseOrNanoStart
        bulletedList.append(new String("overrides for other standard proc-s (e.g. \"init\" and \"run\") that may be imported from external HOC file"))
    }
    bulletedList.append(new String("the distance centre location (if you change it)"))
    cond = exportOptions.isExportAnyStochFuncs()    // !!! false positive here when user disables export of ASSIGNED and STATE vars
    if (!isAstrocyteOrNeuron) {
        cond = (cond || smEnumSynLoc == 2)  // smEnumSynLoc is not defined for Astrocyte
    }
    if (cond) {
        bulletedList.append(new String("states of RNGs"))
    }
    bulletedList.append(new String("if creating \"runner.hoc\", the results cannot be saved to BIN files (only TXT files are supported)"))
    bulletedList.append(new String("a new file \"nrnmech.dll\" is not built (only the old one is copied)"))
    
    getNotImplementedLines(str1, str2)
    
    mwh.startIntercepting()
    {
        mwh.showWarningBox(line1, bulletedList, "", str1, str2)
        mwh.showMessageBox("Export complete successfully", "Complete")
    }
    mwh.endIntercepting()
    
    return 0
}
