
// Save nanogeometry HOC file
// Returns: 0/1 flag indicating that the save operation was canceled by user
func saveNanoHocFile() { local isCancel, cond
    strdef outHocFilePathName, line1, line2, line3, line4, line5, line6, line7, line8, line9, line10
    
    isCancel = fbh.showSaveFileDialog("Export brain cell with nanogeometry", "Nanogeometry", outHocFilePathName)
    if (isCancel) {
        return 1
    }
    
    // Letting NEURON change "dt" now rather than on start of the simulation,
    // so we export already corrected value of "dt"
    setdt()
    
    mwh.showPleaseWaitBox("Exporting nanogeometry file.")
    {
        callPythonExportCore(outHocFilePathName)
    }
    mwh.hidePleaseWaitBox()
    
    mwh.startIntercepting()
    {
        line1 = "Here is what we don't export at the moment (the list is incomplete):"
        // !!! maybe pass a List of String-s to mwh.showWarningBox to show it as a bulleted list
        line2 = "    * GLOBAL vars of biophys mechs%s"
        line3 = "    * custom PPs/ACs%s (if you add them), but APCount-s are exported"
        line4 = "    * custom \"proc advance() { ... }\", e.g. the ones used in the \"Simulations\""
        if (isAstrocyteOrNeuron) {
            sprint(line2, line2, "")
            sprint(line3, line3, "")
        } else {
            sprint(line2, line2, " and synaptic PPs/ACs")
            sprint(line3, line3, " outside synapses")
        }
        line5 = "    * the distance centre location (if you change it)"
        cond = exportOptions.isExportAnyStochFuncs()
        if (!isAstrocyteOrNeuron) {
            cond = (cond || smEnumSynLoc == 2)  // smEnumSynLoc is not defined for Astrocyte
        }
        if (cond) {
            line6 = "    * states of RNGs"
        }
        line7 = "    * if creating \"runner.hoc\", the results cannot be saved to BIN files (only TXT files are supported)"
        line8 = "    * a new file \"nrnmech.dll\" is not built (only the old one is copied)"
        line9 = "Not implemented."
        line10 = "If required, please ask the developer to prioritize."
        if (cond) {
            mwh.showWarningBox(line1, line2, line3, line4, line5, line6, line7, line8, "", line9, line10)
        } else {
            mwh.showWarningBox(line1, line2, line3, line4, line5, line7, line8, "", line9, line10)
        }
        
        mwh.showMessageBox("Export complete successfully", "Complete")
    }
    mwh.endIntercepting()
    
    return 0
}
