
begintemplate AddOneInputVarWidget

    public show, dismissHandler
    
    external mwh, mth, compUtils, mechsDllUtils
    external synGroup
    external createEmptyPanel, createMetaVarHint, findItemInListByStringAndSelect, unmapIfNotNil, codeContractViolation
    external enumSynCompIdxs
    
    objref mainBox, deck
    objref parentWidget
    objref compList, mechList, varTypeList, varNameWithIndexList
    
    isExposedOrSwept = -1
    
    isDmOrSynPart = -1
    
    selCompIdx = -1
    selMechIdx = -1
    selVarType = -1
    selVarNameWithIndexIdx = -1
    
    enumHomInhomStoch = -1
    
    isAddOrCorrect = -1
    
    // Used only if isAddOrCorrect == 0
    objref oldListItem
    oldVarIdx = -1
    isRecallMode = -1
    
    
    proc init() { local aoivWidIdx
        isExposedOrSwept = $1
        aoivWidIdx = $2
        parentWidget = $o3
        
        isDmOrSynPart = 1 - aoivWidIdx
        
        compList = new List()
        mechList = new List()
        varTypeList = new List()
        varNameWithIndexList = new List()
        
        selCompIdx = -2
        selMechIdx = -1
        selVarType = -2
        selVarNameWithIndexIdx = -1
        
        enumHomInhomStoch = 0
    }
    
    proc show() { local numArg, compIdx localobj nil, hBox
        strdef compText, mechText
        
        numArg = numarg()
        if (numArg == 0) {
            isAddOrCorrect = 1
            oldListItem = nil
            oldVarIdx = -1
        } else if (numArg == 2) {
            isAddOrCorrect = 0
            oldListItem = $o1
            oldVarIdx = $2
        } else {
            codeContractViolation()
        }
        
        populateCompList()
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            xlabel("Show only:")
            xradiobutton("Homogen vars", "whatToShowChangedHandler(0)", enumHomInhomStoch == 0)
            xradiobutton("Inhom models", "whatToShowChangedHandler(1)", enumHomInhomStoch == 1)
            xradiobutton("Stoch models", "whatToShowChangedHandler(2)", enumHomInhomStoch == 2)
            xpanel()
            hBox = new HBox()
            hBox.intercept(1)
            {
                if (isDmOrSynPart) {
                    compText = "Compartment"
                    mechText = "Mechanism"
                } else {
                    compText = "Synapse part"
                    mechText = "PP or NetCon"
                }
                showOneList(compText, compList, "compSelectHandler")
                showOneList(mechText, mechList, "mechSelectHandler")
                showOneList("Variable type", varTypeList, "varTypeSelectHandler")
                showOneList("Variable", varNameWithIndexList, "varNameWithIndexSelectHandler")
                varNameWithIndexList.accept_action("selectHandler()")   // Double click
            }
            hBox.intercept(0)
            hBox.map()
            deck = new Deck()
            deck.intercept(1)
            {
                createEmptyPanel()
                xpanel("")
                xlabel("* Only inter-comp-homogen non-stoch vars are shown.")
                xpanel()
                xpanel("")
                createMetaVarHint()
                xpanel()
            }
            deck.intercept(0)
            deck.map()
            // deck.flip_to(*)      // Will be done below in compSelectHandler
            xpanel("")
            xbutton("Select", "selectHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("One variable", 160, 200, -1, -1)
        
        if (isAddOrCorrect) {
            compIdx = 0
        } else {
            compIdx = oldListItem.compIdx
        }
        compList.select(compIdx)
        isRecallMode = !isAddOrCorrect
        {
            compSelectHandler(compIdx)
        }
        isRecallMode = 0
    }
    
    proc dismissHandler() {
        unmapIfNotNil(mainBox)
    }
    
    // All next staff is private
    
    
    proc populateCompList() { local numComps, compIdx localobj comp
    
        compList.remove_all()
        
        if (isDmOrSynPart) {
            numComps = compUtils.getNumDistMechComps()
            for compIdx = 0, numComps - 1 {
                comp = compUtils.getComp(1, compIdx)
                compList.append(new ItemOfFilteredBrowsedList(compIdx, comp.name))
            }
            compList.append(new ItemOfFilteredBrowsedList(-1, "@All"))
        } else {
            if (synGroup.is3Or1PartInSynStruc()) {
                addOneSynCompToList(enumSynCompIdxs.srcPp)
                addOneSynCompToList(enumSynCompIdxs.netCon)
                addOneSynCompToList(enumSynCompIdxs.trgPp)
            } else {
                addOneSynCompToList(enumSynCompIdxs.sngPp)
            }
        }
    }
    
    proc addOneSynCompToList() { local synCompIdx localobj comp
        synCompIdx = $1
        comp = compUtils.getComp(isDmOrSynPart, synCompIdx)
        compList.append(new ItemOfFilteredBrowsedList(synCompIdx, comp.name))
    }
    
    proc showOneList() { localobj list, vBox
        strdef header, command
        
        header = $s1
        list = $o2
        command = $s3
        
        vBox = new VBox()
        vBox.intercept(1)
        {
            xpanel("")
            sprint(header, "%s:", header)
            xlabel(header)
            xpanel()
            sprint(command, "%s(hoc_ac_)", command)
            list.browser("", "s")
            list.select_action(command)
        }
        vBox.intercept(0)
        vBox.map()
    }
    
    proc whatToShowChangedHandler() {
        enumHomInhomStoch = $1
        if (enumHomInhomStoch != 0) {
            mwh.showNotImplementedWarning()
        }
    }
    
    proc compSelectHandler() { local compListIdx, isAll, enumDmPpNc, numMechs, mechIdx, mechListIdx localobj comp
        strdef mechName
        
        compListIdx = $1
        
        mechList.remove_all()   // This calls mechSelectHandler(-1) as a side effect
        
        if (compListIdx == -1) {
            // We are called on compList.remove_all() when user opens this widget again
            selCompIdx = -2
            return
        }
        
        selCompIdx = compList.o(compListIdx).idx
        
        isAll = (selCompIdx == -1)
        deck.flip_to(isAll)
        if (isAll) {
            mwh.showNotImplementedWarning()
            varTypeList.remove_all()
            varNameWithIndexList.remove_all()
            selMechIdx = -1
            selVarType = -2
            selVarNameWithIndexIdx = -1
            return
        }
        
        comp = compUtils.getComp(isDmOrSynPart, selCompIdx)
        
        // Populate mechList
        if (isDmOrSynPart) {
            enumDmPpNc = 0
            
            numMechs = mth.getNumMechs(enumDmPpNc)
            for mechIdx = 0, numMechs - 1 {
                mth.getMechName(enumDmPpNc, mechIdx, mechName)
                if (mechsDllUtils.isThisMechForIntUseOnly(mechName)) {
                    continue
                }
                if (!comp.isMechInserted[mechIdx]) {
                    continue
                }
                mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
            }
        } else {
            if (selCompIdx == enumSynCompIdxs.netCon) {
                enumDmPpNc = 2
                mechIdx = 0
                comp.mechStds[mechIdx][0].name(mechName)
                deck.flip_to(2)
            } else {
                enumDmPpNc = 1
                mechIdx = synGroup.getMechIdxAndOptionalName(comp.enumPpRole, mechName)
            }
            mechList.append(new ItemOfFilteredBrowsedList(mechIdx, mechName))
        }
        
        // Select an item in mechList
        if (!isRecallMode) {
            if (isDmOrSynPart) {
                if (numMechs != 0) {
                    mechListIdx = 0
                    mechList.select(mechListIdx)
                    selMechIdx = mechList.o(mechListIdx).idx
                } else {
                    mechListIdx = -1
                    selMechIdx = -1
                }
            } else {
                mechListIdx = 0
                selMechIdx = mechIdx
            }
        } else {
            selMechIdx = oldListItem.mechIdx
            mth.getMechName(enumDmPpNc, selMechIdx, mechName)
            mechListIdx = findItemInListByStringAndSelect(mechList, mechName)
        }
        
        mechSelectHandler(mechListIdx)
    }
    
    proc mechSelectHandler() { local mechListIdx, enumDmPpNc, varType, numVarTypes, varTypeListIdx localobj comp
        strdef varTypeName
        
        mechListIdx = $1
        
        varTypeList.remove_all()    // This calls varTypeSelectHandler(-1) as a side effect
        
        if (mechListIdx == -1) {
            selMechIdx = -1
            return
        }
        
        selMechIdx = mechList.o(mechListIdx).idx
        
        comp = compUtils.getComp(isDmOrSynPart, selCompIdx)
        enumDmPpNc = comp.enumDmPpNc
        
        // Populate varTypeList
        varType = -1    // GLOBAL
        if (mth.doesMechHaveGlobalVars(enumDmPpNc, selMechIdx)) {
            addItemToVarTypeList(varType)
        }
        varType = 1     // PARAMETER
        if (mth.getNumMechVars(enumDmPpNc, selMechIdx, varType) != 0) {
            addItemToVarTypeList(varType)
        }
        
        // Select an item in varTypeList
        if (!isRecallMode) {
            numVarTypes = varTypeList.count()
            if (numVarTypes != 0) {
                varTypeListIdx = 0
                varTypeList.select(varTypeListIdx)
                selVarType = varTypeList.o(varTypeListIdx).idx
            } else {
                varTypeListIdx = -1
                selVarType = -2
            }
        } else {
            selVarType = oldListItem.varType
            mth.getVarTypeName(selVarType, varTypeName)
            varTypeListIdx = findItemInListByStringAndSelect(varTypeList, varTypeName)
        }
        
        varTypeSelectHandler(varTypeListIdx)
    }
    
    proc varTypeSelectHandler() { local varTypeListIdx, enumDmPpNc, numVars, numInhomVars, varIdx, arraySize, arrayIndex localobj comp
        strdef varName, varNameWithIndex
        
        varTypeListIdx = $1
        
        varNameWithIndexList.remove_all()   // This calls varNameWithIndexSelectHandler(-1) as a side effect
        
        if (varTypeListIdx == -1) {
            selVarType = -2
            return
        }
        
        selVarType = varTypeList.o(varTypeListIdx).idx
        
        comp = compUtils.getComp(isDmOrSynPart, selCompIdx)
        enumDmPpNc = comp.enumDmPpNc
        
        // Populate varNameWithIndexList
        numVars = mth.getNumMechVars(enumDmPpNc, selMechIdx, selVarType)
        numInhomVars = 0
        for varIdx = 0, numVars - 1 {
            arraySize = mth.getVarNameAndArraySize(enumDmPpNc, selMechIdx, selVarType, varIdx, varName)
            for arrayIndex = 0, arraySize - 1 {
                if (enumHomInhomStoch == 0 && !comp.isMechVarInhom(selMechIdx, selVarType, varName, arrayIndex)) {
                    varNameWithIndexList.append(new WatchedOutputVar(varName, arraySize, arrayIndex))
                } else {
                    numInhomVars += 1
                }
            }
        }
        numVars -= numInhomVars
        
        // Select an item in varNameWithIndexList
        if (!isRecallMode) {
            if (numVars != 0) {
                selVarNameWithIndexIdx = 0
                varNameWithIndexList.select(selVarNameWithIndexIdx)
            } else {
                selVarNameWithIndexIdx = -1
            }
        } else {
            varNameWithIndex = oldListItem.varNameWithIndex
            selVarNameWithIndexIdx = findItemInListByStringAndSelect(varNameWithIndexList, varNameWithIndex)
        }
        
        varNameWithIndexSelectHandler(selVarNameWithIndexIdx)
    }
    
    proc varNameWithIndexSelectHandler() {
        selVarNameWithIndexIdx = $1
    }
    
    proc selectHandler() { local isUnique localobj itemOfVarsList, newItem
        if (selVarNameWithIndexIdx == -1) {
            mwh.showWarningBox("Please select a variable.")
            return
        }
        
        itemOfVarsList = varNameWithIndexList.o(selVarNameWithIndexIdx)
        
        newItem = new ExposedOrSweptInputVar(isExposedOrSwept, isDmOrSynPart, selCompIdx, selMechIdx, selVarType, itemOfVarsList.varName, itemOfVarsList.arraySize, itemOfVarsList.arrayIndex)
        
        if (isAddOrCorrect) {
            isUnique = parentWidget.onVarAddHandler(newItem)
        } else {
            isUnique = parentWidget.onVarCorrectHandler(newItem, oldVarIdx)
        }
        
        if (!isUnique) {
            return
        }
        
        dismissHandler()
    }
    
    proc addItemToVarTypeList() { local varType
        strdef varTypeName
        varType = $1
        mth.getVarTypeName(varType, varTypeName)
        varTypeList.append(new ItemOfFilteredBrowsedList(varType, varTypeName))
    }
    
endtemplate AddOneInputVarWidget
