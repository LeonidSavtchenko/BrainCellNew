
// Just some declarations for binding in the proc-s below (will be defined before the first usage)
numWatchedAPCounts = -1
objref apcList, recordedVecsFromAPCounts[1]

// in: numWatchedAPCounts, recordedVecsFromAPCounts (taken from the top level)
proc setUpVecsForRecordingFromAPCounts() { local apcIdx localobj vec
    for apcIdx = 0, numWatchedAPCounts - 1 {
        vec = new Vector()
        APCount[apcIdx].record(vec)
        recordedVecsFromAPCounts[apcIdx] = vec
    }
}

// in: outAPsFileNameFormat, timestamp, outFolderPathName, numSweptVars, pyObj, numWatchedAPCounts, colSep, recordedVecsFromAPCounts (taken from the top level)
proc saveRecordedVecsFromAPCounts() { local apcIdx, maxNumRecs, n, recIdx localobj outFile, listOfStrs1, listOfStrs2, listOfStrs3, listOfStrs4, listOfStrs5, listOfStrs, vec
    strdef outFileName, outFilePathName, unitsStr, str
    
    sprint(outFileName, outAPsFileNameFormat, timestamp)
    sprint(outFilePathName, "%s/%s", outFolderPathName, outFileName)
    outFile = new File()
    outFile.wopen(outFilePathName)
    
    if (numSweptVars != 0) {
        // Invisible rows: the swept var names and values
        dumpSweptVarsToFileHeader(outFile)      // This uses numSweptVars, pyObj
    }
    
    listOfStrs1 = new List()
    listOfStrs2 = new List()
    listOfStrs3 = new List()
    listOfStrs4 = new List()
    listOfStrs5 = new List()
    
    unitsStr = units(&APCount[0].time)
    
    for apcIdx = 0, numWatchedAPCounts - 1 {
        // "Long Name" row
        sprint(str, "APCount[%d].time", apcIdx)
        listOfStrs1.append(new String(str))
        
        // "Units" row
        listOfStrs2.append(new String(unitsStr))
        
        // "Comments" row: the locations of APCount-s
        getAPCountLocationHint(apcIdx, str)
        listOfStrs3.append(new String(str))
        
        // "Comments" row: the thresholds of APCount-s
        getAPCountThresholdHint(apcIdx, str)
        listOfStrs4.append(new String(str))
        
        // "Comments" row: the spike counters
        getAPCountSpikeCounterHint(apcIdx, str)
        listOfStrs5.append(new String(str))
    }
    
    writeOneLineToFile(listOfStrs1, outFile)    // This uses colSep
    writeOneLineToFile(listOfStrs2, outFile)
    writeOneLineToFile(listOfStrs3, outFile)
    writeOneLineToFile(listOfStrs4, outFile)
    writeOneLineToFile(listOfStrs5, outFile)
    
    maxNumRecs = -1
    for apcIdx = 0, numWatchedAPCounts - 1 {
        n = APCount[apcIdx].n
        if (n > maxNumRecs) {
            maxNumRecs = n
        }
    }
    
    listOfStrs = new List()
    
    // Data rows: the spike times
    for recIdx = 0, maxNumRecs - 1 {
        for apcIdx = 0, numWatchedAPCounts - 1 {
            vec = recordedVecsFromAPCounts[apcIdx]
            if (recIdx < vec.size()) {
                oneValueToString(vec.x(recIdx), str)
            } else {
                str = ""
            }
            listOfStrs.append(new String(str))
        }
        
        writeOneLineToFile(listOfStrs, outFile)
        
        listOfStrs.remove_all()
    }
    
    outFile.close()
}

// in: pyObj (taken from the top level)
proc getAPCountLocationHint() { local apcIdx, x
    apcIdx = $1
    x = APCount[apcIdx].get_loc()
    {
        sprint($s2, "loc = %s( %s )", secname(), pyObj.str(x))
    }
    pop_section()
}

// in: pyObj (taken from the top level)
proc getAPCountThresholdHint() { local apcIdx
    apcIdx = $1
    sprint($s2, "thresh = %s (%s)", pyObj.str(APCount[apcIdx].thresh), units(&APCount[0].thresh))
}

proc getAPCountSpikeCounterHint() { local apcIdx
    apcIdx = $1
    sprint($s2, "n = %d", APCount[apcIdx].n)
}
