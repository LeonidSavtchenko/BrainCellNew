
begintemplate ECSSeriesInfo

    public isEqual, getNumImps
    public mechStd
    
    external codeContractViolation
    
    objref mechStd
    
    
    proc init() { local numArg localobj other
        numArg = numarg()
        if (numArg != 0 && numArg != 1 && numArg != 4) {
            codeContractViolation()
        }
        
        mechStd = new MechanismStandard("NetStim", 1)   // 1: PARAMETER
        
        if (numArg == 1) {
            other = $o1
            mechStd.in(other.mechStd)
        } else if (numArg == 4) {
                                            // !!! was (in legacy Diffusion3D.hoc):
            mechStd.set("interval", $1)     //      100 (IntervalRelease1)
            mechStd.set("number", $2)       //      1 (SwtichOn1)
            mechStd.set("start", $3)        //      1 (DelayInter1)
            mechStd.set("noise", $4)        //      0
        }
    }
    
    func isEqual() { local varIdx, arraySize, arrayIndex localobj other
        strdef varName
        
        other = $o1
        
        for varIdx = 0, mechStd.count() - 1 {
            // !!! maybe overkill: no arrays in NetStim PARAMETER-s (at least, in the current NEURON version)
            arraySize = mechStd.name(varName, varIdx)
            for arrayIndex = 0, arraySize - 1 {
                if (mechStd.get(varName, arrayIndex) != other.mechStd.get(varName, arrayIndex)) {
                    return 0
                }
            }
        }
        
        return 1
    }
    
    func getNumImps() {
        return mechStd.get("number")
    }
    
endtemplate ECSSeriesInfo
