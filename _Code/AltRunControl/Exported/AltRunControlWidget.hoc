
// This widget is a counterpart of the standard "RunControl" widget available via "Tools" -> "RunControl" or nrncontrolmenu()
// with the difference that it applies the stoch (and inhom) models defined in our program
begintemplate AltRunControlWidget

    public show, dismissHandler
    
    external cvode
    external v_init, runStopAt, runStopIn, tstop, steps_per_ms, screen_update_invl, realtime, running_
    external stdinit, run, continuerun, steprun, tstop_changed, setdt
    external alt_stdinit, alt_run, alt_continuerun, alt_steprun
    
    external inhomAndStochApplicator, inhomAndStochLibrary
    external mmIcrHelper
    external printNotImplementedMsgAndRaiseError
    
    objref mainBox
    
    isEnableStoch = -1
    
    
    proc init() {
        isEnableStoch = 1
    }
    
    proc show() {
        strdef label
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            // Making this widget look alike the standard one as close as possible
            // see "%NEURONHOME%\lib\hoc\stdrun.hoc" -> proc nrncontrolmenu()
            
            // !! the units are not added for 6 params below automatically (maybe because we are inside a template here in contrast to RunControl), so have to use some workaround
            
            xpanel("")
            
            // xpvalue("Init", &v_init, 1, "initHandler()", 1)  // No units
            label = "Init (%s)"
            addUnitsFrom(label, "v_init")
            xpvalue(label, &v_init, 1, "initHandler()", 1)
            
            xbutton("Init & Run", "initAndRunHandler()")
            
            xbutton("Stop", "stoprun = 1")
            
            // xpvalue("Continue til", &runStopAt, 1, "continueTilHandler()", 1)    // No units
            label = "Continue til (%s)"
            addUnitsFrom(label, "runStopAt")
            xpvalue(label, &runStopAt, 1, "{ continueTilHandler() stoprun = 1 }", 1)
            
            // xpvalue("Continue for", &runStopIn, 1, "continueForHandler()", 1)    // No units
            label = "Continue for (%s)"
            addUnitsFrom(label, "runStopIn")
            xpvalue(label, &runStopIn, 1, "{ continueForHandler() stoprun = 1 }", 1)
            
            xbutton("Single Step", "singleStepHandler()")
            
            xpvalue("t", &t)
            
            // xpvalue("Tstop", &tstop, 1, "tstop_changed()")   // No units
            label = "Tstop (%s)"
            addUnitsFrom(label, "tstop")
            xpvalue(label, &tstop, 1, "tstop_changed()")
            
            xpvalue("dt", &dt, 1, "setdt()")
            
            xpvalue("Points plotted/ms", &steps_per_ms, 1, "setdt()")
            
            // xpvalue("Scrn update invl", &screen_update_invl, 1)  // No units
            label = "Scrn update invl (%s)"
            addUnitsFrom(label, "screen_update_invl")
            xpvalue(label, &screen_update_invl, 1)
            
            // xpvalue("Real Time", &realtime)  // No units
            label = "Real Time (%s)"
            addUnitsFrom(label, "realtime")
            xpvalue(label, &realtime)
            
            xpanel()
            
            xpanel("")
            xlabel("Warning: If you use the standard \"RunControl\"")
            xlabel("widget instead of this one,")
            xlabel("then all stochasticity models defined")
            xlabel("in our program won't be applied.")
            // !! the same for inhomogeneity models applied to ASSIGNED and STATE vars
            xpanel()
            
            xpanel("")
            xcheckbox("Enable stochasticity", &isEnableStoch)
            xpanel()
            
            // !! maybe add a button here to reset all RNGs used by the stoch manager
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("AltRunControl", 200, 575, -1, -1)
    }
    
    proc dismissHandler() {
        mainBox.unmap()
    }
    
    // All next staff is private
    
    
    proc initHandler() {
        rescanBiophysCompsIfNeeded()
        if (!isEnableStoch) {
            stdinit()
        } else {
            checkCVodeStochPrereqs()
            alt_stdinit()
        }
    }
    
    proc initAndRunHandler() { local isWaitingForCallbacks
        rescanBiophysCompsIfNeeded()
        if (!isEnableStoch) {
            run()
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                run()
            } else {
                alt_run()
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
    }
    
    proc continueTilHandler() { local isWaitingForCallbacks
        rescanBiophysCompsIfNeeded()
        if (!isEnableStoch) {
            continuerun(runStopAt)
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                continuerun(runStopAt)
            } else {
                alt_continuerun(runStopAt)
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
    }
    
    proc continueForHandler() { local tStopAt, isWaitingForCallbacks
        rescanBiophysCompsIfNeeded()
        tStopAt = t + runStopIn
        if (!isEnableStoch) {
            continuerun(tStopAt)
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                continuerun(tStopAt)
            } else {
                alt_continuerun(tStopAt)
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
    }
    
    proc singleStepHandler() { local isWaitingForCallbacks
        rescanBiophysCompsIfNeeded()
        if (!isEnableStoch) {
            steprun()
        } else {
            checkCVodeStochPrereqs()
            isWaitingForCallbacks = inhomAndStochApplicator.startPlayingVars()
            if (!isWaitingForCallbacks) {
                steprun()
            } else {
                alt_steprun()
            }
            inhomAndStochApplicator.stopPlayingVars()
        }
    }
    
    proc rescanBiophysCompsIfNeeded() { localobj nil
        if (mmIcrHelper != nil) {
            mmIcrHelper.makeSureMechCompsCreatedOrImportedAndRescanned()
        }
    }
    
    proc checkCVodeStochPrereqs() {
        if (cvode.active() && inhomAndStochLibrary.isAnyStochVars()) {
            printNotImplementedMsgAndRaiseError("Cannot run simulation with stoch models and variable time step \"dt\".")
        }
    }
    
    proc addUnitsFrom() {
        sprint($s1, $s1, units($s2))
    }
    
endtemplate AltRunControlWidget
