
// !! need to unify showMessageBox, showWarningBox and showPleaseWaitBox procs

begintemplate MessageWarningHelper

    public showMessageBox, showWarningBox, showNotImplementedWarning, startIntercepting, endIntercepting, showPleaseWaitBox, hidePleaseWaitBox
    
    external getNotImplementedLines, codeContractViolation
    external eachItemInList
    
    objref msgWarnBox, waitBox
    
    isIntMode = -1
    numInts = -1
    objref intMsgLines, intWarnLines
    strdef lastIntMsgTitle
    
    x = -1
    y = -1
    
    strdef warnTitle
    
    
    proc init() {
        isIntMode = 0
        numInts = -1
        intMsgLines = new List()
        intWarnLines = new List()
        
        x = 500
        y = 300
        
        warnTitle = "Warning"
    }
    
    // Show the message box with "OK" button OR intercept all message lines and the title to show them later
    // Restriction: Cannot be called in the process of construction of a panel (applied if !isIntMode)
    // $si, i from 1 to numarg()-1 - All lines of the message
    // $si, i=numarg() - The widget title
    proc showMessageBox() { local numArg, i
        numArg = numarg()
        
        if (isIntMode) {
            if (intMsgLines.count() != 0) {
                intMsgLines.append(new String("--------------------"))
            }
            for i = 1, numArg - 1 {
                intMsgLines.append(new String($si))
            }
            lastIntMsgTitle = $si       // here i == numArg
            numInts += 1
            return
        }
        
        dismissHandler()
        
        msgWarnBox = new VBox()
        msgWarnBox.intercept(1)
        {
            xpanel("")
            for i = 1, numArg - 1 {
                xlabel($si)
            }
            xbutton("OK", "dismissHandler()")
            xpanel()
        }
        msgWarnBox.dismiss_action("dismissHandler()")
        msgWarnBox.intercept(0)
        msgWarnBox.map($si, x, y, -1, -1)   // here i == numArg
    }
    
    // Show warning box with "OK" button OR intercept all warning lines to show them later
    // Restriction: Cannot be called in the process of construction of a panel (applied if !isIntMode)
    // $si - The lines of the warning
    // $oi - (List of String-s) The lines of the warning to be shown as a bulleted list
    proc showWarningBox() { local numArg, i, argType localobj listOfStrs, strObj
        strdef str
        
        numArg = numarg()
        
        if (isIntMode) {
            if (intWarnLines.count() != 0) {
                intWarnLines.append(new String("--------------------"))
            }
            // !!! keep in sync with similar cycle below
            for i = 1, numArg {
                argType = argtype(i)
                if (argType == 2) {         // 2: strdef
                    intWarnLines.append(new String($si))
                } else if (argType == 1) {  // 1: objref
                    listOfStrs = $oi
                    for eachItemInList(strObj, listOfStrs) {
                        sprint(str, "    * %s", strObj.s)
                        intWarnLines.append(new String(str))
                    }
                } else {
                    codeContractViolation()
                }
            }
            numInts += 1
            return
        }
        
        dismissHandler()
        
        msgWarnBox = new VBox()
        msgWarnBox.intercept(1)
        {
            xpanel("")
            // !!! keep in sync with similar cycle above
            for i = 1, numArg {
                argType = argtype(i)
                if (argType == 2) {         // 2: strdef
                    xlabel($si)
                } else if (argType == 1) {  // 1: objref
                    listOfStrs = $oi
                    for eachItemInList(strObj, listOfStrs) {
                        sprint(str, "    * %s", strObj.s)
                        xlabel(str)
                    }
                } else {
                    codeContractViolation()
                }
            }
            xbutton("OK", "dismissHandler()")
            xpanel()
        }
        msgWarnBox.dismiss_action("dismissHandler()")
        msgWarnBox.intercept(0)
        msgWarnBox.map(warnTitle, x, y, -1, -1)
    }
    
    // Show "Not implemented" warning box with "OK" button OR intercept all warning lines to show them later
    // Restriction: Cannot be called in the process of construction of a panel (applied if !isIntMode)
    // $s1 (optional) - The first line of the warning
    // $s2 (optional) - The second line of the warning
    // !!!! $s3, $s4, $s5
    proc showNotImplementedWarning() { local numArg
        strdef line1, line2
        getNotImplementedLines(line1, line2)
        numArg = numarg()
        if (numArg == 0) {
            showWarningBox(line1, line2)
        } else if (numArg == 1) {
            showWarningBox($s1, line1, line2)
        } else if (numArg == 2) {
            showWarningBox($s1, $s2, line1, line2)
        } else if (numArg == 5) {
            showWarningBox($s1, $s2, $s3, $s4, $s5, line1, line2)
        } else {
            codeContractViolation()
        }
    }
    
    proc startIntercepting() {
        if (isIntMode) {
            codeContractViolation()
        }
        isIntMode = 1
        numInts = 0
    }
    
    // Restriction: Cannot be called in the process of construction of a panel
    proc endIntercepting() { local isSomeWarns, isSomeMsgs, isOnlyOneWarn, isOnlyOneMsg
        strdef title
        
        if (!isIntMode) {
            codeContractViolation()
        }
        isIntMode = 0
        
        if (numInts == 0) {
            return
        }
        
        dismissHandler()
        
        isSomeWarns = (intWarnLines.count() != 0)
        isSomeMsgs = (intMsgLines.count() != 0)
        isOnlyOneWarn = (numInts == 1 && !isSomeMsgs)
        isOnlyOneMsg = (numInts == 1 && !isSomeWarns)
        
        msgWarnBox = new VBox()
        msgWarnBox.intercept(1)
        {
            xpanel("")
            if (isSomeWarns) {
                dumpAllIntLines(intWarnLines, isOnlyOneWarn, warnTitle)
            }
            if (isSomeMsgs) {
                dumpAllIntLines(intMsgLines, isOnlyOneMsg, "Message")
            }
            xbutton("OK", "dismissHandler()")
            xpanel()
        }
        msgWarnBox.dismiss_action("dismissHandler()")
        msgWarnBox.intercept(0)
        if (isOnlyOneWarn) {
            title = warnTitle
        } else if (isOnlyOneMsg) {
            title = lastIntMsgTitle
        } else {
            title = "Warnings and messages"
        }
        msgWarnBox.map(title, x, y, -1, -1)
        
        numInts = -1
        intWarnLines.remove_all()
        intMsgLines.remove_all()
        lastIntMsgTitle = ""
    }
    
    // Show "Please wait" message box with "OK" button
    // It's safe to call this many times in a row (each new box replaces the previous)
    // Restriction: Cannot be called in the process of construction of a panel
    // $si - All lines of the message
    proc showPleaseWaitBox() { local numArg, i localobj nil
        numArg = numarg()
        
        // Each new "Please wait" box replaces the previous
        hidePleaseWaitBox()
        
        waitBox = new VBox()
        waitBox.intercept(1)
        {
            xpanel("")
            for i = 1, numArg {
                xlabel($si)
            }
            xlabel("Please wait ...")
            xbutton("OK", "hidePleaseWaitBox()")
            xpanel()
        }
        waitBox.dismiss_action("hidePleaseWaitBox()")
        waitBox.intercept(0)
        waitBox.map("Slow operation", x, y, -1, -1)
    }
    
    // Hide "Please wait" message box
    // It's safe to call this many times in a row
    proc hidePleaseWaitBox() { localobj nil
        if (waitBox != nil) {
            waitBox.unmap()
            waitBox = nil
        }
    }
    
    // All next staff is private
    
    
    proc dumpAllIntLines() { local isOnlyOneWarnOrMsg localobj intLines, line
        strdef name, text
        
        intLines = $o1
        isOnlyOneWarnOrMsg = $2
        name = $s3
        
        if (!isOnlyOneWarnOrMsg) {
            sprint(text, "========== %s(s) ==========", name)
            xlabel(text)
        }
        for eachItemInList(line, intLines) {
            xlabel(line.s)
        }
        if (!isOnlyOneWarnOrMsg) {
            xlabel("")
        }
    }
    
    proc dismissHandler() { localobj nil
        if (msgWarnBox != nil) {
            msgWarnBox.unmap()
        }
    }
    
endtemplate MessageWarningHelper


objref mwh
mwh = new MessageWarningHelper()
