
begintemplate InterModularCompUtils

    public makeSureAllCompsCreatedOrImportedAndRescanned, getNumDistMechComps, getAllDistMechCompNames, getReservedNanoDistMechCompNames, findDistMechCompByName, getComp
    
    external mmAllComps, smAllComps
    external isAstrocyteOrNeuron
    external makeSureSynCompsCreatedOrImported, stringsEqual, codeContractViolation
    external mmIcrHelper
    external eachItemInList
    
    
    // !! not intermodular actually
    proc makeSureAllCompsCreatedOrImportedAndRescanned() { localobj nil
        mmIcrHelper.makeSureMechCompsCreatedOrImportedAndRescanned()
        if (!isAstrocyteOrNeuron) {
            makeSureSynCompsCreatedOrImported()
        }
    }
    
    func getNumDistMechComps() {
        return mmAllComps.count()
    }
    
    // !! not intermodular actually
    obfunc getAllDistMechCompNames() { localobj compNames, mechComp
        compNames = new List()
        for eachItemInList(mechComp, mmAllComps) {
            compNames.append(new String(mechComp.name))
        }
        return compNames
    }
    
    obfunc getReservedNanoDistMechCompNames() { localobj compNames
        compNames = new List()
        // It's a code contract that the order of names below cooresponds to nanoProximal_ref and then nanoDistal_ref
        if (isAstrocyteOrNeuron) {
            compNames.append(new String("Small Glia"))
            compNames.append(new String("Large Glia"))
        } else {
            compNames.append(new String("Spine Neck"))
            compNames.append(new String("Spine Head"))
        }
        return compNames
    }
    
    func findDistMechCompByName() { local isErrorIfNotFound, compIdx localobj comp, nil
        strdef compName
        
        compName = $s1
        isErrorIfNotFound = $2
        
        for compIdx = 0, getNumDistMechComps() - 1 {
            comp = mmAllComps.o(compIdx)
            if (!stringsEqual(comp.name, compName)) {
                continue
            }
            $o3 = comp
            return compIdx
        }
        
        if (isErrorIfNotFound) {
            codeContractViolation()
        } else {
            $o3 = nil
            return -1
        }
    }
    
    obfunc getComp() { local isDmOrSynPart, compIdx
        isDmOrSynPart = $1
        compIdx = $2
        if (isDmOrSynPart) {
            return mmAllComps.o(compIdx)
        } else {
            return smAllComps.o(compIdx)
        }
    }
    
endtemplate InterModularCompUtils


objref compUtils
compUtils = new InterModularCompUtils()
