
begintemplate MechsDllUtils

    public ifMissingInThisFolderThenLoadDefaultMechsDllDependingOnCellType, loadDefaultMechsDllDependingOnCellType, isThisMechForIntUseOnly
    public loadedNanoHocFilePathName, loadedDllDirPath
    
    external isAstrocyteOrNeuron
    external mechSettings, pyObj
    external checkIfFileMissing, findItemInListByString, getCellTypeName, printMsgAndRaiseError
    
    strdef startDir, loadedNanoHocFilePathName, loadedDllDirPath
    objref mechsForIntUseOnly
    
    
    proc init() {
        startDir = $s1
        
        mechsForIntUseOnly = new List()
        mechsForIntUseOnly.append(new String("SynEventsFilterWatcher"))
        mechsForIntUseOnly.append(new String("ECDCalcAndConsHelper"))
        mechsForIntUseOnly.append(new String("ECDSeriesHelper"))
    }
    
    // This proc is called from the nanogeometry file when user loads it back into the main program
    proc ifMissingInThisFolderThenLoadDefaultMechsDllDependingOnCellType() { local isMissing
        strdef pyCommand, dllDirPath, dllFilePathName, cellTypeName, line2
        
        sprint(pyCommand, "'%s'.rsplit('/', 1)[0]", loadedNanoHocFilePathName)
        dllDirPath = pyObj.ev(pyCommand)
        sprint(dllFilePathName, "%s/nrnmech.dll", dllDirPath)
        isMissing = checkIfFileMissing(dllFilePathName)
        if (isMissing) {
            print "\n\n    Warning: There is no \"nrnmech.dll\" in the same folder with the loaded nanogeometry HOC file."
            getCellTypeName(cellTypeName)
            sprint(line2, "             We will load our default DLL for %s cell type with no guarantee that it matches this HOC file.\n", cellTypeName)
            print line2
            loadDefaultMechsDllDependingOnCellType()
        } else {
            _loadMechsDllFromThisFolder(dllDirPath)
        }
    }
    
    proc loadDefaultMechsDllDependingOnCellType() {
        strdef subFolderName, dllDirPath
        getCellTypeName(subFolderName)
        sprint(dllDirPath, "%sMechanisms/%s", startDir, subFolderName)
        _loadMechsDllFromThisFolder(dllDirPath)
    }
    
    func isThisMechForIntUseOnly() { local idxOrMinus1
        strdef mechName
        mechName = $s1
        idxOrMinus1 = findItemInListByString(mechsForIntUseOnly, mechName)
        return (idxOrMinus1 != -1)
    }
    
    // All next staff is private
    
    
    proc _loadMechsDllFromThisFolder() { local status
        strdef dllDirPath, pyCommand, dllFilePathName
        
        dllDirPath = $s1
        
        // Just to make the path printed by "nrn_load_dll" consistent with the one
        // printed when NEURON loads the DLL automatically from the current folder
        sprint(pyCommand, "'%s'.replace('/', '\\\\')", dllDirPath)
        dllDirPath = pyObj.ev(pyCommand)
        
        sprint(dllFilePathName, "%s\\nrnmech.dll", dllDirPath)
        // !! BUG: after execution of the next command, the console prompt "oc>" disappears
        //         for unknown reason until user presses "Enter"
        status = nrn_load_dll(dllFilePathName)
        if (!status) {
            printMsgAndRaiseError("Failed to load \"nrnmech.dll\"")
        }
        
        loadedDllDirPath = dllDirPath
        
        // !!! maybe not the best place for this
        mechSettings.onDllLoad()
    }
    
endtemplate MechsDllUtils
