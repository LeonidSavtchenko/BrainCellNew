
{ load_file("Exported/InterModularSectionUtils_Exported.hoc") }


// Get the name of the currently accessed section (either object name or array name)
// Does not work if the section owned by a template!!
// $s1 (output) - The section name
proc getCurrentSecName() { local idx localobj strFunc
    strdef secName
    
    strFunc = new StringFunctions()
    
    idx = strFunc.head(secname(), "\\[", secName)
    if (idx == -1) {
        // This section is an object rather than array
        secName = secname()
    }
    
    $s1 = secName
}

// Get names of all created sections (either object name or array name)
// Does not work if there is a section owned by a template!!
// Returns List of String-s containing all unique names
obfunc getAllSectionNames() { local idxOrMinus1 localobj secNames
    strdef secName
    
    secNames = new List()
    
    forall {
        getCurrentSecName(secName)
        
        // Check if we have found this name before
        // !! improve performace here using Set in Python
        idxOrMinus1 = findItemInListByString(secNames, secName)
        
        if (idxOrMinus1 == -1) {
            secNames.append(new String(secName))
        }
    }
    
    return secNames
}

// For all sections from this SectionList, add corresponding SectionRef to the List
// $o1 - The SectionList
// $o2 - The List
proc secListToListOfSecRef() { localobj secList, list_ref
    secList = $o1
    list_ref = $o2
    forsec secList {
        list_ref.append(new SectionRef())
    }
}

obfunc listOfSecRefToSecList() { localobj list_ref, secList
    list_ref = $o1
    secList = new SectionList()
    for eachSecInList(list_ref) {
        secList.append()
    }
    return secList
}

// Delete all sections
// (The names remain declared and cannot be used for anything else than creating new sections and section arrays)
proc deleteAllSections() {
    forall {
        delete_section()
    }
}

func capDiam() {
    // If user sets too small "diam" for a section, NEURON resets it to 1e-9 when user enters
    //  Tools -> Distributed Mechanisms -> Viewers -> Shape Name
    // and then double clicks on a section in the list.
    // So we cap "diam" in advance just to avoid the unexpected behaviour later.
    return math.max($1, 1e-9)
}
