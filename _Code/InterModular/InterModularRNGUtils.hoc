
// Here we create all the random number generators used in the program.
// The idea behind this file is to make sure that all the generators have different seeds.
// We don't use a single generator for the whole program just to preserve reproducibility of results in module A independently on:
// * the changes made to code in module B;
// * the scenarios run with module C in the current session.

// Keep in sync with ReducedRNGUtils
begintemplate RNGUtils

    public getFor_diameters, getFor_nano_branchSeeder, getFor_nano_diamAndLen, getFor_nano_spineRadius, getFor_nano_neckLen, getFor_nano_neckDiam, getFor_synLoc, getFor_ecd, getFor_sim_gabaDiffusion, getFor_sim_frapCircle, getFor_sim_calciumDynamics, getFor_stochFunc_withUniqueSeed, getFor_stretch_withCustomSeed, getSeedFor_SEFW
    
    uniqueSeedForHoc = -1
    uniqueSeedForMod = -1
    
    
    proc init() { local minSeedForMod, maxNumSeedsPerRankForMod localobj pc
        uniqueSeedForHoc = 11   // Keep in sync with the obfunc-s below and ReducedRNGUtils
        
        if (!use_mcell_ran4()) {
            minSeedForMod = 0       // HOC and MOD use different RNGs, so we don't care about seeds overlapping
        } else {
            minSeedForMod = 10000   // HOC and MOD can use the same RNG, so we try to prevent seeds overlapping
        }
        
        // How many times user can change synapse structure per 1 session with the guarantee of unique seeds
        // (important only when pc.nhost() > 1)
        maxNumSeedsPerRankForMod = 1000
        
        pc = new ParallelContext()
        uniqueSeedForMod = minSeedForMod + maxNumSeedsPerRankForMod * pc.id
    }
    
    obfunc getFor_diameters() {
        return new Random()     // The same as new Random(0)
    }
    
    obfunc getFor_nano_branchSeeder() {
        return new Random(1)
    }
    
    obfunc getFor_nano_diamAndLen() {
        return new Random(2)
    }
    
    obfunc getFor_nano_spineRadius() {
        return new Random(3)
    }
    
    obfunc getFor_nano_neckLen() {
        return new Random(4)
    }
    
    obfunc getFor_nano_neckDiam() {
        return new Random(5)
    }
    
    obfunc getFor_synLoc() {
        return new Random(6)
    }
    
    obfunc getFor_ecd() {
        return new Random(7)
    }
    
    obfunc getFor_sim_gabaDiffusion() {
        return new Random(8)
    }
    
    obfunc getFor_sim_frapCircle() {
        return new Random(9)
    }
    
    obfunc getFor_sim_calciumDynamics() {
        return new Random(10)   // Must be equal to uniqueSeedForHoc - 1
    }
    
    obfunc getFor_stochFunc_withUniqueSeed() { localobj rng
        rng = new Random(uniqueSeedForHoc)
        uniqueSeedForHoc += 1
        return rng
    }
    
    // $1 - The seed
    obfunc getFor_stretch_withCustomSeed() {
        return new Random($1)
    }
    
    func getSeedFor_SEFW() { local seed
        seed = uniqueSeedForMod
        uniqueSeedForMod += 1
        return seed
    }
    
endtemplate RNGUtils

objref rngUtils
rngUtils = new RNGUtils()
