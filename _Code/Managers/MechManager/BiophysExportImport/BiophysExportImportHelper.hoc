
begintemplate BiophysExportImportHelper

    public export, import
    public exportStage2, importStage2, importStage3, importForSim
    
    external mmAllComps
    external stringsEqual, stringCapitalize, getNotImplementedLines, getCellTypeName, printPythonErrMsgAndStop
    external pyObj, fbh, mth, mwh
    external mechManagerMainWidget, mmmowb
    external pyEnumOutFileTypes, pyEnumInFileTypes
    external eachItemInList
    
    objref mmeibWidget
    
    objref biophysJsonFileHelper
    strdef jsonFilePathName     // !!! ?? use two different vars for export and import?
    
    
    proc init() { local status
        strdef pyCommand
        
        pyCommand = "import sys\nimport os\nsys.path.append(os.getcwd() + '\\PythonCode')\nfrom BiophysJsonFileHelper import BiophysJsonFileHelper"
        
        status = nrnpython(pyCommand)
        if (!status) {
            printPythonErrMsgAndStop("BiophysExportImportHelper ctor")
        }
        
        biophysJsonFileHelper = pyObj.BiophysJsonFileHelper()
    }
    
    proc export() { local status
        mmeibWidget = $o1
        
        // !!!!!! check for pending changes in mech comps as well
        
        // !!!!! this is just a half-measure because user can make some changes to biophysics just before the click on "Export" button in "Export of biophysics" widget
        // !!!!! maybe move this code to (or duplicate in) exportStage2
        status = mmmowb.ifDirtyThenProposeUserToApplyChanges("export")
        if (status == 1) {
            return
        }
        
        if (status == 2) {
            // !!!!!
            mwh.endIntercepting()
        }
        
        // !!!!?? mmmowb.dismissHandler()
        
        mmeibWidget.show(1)     // --> exportStage2
    }
    
    proc exportStage2() { local isCancel, isError localobj options
        
        options = $o1
        
        // !!! need to close it somehow once user closes any of parent widgets
        isCancel = fbh.showSaveFileDialog(pyEnumOutFileTypes.biophysJson, jsonFilePathName)
        if (isCancel) {
            return
        }
        
        // It can take a while to export all VerbatimDistFuncHelper inhom models
        mwh.showPleaseWaitBox("Exporting biophysics file.")
        {
            isError = biophysJsonFileHelper.exportStage2(jsonFilePathName, options)
            if (isError) {
                return
            }
        }
        mwh.hidePleaseWaitBox()
        
        showExportOrImportCompleteMsg(1, options)
        
        mmeibWidget.dismissHandler()
    }
    
    proc import() { local isCancel, isError
        mmeibWidget = $o1
        
        mmeibWidget.dismissHandler()
        
        // !!! need to close it somehow once user closes any of parent widgets
        isCancel = fbh.showLoadFileDialog(pyEnumInFileTypes.biophysJson, jsonFilePathName)
        if (isCancel) {
            return
        }
        
        isError = biophysJsonFileHelper.importStage1(jsonFilePathName)  // --> importStage2
        if (isError) {
            return
        }
    }
    
    proc importStage2() { local numInhomVars, numStochVars, numComps, compIdx, isFound localobj compNames, missingCompNames, isBlockThisCompNameVec, isUseThisCompNameVec, mechComp
        strdef compName, line1, line2
        
        compNames = $o1
        numInhomVars = $2
        numStochVars = $3
        
        numComps = compNames.count()
        
        missingCompNames = new List()
        isBlockThisCompNameVec = new Vector(numComps)   // All zeros by default
        isUseThisCompNameVec = new Vector(numComps)
        
        // Populate missingCompNames, isBlockThisCompNameVec and isUseThisCompNameVec
        for compIdx = 0, numComps - 1 {
            compName = compNames.o(compIdx).s
            isFound = 0
            for eachItemInList(mechComp, mmAllComps) {
                if (stringsEqual(compName, mechComp.name)) {
                    isFound = 1
                    break
                }
            }
            if (!isFound) {
                missingCompNames.append(new String(compName))
                isBlockThisCompNameVec.x[compIdx] = 1
            }
            isUseThisCompNameVec.x[compIdx] = isFound
        }
        
        mmeibWidget.show(0, compNames, numInhomVars, numStochVars, isBlockThisCompNameVec, isUseThisCompNameVec)    // --> importStage3
        
        if (missingCompNames.count() == 0) {
            return
        }
        
        line1 = "The following comps are declared in the imported file, but missing in the recipient cell, so cannot be imported:"
        line2 = "(You can use \"Rename\" or \"Split\" compartment operations and repeat the import.)"
        mwh.showWarningBox(line1, missingCompNames, "", line2, "")
    }
    
    proc importStage3() { local isError localobj options
        options = $o1
        
        // It can take a while to apply all inhom models
        mwh.showPleaseWaitBox("Importing biophysics file.")
        {
            isError = biophysJsonFileHelper.importStage3(options)
            if (isError) {
                return
            }
        }
        mwh.hidePleaseWaitBox()
        
        // The widget could be closed if we imported the astrocyte-specific inhom model for "g_pas"
        // that required the call of proc distrSelectedLeaves() which closes the widget
        // mechManagerMainWidget.mechOpSelectHandler()
        mechManagerMainWidget.updateVisibleMechOpChilds()
        
        showExportOrImportCompleteMsg(0, options)
        
        mmeibWidget.dismissHandler()
    }
    
    proc importForSim() { local isError
        strdef jsonFileName, cellTypeName, jsonFilePathName
        
        jsonFileName = $s1
        
        getCellTypeName(cellTypeName)
        sprint(jsonFilePathName, "%sBiophysics/%s/%s", getcwd(), cellTypeName, jsonFileName)
        
        // It can take a while to apply all inhom models
        mwh.showPleaseWaitBox("Importing biophysics file.")
        {
            isError = biophysJsonFileHelper.importForSim(jsonFilePathName)
            if (isError) {
                return
            }
        }
        mwh.hidePleaseWaitBox()
    }
    
    // All next staff is private
    
    
    proc showExportOrImportCompleteMsg() { local isExportOrImport, cond localobj options
        strdef word, Word, line1, line2, line3, line4, line5, line6, line7, msg
        
        isExportOrImport = $1
        options = $o2
        
        if (isExportOrImport) {
            word = "export"
        } else {
            word = "import"
        }
        stringCapitalize(word, Word)
        
        mwh.startIntercepting()
        {
            sprint(line1, "Here is what we don't %s at the moment (the list is incomplete):", word)
            line2 = "    * GLOBAL vars of biophys mechs"
            line3 = "    * \"Ra\" variable in the sections (for now it's %s)"
            if (isExportOrImport) {
                sprint(line3, line3, "exported only by \"Manager of export\"")
            } else {
                sprint(line3, line3, "imported only on the beginning in \"Start with Nano geometry\" mode")
            }
            cond = options.isAnyStochModels()   // !!! false positive here when user disables export/import of a specific compartment or ASSIGNED and STATE vars
            if (cond) {
                line4 = "    * states of RNGs"
            }
            getNotImplementedLines(line5, line6)
            sprint(line7, "Also, please notice that \"%s\" mech is not %sed as a part of biophysics.", mth.morphologyMechName, word)
            if (cond) {
                mwh.showWarningBox(line1, line2, line3, line4, "", line5, line6, "", line7)
            } else {
                mwh.showWarningBox(line1, line2, line3, "", line5, line6, "", line7)
            }
            
            sprint(msg, "%s complete successfully", Word)
            mwh.showMessageBox(msg, "Complete")
        }
        mwh.endIntercepting()
    }
    
endtemplate BiophysExportImportHelper

objref beih
beih = new BiophysExportImportHelper()
