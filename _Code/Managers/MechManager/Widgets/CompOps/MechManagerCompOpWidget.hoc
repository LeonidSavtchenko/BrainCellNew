
begintemplate MechManagerCompOpWidget

    public show, dismissHandler, splitHandler_layer2, mergeHandler_layer2
    public mainBox
    
    external mmAllComps
    external mwh, mmmowb, mainUiLocker
    external chooseUniqueNameForCompartmentForMechManager, dismissIfNotNil, unmapIfNotNil
    external inhomAndStochLibrary
    
    objref mainBox
    objref parentWidget, cssSubWidget, mmcomSubWidget
    
    splitCompIdx = 0
    objref mergeCheckBoxStates  // Vector
    renameCompIdx = 0
    
    
    proc init() {
        parentWidget = $o1
    }
    
    proc show() { local compOpIdx, numComps, compIdx localobj comp
        strdef handlerHocCommand, title, label, text
        
        compOpIdx = $1
        
        numComps = mmAllComps.count()
        
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            if (compOpIdx == 0) {
                title = "Split 1 compartment into 2"
                sprint(label, "%s:", title)
                
                xpanel("")
                xlabel(label)
                for compIdx = 0, numComps - 1 {
                    comp = mmAllComps.o(compIdx)
                    prepareCompItemText(comp, text)
                    sprint(handlerHocCommand, "splitCompIdx = %d", compIdx)
                    xradiobutton(text, handlerHocCommand, splitCompIdx == compIdx)
                }
                xbutton("Split", "splitHandler()")
                xpanel()
                
            } else if (compOpIdx == 1) {
                title = "Merge 2+ compartments into 1"
                sprint(label, "%s:", title)
                mergeCheckBoxStates = new Vector(numComps, 0)
                
                xpanel("")
                xlabel(label)
                for compIdx = 0, numComps - 1 {
                    comp = mmAllComps.o(compIdx)
                    prepareCompItemText(comp, text)
                    xcheckbox(text, &mergeCheckBoxStates.x(compIdx))
                }
                xbutton("Next", "mergeHandler()")
                xpanel()
                
            } else if (compOpIdx == 2) {
                title = "Rename compartment"
                sprint(label, "%s:", title)
                
                xpanel("")
                xlabel(label)
                for compIdx = 0, numComps - 1 {
                    comp = mmAllComps.o(compIdx)
                    sprint(handlerHocCommand, "renameCompIdx = %d", compIdx)
                    xradiobutton(comp.name, handlerHocCommand, renameCompIdx == compIdx)
                }
                xbutton("Rename", "renameHandler()")
                xpanel()
                
            } else {
                codeContractViolation()
            }
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map(title, 60, 310, -1, -1)
    }
    
    // $o1 - !!
    // $s2 (out) - 
    proc prepareCompItemText() { local numSecs localobj comp
        strdef template
        
        comp = $o1
        
        numSecs = comp.list_ref.count()
        
        if (numSecs != 1) {
            template = "%s (%d secs)"
        } else {
            template = "%s (%d sec)"
        }
        sprint($s2, template, comp.name, numSecs)
    }
    
    // Input: this.splitCompIdx
    proc splitHandler() { local numSects, status localobj selected_ref
        
        numSects = mmAllComps.o(splitCompIdx).list_ref.count()
        
        if (numSects == 1) {
            mwh.showWarningBox("Cannot split this compartment because it contains only 1 section.")
            return
        }
        
        if (numSects == 2) {
            // Only two sections in this compartment, simply move the second one into the new compartment
            selected_ref = new List()
            selected_ref.append(mmAllComps.o(splitCompIdx).list_ref.o(1))
            status = splitHandler_layer2(selected_ref)
            if (status == 1) {
                return  // Cancelled
            }
            mwh.showMessageBox("The base compartment contained only 2 sections, so we divided them between two compartments.", "2 sections")
            if (status == 2) {
                mwh.endIntercepting()
            }
        } else {
            // Ask user to select the sections that will be moved into the new compartment
            cssSubWidget = new CompSubsetWidget(mmAllComps.o(splitCompIdx), 1)
            cssSubWidget.show()
            
            // All next operations are performed in splitHandler_layer2 (see below) once user is done with UI
        }
    }
    
    // $o1 - All the selected sections (List of SectionRef-s)
    // Returns: 0/1/2 flag indicating OK/Cancel/Applied respectively
    func splitHandler_layer2() { local isCancel, status localobj selected_ref, comp, newComp, nil
        strdef newCompName
        
        selected_ref = $o1
        
        comp = mmAllComps.o(splitCompIdx)
        
        if (selected_ref.count() == comp.list_ref.count()) {
            mwh.showWarningBox("Cannot split because you selected all the sections of this compartment.", "Please select only a subset.")
            return 1
        }
        
        // Select unique name for the new compartment
        isCancel = chooseUniqueNameForCompartmentForMechManager(comp.name, 1, newCompName)
        if (isCancel) {
            return 1
        }
        
        // !! maybe check mmAllComps.o(splitCompIdx).isCompDirty instead of mmmowb.isDirty?
        status = mmmowb.ifDirtyThenProposeUserToApplyChanges("split")
        if (status == 1) {
            return 1
        }
        
        if (mainUiLocker != nil) {  // !!! nil in tests
            isCancel = mainUiLocker.ifNanoCompThenMakeSureNanoUpdateLocked(comp.name)
            if (isCancel) {
                return 1
            }
        }
        
        newComp = comp.split(selected_ref, newCompName)
        mmAllComps.insrt(splitCompIdx + 1, newComp)
        
        inhomAndStochLibrary.onCompSplit(splitCompIdx)
        
        // !!
        newComp.finishAllVerbatimInhomProtos(splitCompIdx + 1)
        
        updateWidgetsAfterOp()
        
        if (status == 2) {
            mwh.endIntercepting()
        }
        
        return status
    }
    
    // Input: this.mergeCheckBoxStates
    proc mergeHandler() { local numMergedComps
    
        numMergedComps = mergeCheckBoxStates.sum()
        if (numMergedComps < 2) {
            mwh.showMessageBox("Please check at least 2 checkboxes.", "Nothing to merge")
            return
        }
        
        mmcomSubWidget = new MechManagerCompOpMergeSubWidget(mergeCheckBoxStates)
        mmcomSubWidget.show()
        
        // All next operations are performed in mergeHandler_layer2 (see below) once user is done with UI
    }
    
    proc mergeHandler_layer2() {
        updateWidgetsAfterOp()
    }
    
    // Input: this.renameCompIdx
    proc renameHandler() { local isCancel localobj comp, nil
        strdef newCompName
        
        // No check for mech dirtiness here - renaming is always OK
        
        comp = mmAllComps.o(renameCompIdx)
        
        isCancel = chooseUniqueNameForCompartmentForMechManager(comp.name, 0, newCompName)
        if (isCancel) {
            return
        }
        
        if (mainUiLocker != nil) {  // !!! nil in tests
            isCancel = mainUiLocker.ifNanoCompThenMakeSureNanoUpdateLocked(comp.name)
            if (isCancel) {
                return
            }
        }
        
        comp.name = newCompName
        
        updateWidgetsAfterOp()
    }
    
    proc updateWidgetsAfterOp() {
        parentWidget.updateVisibleMechOpChilds()
        parentWidget.compOpSelectHandler(1)     // This will update us as well
    }
    
    proc dismissHandler() {
        dismissIfNotNil(cssSubWidget)
        dismissIfNotNil(mmcomSubWidget)
        unmapIfNotNil(mainBox)
    }
    
endtemplate MechManagerCompOpWidget
