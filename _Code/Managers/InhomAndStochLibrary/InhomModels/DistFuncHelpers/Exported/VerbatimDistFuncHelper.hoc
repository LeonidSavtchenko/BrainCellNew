
begintemplate VerbatimDistFuncHelper

    public selectedHandler, calculateAt, onJustBeforeFirstSection, onJustBeforeNewSection, onJustAfterLastSection, exportParams, importParams, multiplyBy, dismissHandler
    public parentWidget
    
    external codeContractViolation
    external eachSegmInSecList
    
    objref parentWidget
    
    objref vecOfVals
    valueIdx = -1
    isInCycle = -1
    
    
    // When we are being created in the main program, this ctor is called from MechComp ctor in contrast to other *DistFuncHelper-s created from InhomEditorSubWidget ctor
    proc init() { local numArg, arrayIndex, x, value localobj list_ref, tempMechStd
        strdef varName
        
        numArg = numarg()
        
        if (numArg == 0) {
            // Empty by design (we are being created in the exported HOC file or in the process of biophys JSON import,
            // so will be inited in proc importParams shortly downstream)
        } else if (numArg == 4) {
            list_ref = $o1
            varName = $s2
            arrayIndex = $3
            tempMechStd = $o4
            
            vecOfVals = new Vector()
            
            for eachSegmInSecList(&x, list_ref) {
                tempMechStd.in(x)
                value = tempMechStd.get(varName, arrayIndex)
                vecOfVals.append(value)
            }
        } else {
            codeContractViolation()
        }
        
        valueIdx = -1
        isInCycle = 0
    }
    
    func selectedHandler() {
        return 0
    }
    
    func calculateAt() { local x, y
        x = $1      // Not used by design
        y = vecOfVals.x(valueIdx)
        valueIdx += 1
        return y
    }
    
    proc onJustBeforeFirstSection() {
        if (isInCycle) {
            codeContractViolation()
        }
        valueIdx = 0
        isInCycle = 1
    }
    
    proc onJustBeforeNewSection() {
        // Empty by design
    }
    
    // The only template where this proc does smth
    proc onJustAfterLastSection() {
        if (!isInCycle || valueIdx != vecOfVals.size()) {
            codeContractViolation()
        }
        valueIdx = -1
        isInCycle = 0
    }
    
    proc exportParams() { localobj listOfStrs
        // $o1 = vecOfVals  // RuntimeError: hocobj_call error
        $o1.copy(vecOfVals)
        listOfStrs = $o2    // Not used by design
    }
    
    proc importParams() { localobj listOfStrs
        vecOfVals = $o1
        listOfStrs = $o2    // Not used by design
        
        if (listOfStrs.count() != 0) {
            codeContractViolation()
        }
    }
    
    proc multiplyBy() { local factor
        factor = $1
        vecOfVals.mul(factor)
    }
    
    proc dismissHandler() {
        // Empty by design
    }
    
endtemplate VerbatimDistFuncHelper
