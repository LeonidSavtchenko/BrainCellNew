
begintemplate ZebraDistFuncHelper

    public selectedHandler, calculateAt, onJustBeforeFirstSection, onJustBeforeNewSection, onJustAfterLastSection, exportParams, importParams, dismissHandler
    public parentWidget
    public value
    
    external codeContractViolation
    
    objref parentWidget
    
    modelIdx = -1
    firstValue = -1
    
    value = -1
    
    
    proc init() { local numArg
    
        numArg = numarg()
        
        if (numArg == 0) {
            // Empty by design (we are being created in the exported HOC file or in the process of biophys JSON import,
            // so will be inited in proc importParams shortly downstream)
        } else if (numArg == 1) {
            setModelIdx($1)
            firstValue = -1
        } else {
            codeContractViolation()
        }
    }
    
    func selectedHandler() {
        return 0    // Both Graph-s will be hidden
    }
    
    func calculateAt() { local y
        y = value
        if (modelIdx == 0) {
            value = -value
        }
        return y
    }
    
    proc onJustBeforeFirstSection() {
        value = firstValue
        firstValue = -firstValue    // Each click on "Apply" inverts the pattern
    }
    
    // The only template where this proc does smth
    proc onJustBeforeNewSection() {
        if (modelIdx == 1) {
            value = -value
        }
    }
    
    proc onJustAfterLastSection() {
        // Empty by design
    }
    
    proc exportParams() { localobj vecOfVals, listOfStrs
        vecOfVals = $o1
        listOfStrs = $o2    // Not used by design
        
        vecOfVals.resize(2)
        vecOfVals.x(0) = modelIdx
        vecOfVals.x(1) = -firstValue    // Reverting the last flip
    }
    
    proc importParams() { localobj vecOfVals, listOfStrs
        vecOfVals = $o1
        listOfStrs = $o2    // Not used by design
        
        if (vecOfVals.size() != 2 || listOfStrs.count() != 0) {
            codeContractViolation()
        }
        
        setModelIdx(vecOfVals.x(0))
        firstValue = vecOfVals.x(1)
    }
    
    proc dismissHandler() {
        // Empty by design
    }
    
    // All next staff is private
    
    
    proc setModelIdx() {
        modelIdx = $1
        if (modelIdx < 0 || modelIdx > 1) {
            codeContractViolation()
        }
    }
    
endtemplate ZebraDistFuncHelper
