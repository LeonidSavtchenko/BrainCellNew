
begintemplate SpecialMath

    public factorial, gamma
    
    external pyObj
    external printMsgAndRaiseError
    
    
    func factorial() {
        // Converting to "int" just to avoid "DeprecationWarning: Using factorial() with floats is deprecated"
        // Code contract: $1 actually has no fractional part
        return _callPythonMathFunc("factorial", $1, 1)
    }
    
    func gamma() {
        return _callPythonMathFunc("gamma", $1, 0)
    }
    
    // All next staff is private
    
    
    func _callPythonMathFunc() { local x, isInteger, status
        strdef pyMathFuncName, pyCommandTemplate, pyCommand
        
        pyMathFuncName = $s1
        x = $2
        isInteger = $3
        
        pyObj.x = x
        
        if (isInteger) {
            pyCommandTemplate = "import math;y = math.%s(int(x))"
        } else {
            pyCommandTemplate = "import math;y = math.%s(x)"
        }
        
        sprint(pyCommand, pyCommandTemplate, pyMathFuncName)
        status = nrnpython(pyCommand)
        if (!status) {
            // !!!!! printPythonErrMsgAndStop
            printMsgAndRaiseError("Exception raised in Python code (caught in _callPythonMathFunc)")
        }
        
        return pyObj.y
    }
    
endtemplate SpecialMath

objref specMath
specMath = new SpecialMath()
