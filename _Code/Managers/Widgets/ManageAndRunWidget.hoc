
{ load_file("../../AltRunControl/Exported/alt_stdrun.hoc") }
loadIfNotDeclared("AltRunControlWidget", "../../AltRunControl/Exported/AltRunControlWidget.hoc")


objref ecsManagerMainWidget, exportManagerMainWidget

begintemplate ManageAndRunWidget

    public show, showBioManagerHandler, showSynManagerHandler, showECSManagerHandler, showAltRunControlHandler, onNanoReseedOrUpdateHandler, dismissHandler
    
    external isAstrocyteOrNeuron
    external mechManagerMainWidget, synManagerMainWidget, ecsManagerMainWidget, exportManagerMainWidget
    external mmAllComps, smAllSyns, synGroup
    external mwh, mmIcrHelper
    external inhomAndStochLibrary
    external dismissIfNotNil, codeContractViolation
    
    objref mainBox, this
    objref altRunControlWidget
    
    enumBioSynECS = -1
    
    
    proc init() {
        enumBioSynECS = $1
    }
    
    proc show() {
        mainBox = new VBox()
        mainBox.intercept(1)
        {
            xpanel("")
            if (enumBioSynECS == 0) {
                xbutton("Show biophys manager", "showBioManagerHandler()")
            } else if (enumBioSynECS == 1) {
                xbutton("Show synapse manager", "showSynManagerHandler()")
            } else if (enumBioSynECS == 2) {
                xbutton("Show ECS manager", "showECSManagerHandler()")
            } else {
                codeContractViolation()
            }
            xbutton("Show Alt Run Control", "showAltRunControlHandler()")
            xpanel()
        }
        mainBox.intercept(0)
        mainBox.dismiss_action("dismissHandler()")
        mainBox.map("Manage and Run", 25, 575, -1, -1)
    }
    
    proc showBioManagerHandler() { localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(mechManagerMainWidget)
        
        if (mmAllComps.count() == 0) {
            mwh.showWarningBox("Cannot open the biophys manager because there are no compartments.")
            return
        }
        
        mmIcrHelper.rescanNow()
        
        if (mechManagerMainWidget == nil) {
            execute("mechManagerMainWidget = new MechManagerMainWidget()", this)
        }
        
        mechManagerMainWidget.show()
        mechManagerMainWidget.mechOpSelectHandler()
    }
    
    proc showSynManagerHandler() { local isDisconnected, xMin, xMax localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(synManagerMainWidget)
        
        if (smAllSyns.count() == 0) {
            mwh.showWarningBox("Cannot open the synapse manager because there are no synapses.")
            return
        }
        
        if (synManagerMainWidget == nil) {
            execute("synManagerMainWidget = new SynManagerMainWidget()", this)
        }
        
        isDisconnected = synGroup.getDistRange(&xMin, &xMax)
        if (isDisconnected) {
            mwh.showWarningBox("Cannot edit inhomogeneity in synapses", "because at least one synapse target section doesn't have a topological connection with the distance centre.")
            
            // !! overkill here: we don't need to prevent opening the widget because user might wanted to do smth unrelated to inhomogeneity
            return
        }
        
        synManagerMainWidget.show(xMin, xMax)
    }
    
    proc showECSManagerHandler() { localobj nil
        dismissIfNotNil(exportManagerMainWidget)
        dismissIfNotNil(ecsManagerMainWidget)
        
        if (ecsManagerMainWidget == nil) {
            execute("ecsManagerMainWidget = new ExtracellularManagerMainWidget()", this)
        }
        
        ecsManagerMainWidget.show()
    }
    
    proc showAltRunControlHandler() {
        dismissIfNotNil(altRunControlWidget)
        altRunControlWidget = new AltRunControlWidget()
        altRunControlWidget.show()
    }
    
    proc onNanoReseedOrUpdateHandler() { local isReseedOrUpdate, enumRescanType localobj nil
        isReseedOrUpdate = $1
        
        if (isReseedOrUpdate && (mechManagerMainWidget != nil || synManagerMainWidget != nil || ecsManagerMainWidget != nil)) {
            // !!! must not be called because we block the panel in Main UI
            codeContractViolation()
        }
        
        if (!isAstrocyteOrNeuron) {
            if (inhomAndStochLibrary.getNumInhomVarsForSyns() != 0) {
                // !!! must not be called because we block the panel in Main UI
                codeContractViolation()
            }
            synGroup.reCalcAndCacheDistInSyns()
        }
        
        inhomAndStochLibrary.onNanoReseedOrUpdate()
        dismissManagers()
        
        enumRescanType = 4 - isReseedOrUpdate
        mmIcrHelper.scheduleRescan(enumRescanType)
    }
    
    proc dismissHandler() {
        dismissManagers()
        dismissIfNotNil(altRunControlWidget)
        mainBox.unmap()
    }
    
    // All next staff is private
    
    
    proc dismissManagers() {
        dismissIfNotNil(mechManagerMainWidget)
        dismissIfNotNil(synManagerMainWidget)
        dismissIfNotNil(ecsManagerMainWidget)
    }
    
endtemplate ManageAndRunWidget
