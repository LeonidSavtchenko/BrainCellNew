
// For the current section and all its children subtree, take only those sections which are selectable, and add SectionRef-s to the List
// $o1 - The List
// $o2 - The plugin object that implements "isCurrentSectSelectable" predicate func
proc addThisAndFilteredChildSecRefsToTheList() { localobj list_ref, in_plugin, secList
    list_ref = $o1
    in_plugin = $o2
    
    secList = new SectionList()
    secList.subtree()
    
    forsec secList {
        if (in_plugin.isCurrentSectSelectable()) {
            list_ref.append(new SectionRef())
        }
    }
}

// For all duplicate sections, remove SectionRef-s from the List, so only one copy remains
// $o1 - The List
proc removeAllDupSecRefsFromTheList() { localobj list_ref, secList
    list_ref = $o1
    
    secList = listOfSecRefToSecList(list_ref)
    secList.unique()
    
    list_ref.remove_all()
    secListToListOfSecRef(secList, list_ref)
}

// Check if the currently accessed section belongs to a dendrite
// Input: usedNamesForDendrites (taken from the top level)
// Returns: 0/1 flag
func checkIfCurrentSecIsDendrite() { local idxOrMinus1
    strdef secName
    
    getCurrentSecName(secName)
    
    // !! improve performance here using Set in Python
    idxOrMinus1 = findItemInListByString(usedNamesForDendrites, secName)
    
    return (idxOrMinus1 != -1)
}
