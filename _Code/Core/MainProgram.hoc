{ load_file("nrngui.hoc") }

if (isBaseOrNanoStart) {
    load_file("CellInit.hoc")
    load_file("CellUpdate.hoc")
    // !! move to caller file
    if (isAstrocyteOrNeuron) {
        load_file("../NanoCore/Astrocyte/AstrocyteNanoInitUpdate.hoc")
        objref nanoDistal_ref, nanoProximal_ref // !! just to source MechanismSwitch.hoc without errors
    }
    load_file("InitParamsMain.hoc")
}

{ load_file("MechanismSwitch.hoc") }

{ load_file("MainUi.hoc") }

{ load_file("GeometricalParameters.hoc") }


proc sourceSimulations() {
    load_file("_Code/Core/Simulations/SimFrapInCircleGeometry.hoc")         // !! this one depends on SizeTotal
    load_file("_Code/Core/Simulations/SimFrapLine.hoc")                     // !! this one depends on SizeTotal
    load_file("_Code/Core/Simulations/SimSpatialVoltageDistributions.hoc")
    load_file("_Code/Core/Simulations/SimConstantElectricalSimulations.hoc")
    load_file("_Code/Core/Simulations/SimFrequencyElectricalSimulation.hoc")
    load_file("_Code/Core/Simulations/SimCalciumDynamics.hoc")
    load_file("_Code/Core/Simulations/SimCalciumWave.hoc")
    load_file("_Code/Core/Simulations/SimGlutamate.hoc")
    load_file("_Code/Core/Simulations/SimPotassium.hoc")
}

objref apc

// Opens the main program window.
proc runMain() {
    if (isBaseOrNanoStart) {
        initCell()          // !! this does not init nanogeometry anymore
        initParamsMain()    // !! this does
        
        // One default APCount
        // (we create it after the call of "proc initCell" because the proc changes nseg in soma)
        soma_ref.o(0).sec apc = new APCount(0.5)    // "proc initCell" assigns an even value to nseg, so the location "0.5" will be corrected by NEURON a bit to match the segment centre
        apc.thresh = 0      // mV
    }
    sourceSimulations() // !!
    showRunControlPanel()
    showMainUi()
}
