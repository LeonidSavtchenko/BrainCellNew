
// !!! in showMainSubCore, don't call addPointsForVoltageInDendrites like in showFallbackSubCore,
//     but rather take the equidistant points along the _rangeVarPlot path starting at {sec1_ref, u1} and ending at {sec2_ref, u2}

// !!! add coloured markers on pathPlotShape indicating the observation points
// !!! add vertical coloured lines on rangeGraph indicating the observation points

// !!! maybe move this file to "Neuron" subfolder?

// !!! keeping it on the top level to be accessible from "execute"-ed HOC command
objref _rangeVarPlot

begintemplate SimVoltageCA1Neuron
    
    public show, dismissHandler
    public biophysJsonFileNameOrEmpty, isCustomProcAdvance
    
    external getDistRangeGivenSections, isDisconnectedDistance, secListToListOfSecRef, addVarToGraph, removeItemFromList, unmapIfNotNil, codeContractViolation
    external math, compUtils, mwh
    external eachPointInGrid, eachSegmInSecList
    external soma_ref, dendrite_ref
    external pyObj
    external graphList, flush_list
    external tstop
    external _rangeVarPlot
    
    strdef biophysJsonFileNameOrEmpty
    isCustomProcAdvance = -1
    objref timeGraphBox, pathAndRangeBox
    objref timeGraph, rangeGraph
    
    numDendPts = -1
    y_min = -1
    y_max = -1
    
    
    proc init() {
        biophysJsonFileNameOrEmpty = "SimVoltageCA1Neuron.json"
        isCustomProcAdvance = 0
        
        // !!! for numDendPts > 7, we have 2 bad colours and then repetition of colours:
        //     colourIdx = 10 is white, colourIdx = 11 is black, colourIdx = 12 is red etc.
        numDendPts = 5
        y_min = -80     // (mV)
        y_max = 40      // (mV)
    }
    
    proc show() { localobj pathPlotShape
        
        tstop = 100     // (ms)
        
        timeGraphBox = new VBox()
        timeGraphBox.intercept(1)
        {
            timeGraph = new Graph()
        }
        timeGraphBox.intercept(0)
        timeGraphBox.map("Time-Voltage graph", 10, 10, -1, -1)
        
        pathAndRangeBox = new HBox()
        pathAndRangeBox.intercept(1)
        {
            pathPlotShape = new PlotShape()
            rangeGraph = new Graph()
        }
        pathAndRangeBox.intercept(0)
        pathAndRangeBox.map("Path plot and Range-Voltage graph", 420, 10, -1, -1)
        
        showCore(pathPlotShape)
    }
    
    proc dismissHandler() {
        
        removeItemFromList(graphList[0], timeGraph)
        removeItemFromList(flush_list, rangeGraph)
        
        unmapIfNotNil(timeGraphBox)
        unmapIfNotNil(pathAndRangeBox)
    }
    
    // All next staff is private
    
    
    proc showCore() { local colourIdx, x_min, x_max, isDisconnected localobj pathPlotShape, pyVarsSet, proxDendCompOrNil, distDendCompOrNil, pathSecList, nil
        strdef var
        
        pathPlotShape = $o1
        
        // pathPlotShape.menu_remove("3D Rotate")   // !!! error here: menu_remove not a public member of PlotShape
        pathPlotShape.color_all(9)                  // Grey
        
        pyVarsSet = pyObj.set()
        _rangeVarPlot = new RangeVarPlot("v")
        
        // !!!! move the legend to the top-right corner
        
        soma_ref.o(0).sec {
            sprint(var, "%s.v(0.5)", secname())
        }
        pyVarsSet.add(var)
        colourIdx = 2   // Red      !!! maybe use Blue here not to confuse with pathPlotShape and rangeGraph palette
        /* !!!!
        getSegmXYZ(secName, 0.5, &x, &y, &z)
        pathPlotShape.mark(x, y, "o", colourIdx)
        */
        addVarToGraph(timeGraph, var, colourIdx)
        colourIdx += 1
        
        compUtils.findDistMechCompByName("ProxyDendrites", 0, proxDendCompOrNil)
        compUtils.findDistMechCompByName("DistalDendrites", 0, distDendCompOrNil)
        
        if (proxDendCompOrNil != nil && distDendCompOrNil != nil) {
            isDisconnected = showMainSubCore(pathPlotShape, proxDendCompOrNil.list_ref, distDendCompOrNil.list_ref, pyVarsSet, colourIdx, &x_min, &x_max)
            if (isDisconnected) {
                return
            }
        } else {
            // We'll use dendrite_ref
            x_max = showFallbackSubCore(pathPlotShape, pyVarsSet, colourIdx)
            if (x_max == -1) {
                return
            }
            x_min = 0
        }
        
        timeGraph.size(0, tstop, y_min, y_max)
        setXYLabels(timeGraph, "Time (ms)")
        graphList[0].append(timeGraph)
        
        rangeGraph.addobject(_rangeVarPlot, 2, 0)    // Red
        rangeGraph.size(x_min, x_max, y_min, y_max)
        setXYLabels(rangeGraph, "Distance (um)")
        flush_list.append(rangeGraph)
        
        pathSecList = new SectionList()
        _rangeVarPlot.list(pathSecList)     // !!! we have called this in showMainSubCore - just reuse
        pathPlotShape.color_list(pathSecList, 2)    // Red
    }
    
    func showMainSubCore() { local colourIdx, dist1_best, u1, dist2_best, u2, dist_max localobj pathPlotShape, proxDendSec_list, distDendSec_list, pyVarsSet, sec1_ref, sec2_ref, secList, list_ref
        
        pathPlotShape = $o1
        proxDendSec_list = $o2
        distDendSec_list = $o3
        pyVarsSet = $o4
        colourIdx = $5
        
        dist1_best = findMostDistantPointInSections(proxDendSec_list, sec1_ref, &u1)
        if (isDisconnectedDistance(dist1_best)) {
            return 1
        }
        
        dist2_best = findMostDistantPointInSections(distDendSec_list, sec2_ref, &u2)
        if (isDisconnectedDistance(dist2_best)) {
            return 1
        }
        
        sec1_ref.sec {
            _rangeVarPlot.begin(u1)
        }
        
        sec2_ref.sec {
            _rangeVarPlot.end(u2)
        }
        
        secList = new SectionList()
        _rangeVarPlot.list(secList)
        list_ref = new List()
        secListToListOfSecRef(secList, list_ref)
        
        // !!!! instead of calling this like in showFallbackSubCore,
        //      take the equidistant points along the _rangeVarPlot path starting at {sec1_ref, u1} and ending at {sec2_ref, u2}
        dist_max = addPointsForVoltageInDendrites(list_ref, pathPlotShape, timeGraph, pyVarsSet, colourIdx)
        if (dist_max == -1) {
            codeContractViolation()
        }
        
        $&6 = -dist1_best
        $&7 = dist2_best
        
        return 0
    }
    
    func showFallbackSubCore() { local colourIdx, dist_max localobj pathPlotShape, pyVarsSet
        
        pathPlotShape = $o1
        pyVarsSet = $o2
        colourIdx = $3
        
        soma_ref.o(0).sec {
            _rangeVarPlot.begin(0.5)
        }
        
        dist_max = addPointsForVoltageInDendrites(dendrite_ref, pathPlotShape, timeGraph, pyVarsSet, colourIdx)
        if (dist_max == -1) {   //
            return -1           // !!! maybe remove this
        }                       //
        
        return dist_max
    }
    
    // Here we choose some quite random points on dendrites equidistantly spaced by "distance" ("numDendPts" points in total);
    // !!! an alternative implementation may choose "numDendPts" farthest from each other points on dendrites (using the graph theory)
    func addPointsForVoltageInDendrites() { local colourIdx, isDisconnected, dist_min, dist_max, u, isFirstPoint, dist localobj list_ref, pathPlotShape, timeGraph, pyVarsSet
        strdef sec_name, var, hocCommand
        
        list_ref = $o1
        pathPlotShape = $o2
        timeGraph = $o3
        pyVarsSet = $o4
        colourIdx = $5
        
        isDisconnected = getDistRangeGivenSections(list_ref, &dist_min, &dist_max)
        if (isDisconnected) {
            mwh.showWarningBox("Cannot proceed with this simulation because at least one dendrite section doesn't have a topological connection with the distance centre.")
            return -1
        }
        
        u = -1
        
        isFirstPoint = 1
        for eachPointInGrid(&dist, dist_min, dist_max, numDendPts + 1) {
            if (isFirstPoint) {
                // We have used soma_ref.o(0).sec(0.5) as the first watched point (the distance centre)
                isFirstPoint = 0
                continue
            }
            findSpecificDistancePointInDendrites(dist, sec_name, &u)
            sprint(var, "%s.v(%g)", sec_name, u)
            if (pyObj.isInPySet(pyVarsSet, var)) {
                continue    // !!! maybe it would be better to get back to findSpecificDistancePointInDendrites and find the next candidate
            }
            /* !!!!
            getSegmXYZ(secName, u, &x, &y, &z)
            pathPlotShape.mark(x, y, "o", colourIdx)
            */
            addVarToGraph(timeGraph, var, colourIdx)
            pyVarsSet.add(var)
            colourIdx += 1
        }
        
        if (u == -1) {
            // !!!
            codeContractViolation()
        }
        
        sprint(hocCommand, "access %s { _rangeVarPlot.end(%s) }", sec_name, pyObj.str(u))
        execute(hocCommand)
        
        return dist_max
    }
    
    func findMostDistantPointInSections() { local dist_best, u_best, u, dist localobj sec_list, sec_ref
        sec_list = $o1
        
        dist_best = -1
        u_best = -1
        
        for eachSegmInSecList(&u, sec_list) {
            dist = distance(u)
            if (dist > dist_best) {
                sec_ref = new SectionRef()
                u_best = u
                dist_best = dist
            }
        }
        
        if (dist_best == -1) {
            // !!!!!
            codeContractViolation()
        }
        
        $o2 = sec_ref
        $&3 = u_best
        
        return dist_best
    }
    
    proc findSpecificDistancePointInDendrites() { local dist_exp, delta_best, u_best, u, dist, delta
        strdef sec_name
        
        dist_exp = $1
        
        delta_best = math.inf
        u_best = -1
        
        for eachSegmInSecList(&u, dendrite_ref) {
            dist = distance(u)
            delta = abs(dist - dist_exp)
            if (delta < delta_best) {
                sec_name = secname()
                u_best = u
                delta_best = delta
            }
        }
        
        if (u_best == -1) {
            // !!!!!
            codeContractViolation()
        }
        
        $s2 = sec_name
        $&3 = u_best
    }
    
    proc setXYLabels() { localobj graph
        strdef x_label
        graph = $o1
        x_label = $s2
        graph.label(0.44, 0.015, x_label)
        graph.label(0.04, 0.95, "Voltage (mV)")
    }
    
endtemplate SimVoltageCA1Neuron
